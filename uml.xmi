<?xml version="1.0" encoding="UTF-8"?>
<XMI verified="false" xmlns:UML="http://schema.omg.org/spec/UML/1.4" xmi.version="1.2" timestamp="2018-02-08T14:54:08">
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>umbrello uml modeller http://umbrello.kde.org</XMI.exporter>
   <XMI.exporterVersion>1.6.13</XMI.exporterVersion>
   <XMI.exporterEncoding>UnicodeUTF8</XMI.exporterEncoding>
  </XMI.documentation>
  <XMI.metamodel xmi.name="UML" xmi.version="1.4" href="UML.xml"/>
 </XMI.header>
 <XMI.content>
  <UML:Model isSpecification="false" xmi.id="m1" isRoot="false" isLeaf="false" isAbstract="false" name="UML Model">
   <UML:Namespace.ownedElement>
    <UML:Stereotype isSpecification="false" visibility="public" xmi.id="folder" isRoot="false" namespace="m1" isLeaf="false" isAbstract="false" name="folder"/>
    <UML:Stereotype isSpecification="false" visibility="public" xmi.id="datatype" isRoot="false" namespace="m1" isLeaf="false" isAbstract="false" name="datatype"/>
    <UML:Model isSpecification="false" visibility="public" xmi.id="Logical_View" isRoot="false" namespace="m1" isLeaf="false" isAbstract="false" name="Logical View">
     <UML:Namespace.ownedElement>
      <UML:Package isSpecification="false" visibility="public" xmi.id="Datatypes" isRoot="false" namespace="Logical_View" isLeaf="false" isAbstract="false" stereotype="folder" name="Datatypes">
       <UML:Namespace.ownedElement>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="ueBzwQtsNuTG5" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="char"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="umWlKwntyInGn" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="int"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="u71pLpNi8dO4o" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="float"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uHFCB0pGxSum2" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="double"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uzuVHgqUUOsNA" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="bool"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="udSiblrLAI3pw" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="string"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uVA7dJFQEXEGS" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="unsigned char"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="u9znWiA3DMiy1" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="signed char"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uJZGsShZWASQ1" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="unsigned int"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uV8dPzOPW4rr1" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="signed int"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="u6c9cSRFZuLPj" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="short int"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="us6Bmuol8EbrX" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="unsigned short int"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="ur1d37BB0e23a" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="signed short int"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="um4g0O4AyVm32" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="long int"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="u17IlZmV6bEEd" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="signed long int"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="u7eHdwBclnIvZ" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="unsigned long int"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uu97xwcPFOTAP" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="long double"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uBgX5B9QEpUG3" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="wchar_t"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="OYhdzGZJC2Xo" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="short"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="MKia3ZGMdCBG" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="long"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="dO3tLezjDeNC" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="unsigned short"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uwT4w0sHIarL" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="unsigned long"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="5f6p294Nq9tG" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="new_datatype"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uix1gU64a3sZ" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="array"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="0XjFzIldpKe9" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="tuple"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="mlZ3aMGT3CUh" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="object"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="eZlCcdka8Tp7" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="set"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uNEO6u9NCHwOO" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" stereotype="datatype" name="undef"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="ummfz05vKgnuN" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" name="list"/>
        <UML:DataType isSpecification="false" visibility="public" xmi.id="uYqsswCrgbtMr" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" name="dict"/>
        <UML:DataType isSpecification="false" elementReference="ukQaaNuZog71s" visibility="public" xmi.id="u12pHNK4FPzNZ" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" name="vector&lt; int >"/>
        <UML:DataType isSpecification="false" elementReference="uX9xgl0D33Gl0" visibility="public" xmi.id="ukaEiNMZkb27L" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" name="cngenotype&amp;"/>
        <UML:DataType isSpecification="false" elementReference="uJRsbYKHIKeSE" visibility="public" xmi.id="ul3gI0PpS7ndb" isRoot="false" namespace="Datatypes" isLeaf="false" isAbstract="false" name="ArrayXd&amp;"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Package isSpecification="false" visibility="public" xmi.id="uXzRwZqek96LR" isRoot="false" namespace="Logical_View" isLeaf="false" isAbstract="false" name="preprocess">
       <UML:Namespace.ownedElement>
        <UML:Class isSpecification="false" visibility="public" xmi.id="u9lL7RaxBuDmk" isRoot="false" namespace="uXzRwZqek96LR" isLeaf="false" isAbstract="false" name="Segment">
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="ncxXZk61MsOb" type="udSiblrLAI3pw" initialValue="&quot;&quot;" name="name"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="ParBVggPRxEp" type="umWlKwntyInGn" initialValue="-1" name="chromIdx"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="IfUIUlJILFps" type="udSiblrLAI3pw" initialValue="&quot;&quot;" name="chromName"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="xvsHmEsBohKH" type="umWlKwntyInGn" initialValue="-1" name="start"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="N0eowsbCV4U0" type="umWlKwntyInGn" initialValue="-1" name="end"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="plI8y50vzqAl" type="umWlKwntyInGn" initialValue="-1" name="nReadNum"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="42uriC65Dls7" type="umWlKwntyInGn" initialValue="-1" name="tReadNum"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uWTHsFcHsKOk" type="u71pLpNi8dO4o" initialValue="-1.0" name="gc"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="bRJ7Vn5IWLOV" type="u71pLpNi8dO4o" initialValue="-1.0" name="LOHFrac"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="OPONFZ6IZy9H" type="udSiblrLAI3pw" initialValue="&quot;NONE&quot;" name="LOHStatus"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="BFLMyBTaamh6" type="u71pLpNi8dO4o" initialValue="-1.0" name="APMFrac"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="XkM15lWT8tpL" type="udSiblrLAI3pw" initialValue="&quot;NONE&quot;" name="APMStatus"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="VdSdWHwwAav2" type="uNEO6u9NCHwOO" initialValue="None" name="pairedCounts"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="vEzqy6pRhH2B" type="uNEO6u9NCHwOO" initialValue="None" name="BAFCounts"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="lsWLcBP7vk80" type="udSiblrLAI3pw" initialValue="&quot;FALSE&quot;" name="baselineLabel"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="DJNV2COxOLoL" type="umWlKwntyInGn" initialValue="-1" name="stripeIdx"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="Rdk6snHOkO2H" type="uNEO6u9NCHwOO" initialValue="None" name="alleleType"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="Wz7gX0hpBk6t" type="umWlKwntyInGn" initialValue="-1" name="copyNumber"/>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="u3OzDo8E5yuAq" isRoot="false" namespace="uXzRwZqek96LR" isLeaf="false" isAbstract="false" name="Segment list"/>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uGJAJHVksU5kD" isRoot="false" namespace="uXzRwZqek96LR" isLeaf="false" isAbstract="false" name="Stripe">
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="wkem52XAfbyf" type="udSiblrLAI3pw" initialValue="&quot;&quot;" name="name"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="i22X9tnP8h87" type="udSiblrLAI3pw" initialValue="&quot;&quot;" name="sid"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="jN0F1BcxvGi0" type="uNEO6u9NCHwOO" initialValue="[]" name="segIdL"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="GF9to7ZX7Z4H" type="uNEO6u9NCHwOO" initialValue="None" name="pairedCounts"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="RpgZWmgD9gR8" type="umWlKwntyInGn" initialValue="-1" name="nReadNum"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="p34lHmjXzsQn" type="umWlKwntyInGn" initialValue="-1" name="tReadNum"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="zxI5VKMwA0Te" type="udSiblrLAI3pw" initialValue="&quot;baseline&quot;" name="tag"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="m7qtnHzdI3MZ" type="umWlKwntyInGn" initialValue="-1" name="copyNumber"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="p54oyScvOs0t" type="udSiblrLAI3pw" initialValue="&quot;&quot;" name="genotype"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="DKnNIGz2Lpt8" type="uNEO6u9NCHwOO" initialValue="None" name="tssb"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="Q6yozxhCFSZY" type="uNEO6u9NCHwOO" initialValue="None" name="node"/>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="kZiXtMgd5Fge" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init_segs">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uyasQ1rz82eR" type="uNEO6u9NCHwOO" value="[]" name="segsL"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="jji5DVlRuJK2" type="uNEO6u9NCHwOO" value="[]" name="segsIdxL"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uSFbzvVi5laeK" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init_RD"/>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="ugDCbkG53tlI7" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init_BAF"/>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uiF2M6P6TKTpM" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="log_likelihood"/>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="uN2mauWozIBJj" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="log_likelihood_RD_BAF">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uYe51AmWfnCfM" type="u71pLpNi8dO4o" value="" name="phi"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uJkOJRAbAe0jz" type="u71pLpNi8dO4o" value="0" name="baseline"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uTQo2OgKdfr4M" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="getLLStripe">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uLD9MkaMnrf0G" type="umWlKwntyInGn" value="" name="copyNumber"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u8iySwvJz4QHG" type="u71pLpNi8dO4o" value="" name="phi"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uoKC8JdHXqEjB" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="augBAF">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uUpwCSy5NteKs" type="umWlKwntyInGn" value="" name="copyNumber"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uhBvLhFJ7hELb" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="getRD">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u6eLmAPgDdGzY" type="umWlKwntyInGn" value="" name="copyNumber"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uxYrfLHaDSGEk" type="u71pLpNi8dO4o" value="" name="phi"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="utytXH9nvX4L1" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="getBAF">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uszVuXGdWROes" type="umWlKwntyInGn" value="" name="copyNumber"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ufrtwG6PaukYw" type="uYqsswCrgbtMr" value="" name="alleleTypes"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uSwhpoCoBtLDi" type="u71pLpNi8dO4o" value="" name="phi"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="ujk5BH4jpEXpe" comment="The stripe objects, including load, property operations" isRoot="false" namespace="uXzRwZqek96LR" isLeaf="false" isAbstract="false" name="StripePool">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="uVdg3drZS5Nlq"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="protected" xmi.id="uc29pM9LvmIDX" type="uw5mZm9Nan99y" name="segPool"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uVWJqOZ5F3KED" type="ummfz05vKgnuN" initialValue="[]" name="stripes"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="uRmyokQfI8cUg" type="u71pLpNi8dO4o" initialValue="0.0" name="baseline"/>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="u5artKIw52dAK" comment="import segmentPool object&#xa;        :segmentPool: TODO&#xa; stripes" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ut7b2cD12c18P" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uqvmb4vXCeYGK" type="udSiblrLAI3pw" value="" name="segmentPool"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uEy6gXg16gXth" type="udSiblrLAI3pw" value="" name="baseline"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="ukC4j5IWapCtY" comment="TODO: Docstring for get.&#xa;        :returns: TODO&#xa;" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="get">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u7yPk2hVmrq2r" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uBUCNKUgjVg8E" type="udSiblrLAI3pw" value="" name="yDown"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uBnwoXDhtWkng" type="udSiblrLAI3pw" value="" name="yUp"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uzglV9mU9AmVs" type="udSiblrLAI3pw" value="" name="stripeNum"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u7AmW1vLjMl3H" type="udSiblrLAI3pw" value="" name="noiseStripeNum"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u6Ukw8I6Svyhw" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="output_txt">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ua0VBFMTR0zeD" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uj8awm8VyCkmX" type="udSiblrLAI3pw" value="" name="outFileName"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uJJI1qcT0zh9x" comment="The aggregation operations for segments in data&#xa;        :returns: stripes data structure&#xa; here should keep idx 记录是否是outlier 此处应该只获取最大和最小值之间的条带，且要保留原始位置，以方便索引 此处获取最小和最大值之间的条带的方法是：直接去除这些位置不列入计算范围 此处应该是去除了outlier之后的Counter 对每一个条带进行裂解操作，生成子条带, return" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="aggregate">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ulpLs2ag5xD8H" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u3iTyG0hRtp26" type="udSiblrLAI3pw" value="" name="yDown"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uFH6UkM2isVGS" type="udSiblrLAI3pw" value="" name="yUp"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="urRaeXyUjFX0O" type="udSiblrLAI3pw" value="" name="stripeNum"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uFGh8hdNIunYH" type="udSiblrLAI3pw" value="" name="noiseStripeNum"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uCmrJaRtFZ0hc" comment="The decomposition operations for segments in data&#xa;        :parameters: TODO&#xa;        :returns: TODO&#xa; 获得该类别的所有结点idx： 即，clusters 中与cId相等且，在statusYcV中的位置 这里的基于BAF的归类处理分为3个步骤 首先进行所有seg的BAF的密度估计，然后获得峰值    类别定位 然后对每一个seg进行归类，按照内部投票的方式     Seg归类 然后返回 这里需要有一个记录原始向量中位置的向量 status_p_T_v = np.logical_and(pT > p_T_min, pT &lt; p_T_max).flatten()" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="decompose">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uTUl4qdJHjyKj" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uJvqSnVw2LWUw" type="udSiblrLAI3pw" value="" name="cId"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uvKHvcEaPnzdD" type="udSiblrLAI3pw" value="" name="clusters"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ubskbBiiAQoDB" type="udSiblrLAI3pw" value="" name="statusYcV"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uMmzxgydu1EDb" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="getSegLabl">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u5aASKRtHTr7L" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uWJgsFrBjwMFc" type="udSiblrLAI3pw" value="" name="seg"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ugMHCfETRe9uM" type="udSiblrLAI3pw" value="" name="clusterCenters"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uw5mZm9Nan99y" isRoot="false" namespace="uXzRwZqek96LR" isLeaf="false" isAbstract="false" name="SegmentPool">
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="u36UEqbQP3E1t" type="umWlKwntyInGn" initialValue="-1" name="baseline"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uUCNCTtJytDIm" type="uNEO6u9NCHwOO" name="segments"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="usKHjJy7DbcDJ" type="umWlKwntyInGn" initialValue="6" name="maxCopyNumber"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="u6wMQuIoKs0pV" type="umWlKwntyInGn" initialValue="30" name="coverage"/>
          <UML:Attribute isSpecification="false" visibility="protected" xmi.id="uhQ60AEZGhs1Z" type="uYqsswCrgbtMr" name="alleleConfig"/>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="ufjghCz075IPu" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uCuaCvrO9tOsi" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uA2rnU9B7ORIB" type="udSiblrLAI3pw" value="" name="maxCopyNumber"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u5IlGxn6vUnmV" comment="        :bedName: TODO&#xa;        :returns: TODO&#xa; if 0 == nReadNum: tempSeg.log2_ratio = -float('Inf') else: tempSeg.log2_ratio = np.log2(1.0 * tReadNum/nReadNum) tempSeg.log_ratio = np.log(1.0 * (tReadNum + 1.0) / (nReadNum + 1.0))" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="load_seg_bed">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uTl7cByMay5Yx" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u2Xu8y5PMzg6l" type="udSiblrLAI3pw" value="" name="bedName"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u8bcOXT2EnOmF" comment=" tempSeg.log2_ratio = np.log2(1.0 * tReadNum/normal_reads_num) tempSeg.log_ratio = np.log(1.0 * (tReadNum + 1.0) / (normal_reads_num + 1.0))" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="load_seg_bam">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="urr3yhjZBIiXa" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ubqz6xv2YZn0A" type="udSiblrLAI3pw" value="" name="normal_bam"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uNmxMYEylbClz" type="udSiblrLAI3pw" value="" name="tumor_bam"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uZYQBlrrCgsYe" type="udSiblrLAI3pw" value="" name="bed_file_name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uUhiIh66JJbAZ" comment=" 此处转换成了stripe之后再返回" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="get_baseline">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u5s1dXxOA4Mo8" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uX4EI4putoqRO" type="udSiblrLAI3pw" value="" name="maxCopyNumber"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uuJqiE4OBoJQ7" type="udSiblrLAI3pw" value="" name="subcloneNum"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uRlaX1ga4CbyE" type="udSiblrLAI3pw" value="" name="isPreprocess"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u1ILHA5KjC8fG" comment="        return seg list&#xa;" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="get_seg_by_tag">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ujS7HJ8YvuCnG" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uxIPtH4FmhBJh" type="udSiblrLAI3pw" value="" name="tag"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="ufNvLzFKfszwj" comment="        compute the Lambda S, through hierarchy clustering&#xa; def _log_likelihood(self, id, phi, update_tree=True, new_state=0): if update_tree: ################################################## # some useful info about the tree, # used by CNV related computations, u.set_node_height(self.tssb) u.set_path_from_root_to_node(self.tssb) u.map_datum_to_node(self.tssb) ################################################## seg = self.segments[id] ll, cn, pi = self._getSegResData(seg, phi) return ll def _getSegResData(self, seg, phi): copyNumbers = None if seg.baselineLabel == &quot;True&quot;: copyNumbers = [2] elif get_loga(seg) > self.baseline: copyNumbers = range(2, self.max_copy_number + 1) else: copyNumbers = range(0, 2 + 1) llPiS = [self._getLLSeg(seg, copyNumber, phi) for copyNumber in copyNumbers] (ll, pi) = max(llPiS, key=lambda x: x[0]) cn = llPiS.index((ll, pi)) return ll, cn, pi def _getLLSeg(self, seg, copyNumber, phi): llSeg = 0 llRd = self._getRD(seg, copyNumber, phi) alleleType = self._alleleConfig[copyNumber] self._augBAF(seg, copyNumber) if 0 == seg.pairedCounts.shape[0]: llBAFs = 0 pi = &quot;*&quot; else: llBAFs, pi = self._getBAF(seg, copyNumber, alleleType, phi) llSeg = llBAFs + llRd return llSeg, pi def _augBAF(self, seg, copyNumber): if copyNumber > 2: threshold = constants.BAF_THRESHOLD * self._coverage dTj = np.sum(seg.BAF[:, 2:4], axis=1) idxRm = tuple(np.where(dTj &lt; threshold)[0]) seg.BAF = np.delete(seg.BAF, idxRm, axis=0) else: pass def _getRD(self, seg, copyNumber, phi): cN = constants.COPY_NUMBER_NORMAL bar_c = phi * copyNumber + (1.0 - phi) * cN print &quot;____>>> _getRD: bar_c, cN, self._baseline, seg.normal_reads_num____&quot; print bar_c, cN, self._baseline, seg.normal_reads_num print &quot;_________end _getRD:bar_c, cN, self._baseline, seg.normal_reads_num______________&quot; lambda_possion = ( bar_c / cN) * self._baseline * (seg.normal_reads_num + 1) #not minus 1 ? better if lambda_possion &lt; 0: lambda_possion = 0 print &quot;____>>> _getRD: seg.tReadNum, lambda_possion____&quot; print seg.tReadNum, lambda_possion print &quot;_________end _getRD:seg.tReadNum, lambda_possion______________&quot; ll_RD = log_poisson_pdf(seg.tReadNum, lambda_possion) return ll_RD def _getBAF(self, seg, copyNumber, alleleType, phi): cN = constants.COPY_NUMBER_NORMAL mu_N = constants.MU_N # keys, ppmm values 0.5 mu_G = np.array(alleleType.values()) print &quot;____>>> _getBAF: mu_N, mu_G, cN, copyNumber, phi____&quot; print mu_N, mu_G, cN, copyNumber, phi print &quot;_________end _getBAF:mu_N, mu_G, cN, copyNumber, phi______________&quot; mu_E = get_mu_E_joint(mu_N, mu_G, cN, copyNumber, phi) if seg.pairedCounts.shape[0] > 1: b_T_j = np.min(seg.pairedCounts[:, 2:4], axis=1) dTj = np.sum(seg.pairedCounts[:, 2:4], axis=1) baf = b_T_j * 1.0 / dTj outlier = mad_based_outlier(baf) BAF = np.delete(seg.pairedCounts, list(outlier.astype(int)), axis=0) b_T_j = np.min(BAF[:, 2:4], axis=1) dTj = np.sum(BAF[:, 2:4], axis=1) else: b_T_j = np.min(seg.pairedCounts[:, 2:4], axis=1) dTj = np.sum(seg.pairedCounts[:, 2:4], axis=1) pass # add prior or not? ll = log_binomial_likelihood(b_T_j, dTj, mu_E) ll_bafs = ll.sum(axis=0) idx_max = ll_bafs.argmax(axis=0) llBAFs = ll_bafs[idx_max] pi = alleleType[alleleType.keys()[idx_max]] return llBAFs, pi # computes the binomial parameter def compute_n_genomes(self, tp, new_state=0): def descend(nd, new_state): # this is needed for Metropolis-Hastings likelihood computations pi = nd.pi1[tp] if new_state else nd.pi[tp] ssm_node = self.node.path[-1] mr_cnv = self.find_most_recent_cnv(nd) ancestors = nd.get_ancestors() if (ssm_node not in ancestors) and (not mr_cnv): self.nr1 += pi * 2 self.nr2 += pi * 2 self.nr3 += pi * 2 self.nr4 += pi * 2 elif ssm_node in ancestors and (not mr_cnv): self.nr1 += pi self.nv1 += pi self.nr2 += pi self.nv2 += pi self.nr3 += pi self.nv3 += pi self.nr4 += pi self.nv4 += pi elif (ssm_node not in ancestors) and mr_cnv: self.nr1 += pi * (mr_cnv[1] + mr_cnv[2]) self.nr2 += pi * (mr_cnv[1] + mr_cnv[2]) self.nr3 += pi * (mr_cnv[1] + mr_cnv[2]) self.nr4 += pi * (mr_cnv[1] + mr_cnv[2]) elif ssm_node in ancestors and mr_cnv: self.nr3 += pi * max(0, (mr_cnv[1]+mr_cnv[2] - 1)) self.nv3 += pi * min(1, mr_cnv[1]+mr_cnv[2]) self.nr4 += pi * max(0, (mr_cnv[1] + mr_cnv[2] - 1)) self.nv4 += pi * min(1, mr_cnv[1]+mr_cnv[2]) if ssm_node in mr_cnv[0].node.get_ancestors(): self.nr1 = self.nr1 + pi * mr_cnv[1] self.nv1 = self.nv1 + pi * mr_cnv[2] self.nr2 = self.nr2 + pi * mr_cnv[2] self.nv2 = self.nv2 + pi * mr_cnv[1] else: self.nr1 = self.nr1 + pi * max(0, (mr_cnv[1]+mr_cnv[2] - 1)) self.nv1 = self.nv1 + pi * min(1, mr_cnv[1]+mr_cnv[2]) self.nr2 = self.nr2 + pi * max(0, (mr_cnv[1] + mr_cnv[2] - 1)) self.nv2 = self.nv2 + pi * min(1, mr_cnv[1]+mr_cnv[2]) else: print &quot;PANIC&quot; nodes = self.tssb.root['node'].tssb.get_nodes() self.nr1 = 0 self.nv1 = 0 self.nr2 = 0 self.nv2 = 0 self.nr3 = 0 self.nv3 = 0 self.nr4 = 0 self.nv4 = 0 for nd in nodes: descend(nd, new_state) if len(self.cnv) == 1 and self.node == self.cnv[0][0].node: out = [ (self.nr1, self.nv1), (self.nr2, self.nv2), (self.nr3, self.nv3), (self.nr4, self.nv4)] else: out = [(self.nr1, self.nv1), (self.nr2, self.nv2)] return out" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="get_baseline_stripe">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uqbYlhx6RX9IV" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="ue2UNyKwJRGYt" isRoot="false" namespace="uXzRwZqek96LR" isLeaf="false" isAbstract="false" name="BamConverter">
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="protected" xmi.id="uU0K27Hdwgxf9" type="udSiblrLAI3pw" name="nBamName"/>
          <UML:Attribute isSpecification="false" visibility="protected" xmi.id="u35xRZgkk9UpQ" type="ummfz05vKgnuN" name="tBamNameL"/>
          <UML:Attribute isSpecification="false" visibility="protected" xmi.id="uOmm95DFtBVgQ" type="ummfz05vKgnuN" name="bedNameL"/>
          <UML:Attribute isSpecification="false" visibility="protected" xmi.id="uU4cCQHLVHibP" type="udSiblrLAI3pw" name="refFaName"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="uv1ZOdlVYdhba" type="udSiblrLAI3pw" initialValue="&quot;&quot;" name="pathPrefix"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="uy9C5gc5pGbDJ" type="ummfz05vKgnuN" initialValue="[2]" name="subcloneNumberL"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="upXp9czTUL0xe" type="ummfz05vKgnuN" initialValue="[30]" name="coverageL"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="uhPxQXga2VOMo" type="umWlKwntyInGn" initialValue="6" name="maxCopyNumber"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="ub6BbxBJo3fz6" type="u71pLpNi8dO4o" initialValue="0.3" name="baselineThredLOH"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="upLBjDcJ87Ouq" type="u71pLpNi8dO4o" initialValue="0.01" name="baselineThredAPM"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="uCPOG6Z9SB5he" type="u71pLpNi8dO4o" initialValue="20" name="minDepth"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="u1d44UzfOQhPh" type="u71pLpNi8dO4o" initialValue="10" name="minBqual"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="u2L9XdJhRduzT" type="umWlKwntyInGn" initialValue="10" name="minMqual"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="u5SQm4uOJ2BwY" type="umWlKwntyInGn" initialValue="1" name="processNum"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="uRrbT3Rkxjex0" type="udSiblrLAI3pw" initialValue="&quot;&quot;" name="bedCorrectedPath"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="u0EYxyN4SO896" type="udSiblrLAI3pw" initialValue="&quot;&quot;" name="pklPath"/>
          <UML:Attribute isSpecification="false" visibility="private" xmi.id="u0ju2PCTjG9lu" type="ummfz05vKgnuN" initialValue="[]" name="segPoolL"/>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="uzHochCDpJktp" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uWzt2z9Cp2gRG" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uNPSBikeZhXBz" type="udSiblrLAI3pw" value="" name="nBamName"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uXLEI9ALPvvRc" type="udSiblrLAI3pw" value="" name="tBamNameL"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="upr4167aN2xo8" type="udSiblrLAI3pw" value="" name="bedNameL"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uyfXLyCLflcaN" type="udSiblrLAI3pw" value="" name="refFaName"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uUvO9MTnEgMUa" type="udSiblrLAI3pw" value="" name="pathPrefix"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uONdaa524slpq" type="udSiblrLAI3pw" value="" name=";"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uEdHnsvJrhNat" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="convert">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="udmAAWRwjW6Gz" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uICOW3WefDuMm" type="udSiblrLAI3pw" value="" name="method"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uswRFsUVdMZod" type="udSiblrLAI3pw" value="" name="pkl_flag"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="u6K9pxOBSEc4t" comment="        generate stripe from segs&#xa;        mark segs in final sample&#xa;        load segments for each tumor sample&#xa;        correct bias of each tumor sample&#xa;        get the baseline segments&#xa;        calculate baseline of each SegmentPool&#xa;        return: the baseline segments&#xa;        The interception is irrelevant for correction, set as median&#xa;        MCMCLM only returns the m and c, then correct the data here&#xa;        :returns: TODO&#xa; ===============================================================================  Function ===============================================================================" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="mark_stripe"/>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uJmEbWB1TC4UR" ownerScope="classifier" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="process_by_segment">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uQwiN1rwDagXQ" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uFzKmFkJw7F1V" type="udSiblrLAI3pw" value="" name="args_tuple"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="ufnQ1OiN4y8FK" ownerScope="classifier" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="iterator_to_counts">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uZWIAsYo8CGNd" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ufEV88PgW5ENw" type="udSiblrLAI3pw" value="" name="paired_counts_iter"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uL4R4gZf5wcl3" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="load_segs"/>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uBoAvLkCIcoXi" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="correct_bias"/>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uEsDXghVASuXA" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="get_baseline">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uwVnweSOnBsMM" type="0XjFzIldpKe9"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uL0G0B67OrvvF" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="mark_timestamp">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="urYzddNS8PdeP" type="ummfz05vKgnuN" value="" name="blSegs"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u1gNI6FN5kcrV" type="u3qZKPtHkix9M" value="" name="nonBlSegs"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uQQfkOiECyNUY" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="dump"/>
         </UML:Classifier.feature>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Association isSpecification="false" visibility="public" xmi.id="ui5OKutKIDDJW" namespace="Logical_View" name="">
       <UML:Association.connection>
        <UML:AssociationEnd isSpecification="false" visibility="public" xmi.id="uWlkaM1tP3ipN" type="uGJAJHVksU5kD" isNavigable="true" aggregation="composite" changeability="changeable" name=""/>
        <UML:AssociationEnd isSpecification="false" visibility="public" xmi.id="uc5J0a6fOHcNv" type="uNEO6u9NCHwOO" isNavigable="true" aggregation="none" changeability="changeable" name=""/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Generalization isSpecification="false" discriminator="" visibility="public" parent="mlZ3aMGT3CUh" xmi.id="uVdg3drZS5Nlq" namespace="Logical_View" child="ujk5BH4jpEXpe" name=""/>
      <UML:Package isSpecification="false" visibility="public" xmi.id="u8YjLVwdaqM4H" isRoot="false" namespace="Logical_View" isLeaf="false" isAbstract="false" name="model">
       <UML:Namespace.ownedElement>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uo6Oy5unywK80" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="StateManager">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="u1xyroOfnplJY"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uPemZoQlB71yQ" type="mlZ3aMGT3CUh" ownerScope="classifier" initialValue="'state.last.pickle'" name="default_last_state_fn"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uojoZf4U1LsZJ" type="mlZ3aMGT3CUh" ownerScope="classifier" initialValue="'state.initial.pickle'" name="default_initial_state_fn"/>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="ufZhpU9DIZPTV" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uxikKE9G10P0T" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="u7rQtRE14G7Ho" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="write_state">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ueNVUpKAgKgO8" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uyEEDxNtym1ty" type="udSiblrLAI3pw" value="" name="state"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uT4HYla9BMjvA" type="udSiblrLAI3pw" value="" name="state_fn"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="ulLIrn1g4F4na" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="write_state">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uzjvjof8NDWMW" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uj8FlH5uTCsLj" type="udSiblrLAI3pw" value="" name="state"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u059Yo1ib0UWI" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="load_state">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uPVszvjk2EvBD" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uOunpPcMQtzFM" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="load_initial_state">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uUHJ5F4gL0KGL" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uyVZck6zrwTpm" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="write_initial_state">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u2rJ0gga88i4e" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u8MvMQYbzWFzd" type="udSiblrLAI3pw" value="" name="state"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uUHzzIf5ZxTpH" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="delete_state_file">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ufzgpoBYc1A4r" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="umvmXBSUJ08DI" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="state_exists">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="unWYTAklY2e3r" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uQtvIopT8Drvd" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="StripeNode">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="u1RuBCslHL1X5"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="ux7l1AVkKHF6l" type="u71pLpNi8dO4o" ownerScope="classifier" initialValue="0.5" name="init_mean"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="u39iRoZzx5FXT" type="u71pLpNi8dO4o" ownerScope="classifier" initialValue="0.01" name="min_conc"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uZw3oPiMyjzqG" type="u71pLpNi8dO4o" ownerScope="classifier" initialValue="0.1" name="max_conc"/>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="unNj8Wja39hKc" comment=" pi is a first-class citizen used in MH&#x9;to store old state set of nodes from root to this node" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u6zcAmdGSEuWx" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uJejSpp9GJ9Ox" type="udSiblrLAI3pw" value="" name="parent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uDr4zC9muWoao" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="conc">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uKwUFmLIe2eWA" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uEqgyTM8C7uR2" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="kill">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uJVboy7TaJ9nX" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u4aRAXnJIFqpC" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="logprob">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uXVwTXuyTGXoF" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uVa2PZkTB9e8V" type="udSiblrLAI3pw" value="" name="x"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uRbYsXrxVLuLR" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="logprob_restricted">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uhmggKg4AfmWF" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="utk0TGxvxfQM4" type="udSiblrLAI3pw" value="" name="x"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uq7DGTUYppmPR" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="complete_logprob">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uqu7nHSnTAokI" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="uTjof3QhClKsw" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="find_neighbor_datum_n">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uqxbv34yedk63" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="utmfTicz3vLsZ" type="udSiblrLAI3pw" value="" name="x"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="u1KTb3l6K6QEJ" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="is_good_gap">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uH4DqxTrMlxp9" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uug8MhHrOk0J1" type="udSiblrLAI3pw" value="" name="lower_node"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ufd4MuLWVuWii" type="udSiblrLAI3pw" value="" name="upper_node"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uK9csYpKJ9q9s" type="udSiblrLAI3pw" value="" name="position"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uhL2kHAMR9w8G" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="TreeReader">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="uNN920yqugKtE"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="u79zV2L21GF1W" comment=" Sort by index" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u7Cb9CpzRJmcy" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="unXdrk4flpdrl" type="udSiblrLAI3pw" value="" name="archive_fn"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uufxvIckWsK8X" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="read_extra_file">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="utprfJR5wHuh9" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uCwpWndeuH1yv" type="udSiblrLAI3pw" value="" name="filename"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uyiRa0ynDHWcJ" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="num_trees">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u4GGBhpzq7Y8m" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="urf5gBeMX7EVV" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="close">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uLHIIzdzAqO2f" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uS3FTNQkNCyNL" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="extract_metadata">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="um2YyzNlrl9Tt" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uGW2GfKN79Nq7" type="udSiblrLAI3pw" value="" name="zinfo"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uazIe7yJC34Ic" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="extract_burnin_idx">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uk4oiB0jAfd3C" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uSdRlWafbC7JD" type="udSiblrLAI3pw" value="" name="zinfo"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="un7aMYzFsvL7E" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="parse_tree">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="urp1ooeGrE7u6" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uc4S7k2FK0J3L" type="udSiblrLAI3pw" value="" name="zinfo"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uK1Et4w992X3Y" type="udSiblrLAI3pw" value="" name="remove_empty_vertices"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uqBvm10K9Kd9A" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="load_tree">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uBzvDqH4UzESt" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ufIRiXkSxZDdd" type="udSiblrLAI3pw" value="" name="idx"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ubBJT1RHr4KNU" type="udSiblrLAI3pw" value="" name="remove_empty_vertices"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uaGbpBjgA78Au" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="load_trees">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uSLhzOi6Tvdhn" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ubjnpNCcPeciX" type="udSiblrLAI3pw" value="" name="num_trees"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uHVI9gAizAj7t" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="load_trees_and_burnin">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uMlPTlO58vc2n" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="umff2MB14IGfE" type="udSiblrLAI3pw" value="" name="remove_empty_vertices"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="unQMWzlztFW4k" comment=" Sort by LLH" ownerScope="classifier" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="load_trees_and_metadata">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="usdWz9EVyFe4o" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u58CPzQ9GInoe" type="udSiblrLAI3pw" value="" name=";"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="u84rAJUAzG4Ge" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="TreeWriter">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="uJFgnREl6smWP"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uldGbu6ycIXeE" type="mlZ3aMGT3CUh" ownerScope="classifier" initialValue="'trees.zip'" name="default_archive_fn"/>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="uInflbKzOJooD" comment=" Remove file to avoid unwanted behaviour. By the zipfile module's behaviour, given that we open the file with the &quot;a&quot; flag, if a non-zip file exists at this path, a zip file will be appended to the file; otherwise, if the file is already a zip, additional files will be written into the zip. On a new run, neither case is something we want." isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uh8KwcWUteNXZ" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u0feerAmD60I8" type="udSiblrLAI3pw" value="" name="resume_run"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="usQ3bjbB3BSRL" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="add_extra_file">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uRaQtyfSkFkeo" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ukLJyzwvsfZti" type="udSiblrLAI3pw" value="" name="filename"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u1XEwCJFLNrBt" type="udSiblrLAI3pw" value="" name="data"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uybFdf3eI9M5J" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="ensure_archive_is_valid">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uMSP2yxhF37ls" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uJ8a63w4adStD" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="open_archive">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u5FzRl9GJe4yc" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="protected" xmi.id="uRX3Clfo16PNW" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="close_archive">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uUQuN1DtplNH1" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u2Cztdx1YbVTH" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="write_trees">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uAyrFcXRr2hzQ" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uZcETpWF7DGst" type="udSiblrLAI3pw" value="" name="serialized_trees"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uL8CubFOwKAhv" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="TSSB">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="upDMtout4md6Q"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uBmgSIwDFUuvt" type="u71pLpNi8dO4o" ownerScope="classifier" initialValue="1.0" name="min_dp_alpha"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uID2hTCcqpNvs" type="u71pLpNi8dO4o" ownerScope="classifier" initialValue="50.0" name="max_dp_alpha"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="ugAGheFdl1mr4" type="u71pLpNi8dO4o" ownerScope="classifier" initialValue="1.0" name="min_dp_gamma"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uzK7vDnotFkUs" type="u71pLpNi8dO4o" ownerScope="classifier" initialValue="10.0" name="max_dp_gamma"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uphXuYDglOZDf" type="u71pLpNi8dO4o" ownerScope="classifier" initialValue="0.05" name="min_alpha_decay"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="ugSsMAjnSRHWx" type="u71pLpNi8dO4o" ownerScope="classifier" initialValue="0.80" name="max_alpha_decay"/>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="uzZRCABIz2FYu" comment=" data.shape[0] #shankar" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uy7GZpBYVCiDu" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="udBs0XaVCWpFQ" type="udSiblrLAI3pw" value="" name=";"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uFAeZiaEdKV2z" comment=" data.shape[0] #shankar shankar    def clear_data(self):        dims = self.data.shape[1]        for n in range(self.num_data):            self.assignments[n].remove_datum(n)        self.assignments = []        self.data        = empty((0,dims))        self.num_data    = 0" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="add_data">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uESraIFAGIDJS" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ulsPBaAGnCffv" type="udSiblrLAI3pw" value="" name="data"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uQADG5pxwqFcW" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="resample_node_params">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uk8EKYN8nij2g" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uuoQV8GK6C3eG" type="udSiblrLAI3pw" value="" name="iters"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uBM6kPusaWVqQ" comment=" Get an initial uniform variate. shankar: to make root node empty###################################  Record most likely copy number  #################################### temporary fix only!!!!!!" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="resample_assignments">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uem6zzKzAwNqk" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uhApL7HpUXGNk" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="cull_tree">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u6ZrloZPZXXqC" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uBE8nqtXB4BDF" comment=" shankar Resample the main break. to make root node empty (shankar)" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="resample_sticks">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ulW952C8CCToy" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uqjmO3ymENkcH" comment=" 每一phi stick 的实际长度 此处添加了剩余空间的长度 每一个空间所占用的比重 随机获得一个位置，此位置之前完整空间的个数 此处min_depth 应该是手动控制的 Immediately resample sticks. print >>sys.stderr, &quot;WARNING: Reached maximum depth.&quot; Rescale the uniform variate to the remaining interval. Perhaps break sticks out appropriately. shankar 返回两个向量graph: { title:            &quot;TSSB Graph&quot;  \&#xa;                                portsharing:      no            \&#xa;                                smanhattanedges:  yes           \&#xa;                                equalydist:       yes           \&#xa;                                layout_algorithm: tree          \&#xa;                                node.fontname:    &quot;helvR8&quot;      \&#xa;node.height:      25node: { label:&quot;%0.5f&quot; title:&quot;%s&quot; width:%d}node: {  label:&quot;%0.5f&quot; title:&quot;%s&quot; width:%d}edge: { source:&quot;%s&quot; target:&quot;%s&quot; anchor:1}}" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="resample_stick_orders">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="utifEpOZfey7g" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="ukQaaNuZog71s" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="vector"/>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uHy1Bw5Y8UePL" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="Node">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="u1zQ9U5pldV3a"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="u9aBukwTk27KW" comment=" set([])#shankar" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="utSAGGK8MXYKS" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u1dMGI5Pu3JWU" type="udSiblrLAI3pw" value="" name="parent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="urS5Xuc0ZQN62" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="kill">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uCqlJ5XKVsN3N" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uBHbDXPwqgTBS" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="spawn">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uIYRNtopDC40q" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="ukRY8nWow0bNT" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="has_data">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uNRUeCuKf8V9z" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="ufzGSuLm9TeBk" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="num_data">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uo2GuB8xdNwjp" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u7BhAOOVd0QHX" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="num_local_data">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uvF6c3oy97hZb" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uk7Q6uu2yajwY" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="add_datum">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uNCOCQjUQAsDM" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uwGYM9A1WFP5Q" type="udSiblrLAI3pw" value="" name="id"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uf7iWdQgQH1DN" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="remove_datum">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uOKelRDwq5uhW" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uqHPGSUMpMMsB" type="udSiblrLAI3pw" value="" name="id"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uUDcKHgymrndM" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="resample_params">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u50SfJXoOCIMX" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="ucu72qgjTe4ss" comment=" shankar" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="add_child">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u7pciYJIZ5FFI" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uSEnitkS3kaz8" type="udSiblrLAI3pw" value="" name="child"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uslhuLH93dcfJ" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="remove_child">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uaZAIS2LBt0so" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uiAFYyM51DybS" type="udSiblrLAI3pw" value="" name="child"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u9r21KrzE4dg1" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="children">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ulwFXO5IQ0tBX" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="ueZR2lJCfhjhL" comment=" return self.tssb.data[list(self.data),:] #shankar" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="get_data">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uSPE7kBdCHOeX" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u4uV0ZSamf7eO" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="logprob">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uPqnhVqsCb2Bt" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="unSS47jK2vHQZ" type="udSiblrLAI3pw" value="" name="x"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uLUYMXXtAFrzx" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="data_log_likelihood">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uxsWnhv0jKfTr" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u1QwIKfBX6iL9" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="sample">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ujnRjJeSjtCzf" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ulXgIxLdsQ2yX" type="udSiblrLAI3pw" value="" name="num_data"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uBwVDTuc2nueI" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="parent">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uFKDq85nxrRBD" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uYPV8gmb0WXQG" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="global_param">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uAXEaepgOJSuh" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ueGfx92m0Q5AK" type="udSiblrLAI3pw" value="" name="key"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uQnO1geRxq07l" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="get_ancestors">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uK92TkyiOeEnU" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="um0bnZMMGVl5L" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="node">
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="ujabQ7WrW2c00" type="umWlKwntyInGn" name="id"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="ulDig2TBHPDRG" type="uHFCB0pGxSum2" name="param"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="u1onkFpf8v6Ok" type="uHFCB0pGxSum2" name="pi"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uD35FV0lRrnVm" type="uHFCB0pGxSum2" comment="dummy" name="param1"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="u2k5mobdMJ8Ei" type="uHFCB0pGxSum2" name="pi1"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="ucjenb0hwXMh5" type="umWlKwntyInGn" name="ndata"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uGQjN8PwdRhrq" type="u12pHNK4FPzNZ" name="dids"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uuvdndyRbaRz4" type="umWlKwntyInGn" name="nchild"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uElJAsE5dYkee" type="u12pHNK4FPzNZ" comment="children ids" name="cids"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="upOdHaDRNdkOg" type="umWlKwntyInGn" name="ht"/>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uxdACF2ni8cc6" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="Exception"/>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uDGZu3uqItdAq" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="datum">
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uTm7qi3kipyFa" type="umWlKwntyInGn" name="id"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uybUZlqPIzhfd" type="uJRsbYKHIKeSE" comment="vector&lt;int> segs_idx;" name="a"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uWJbYfxciHsxY" type="uJRsbYKHIKeSE" name="b"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uHba6wFHIzbcy" type="umWlKwntyInGn" name="tumor_reads_num"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uYkgVTKgQop89" type="umWlKwntyInGn" name="normal_reads_num"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uuksKR09Lg52n" type="uzuVHgqUUOsNA" name="baseline_label"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uaGZJw2BGxVJm" type="umWlKwntyInGn" comment="用于保存param时刻对应的copy_number" name="copy_number"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uJth5s171GJDO" type="udSiblrLAI3pw" comment="free it before delete struct&#xa;(用于保存param时刻对应的genotype)" name="genotype"/>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uFpw6OQ0cvHU2" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="log_ll">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uOKDqsnvQl1ws" type="uHFCB0pGxSum2"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uD83Gcqs45ioD" type="uHFCB0pGxSum2" value="" name="phi"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uj2BiIaxb77Q9" type="ukaEiNMZkb27L" value="" name="cgn"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uYG5sOL7cudSp" type="umWlKwntyInGn" value="" name="max_copy_number"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ucDRk4QJozHQ8" type="uHFCB0pGxSum2" value="" name="baseline"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u8XwBe6XcbqAD" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="log_likelihood_RD_BAF">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uwFmv8jsyRXA6" type="uHFCB0pGxSum2"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uwx0w5ILDrC7F" type="uHFCB0pGxSum2" value="" name="phi"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="u93FWWkxEFMik" type="ukaEiNMZkb27L" value="" name="cgn"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="ugr5JkThOkBGS" type="ul3gI0PpS7ndb" value="" name="cns"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uQ2IrapVqNP2R" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="CorruptZipFileError">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="u7jKcBp5NyqEX"/>
         </UML:GeneralizableElement.generalization>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uGMdtNmn1QJIR" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="config_constant">
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="u9OvviFMFLdxD" type="umWlKwntyInGn" name="COPY_NUMBER_NORMAL"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uD1SdafKp8hi3" type="uHFCB0pGxSum2" name="MU_N"/>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uMmWXA3AGfGwe" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="config">
         <UML:Classifier.feature>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uWg0AxvYkzaZf" type="umWlKwntyInGn" name="MH_ITR"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uf70qfA6J22kV" type="u71pLpNi8dO4o" name="MH_STD"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uQEKqjyVS3IP6" type="umWlKwntyInGn" comment="no. of data points" name="N_STRIPE_DATA"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="uBydHPoset49g" type="umWlKwntyInGn" comment="no. of nodes in the tree" name="NNODES"/>
          <UML:Attribute isSpecification="false" visibility="public" xmi.id="u96CwBO7ayRYy" type="umWlKwntyInGn" name="TREE_HEIGHT"/>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uX9xgl0D33Gl0" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="cngenotype"/>
        <UML:Class isSpecification="false" visibility="public" xmi.id="u7SW8xoaiX7hn" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="BackupManager">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="uJdP38hqO2Mkn"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation isSpecification="false" visibility="private" xmi.id="u5vH1Y10NpWed" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="init__">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="uwY43ZqEyBqCw" type="udSiblrLAI3pw"/>
            <UML:Parameter isSpecification="false" visibility="private" xmi.id="uikheiU9OBglH" type="udSiblrLAI3pw" value="" name="filenames"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uLGvsRXG6qaNy" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="save_backup">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="us2xM1kfBMHwe" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="u30Zd3GXAozNI" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="restore_backup">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="u2xSU2Wn1tcQy" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isSpecification="false" visibility="public" xmi.id="uZSQfG0Q77uJI" isOverride="false" isRoot="false" isLeaf="false" isQuery="false" isAbstract="false" name="remove_backup">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" xmi.id="ucTP1kVbZCgSQ" type="udSiblrLAI3pw"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class isSpecification="false" visibility="public" xmi.id="uJRsbYKHIKeSE" isRoot="false" namespace="u8YjLVwdaqM4H" isLeaf="false" isAbstract="false" name="ArrayXd"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Dependency isSpecification="false" visibility="public" xmi.id="uMHEFP93QteKP" client="um0bnZMMGVl5L" namespace="Logical_View" supplier="ui5OKutKIDDJW" name=""/>
      <UML:Dependency isSpecification="false" visibility="public" xmi.id="uHa85gubhGtzZ" client="um0bnZMMGVl5L" namespace="Logical_View" supplier="ui5OKutKIDDJW" name=""/>
      <UML:Dependency isSpecification="false" visibility="public" xmi.id="uouwNtwv5qQJr" client="um0bnZMMGVl5L" namespace="Logical_View" supplier="ui5OKutKIDDJW" name=""/>
      <UML:Dependency isSpecification="false" visibility="public" xmi.id="uOiTc6baUCkyx" client="um0bnZMMGVl5L" namespace="Logical_View" supplier="ui5OKutKIDDJW" name=""/>
      <UML:Generalization isSpecification="false" discriminator="" visibility="public" parent="mlZ3aMGT3CUh" xmi.id="u1zQ9U5pldV3a" namespace="Logical_View" child="uHy1Bw5Y8UePL" name=""/>
      <UML:Generalization isSpecification="false" discriminator="" visibility="public" parent="uHy1Bw5Y8UePL" xmi.id="u1RuBCslHL1X5" namespace="Logical_View" child="uQtvIopT8Drvd" name=""/>
      <UML:Generalization isSpecification="false" discriminator="" visibility="public" parent="mlZ3aMGT3CUh" xmi.id="upDMtout4md6Q" namespace="Logical_View" child="uL8CubFOwKAhv" name=""/>
      <UML:Generalization isSpecification="false" discriminator="" visibility="public" parent="uxdACF2ni8cc6" xmi.id="u7jKcBp5NyqEX" namespace="Logical_View" child="uQ2IrapVqNP2R" name=""/>
      <UML:Generalization isSpecification="false" discriminator="" visibility="public" parent="mlZ3aMGT3CUh" xmi.id="uJdP38hqO2Mkn" namespace="Logical_View" child="u7SW8xoaiX7hn" name=""/>
      <UML:Generalization isSpecification="false" discriminator="" visibility="public" parent="mlZ3aMGT3CUh" xmi.id="u1xyroOfnplJY" namespace="Logical_View" child="uo6Oy5unywK80" name=""/>
      <UML:Generalization isSpecification="false" discriminator="" visibility="public" parent="mlZ3aMGT3CUh" xmi.id="uJFgnREl6smWP" namespace="Logical_View" child="u84rAJUAzG4Ge" name=""/>
      <UML:Generalization isSpecification="false" discriminator="" visibility="public" parent="mlZ3aMGT3CUh" xmi.id="uNN920yqugKtE" namespace="Logical_View" child="uhL2kHAMR9w8G" name=""/>
      <UML:Class isSpecification="false" visibility="public" xmi.id="u3qZKPtHkix9M" isRoot="false" namespace="Logical_View" isLeaf="false" isAbstract="false" name="[]"/>
     </UML:Namespace.ownedElement>
     <XMI.extension xmi.extender="umbrello">
      <diagrams>
       <diagram type="1" snapcsgrid="0" canvasheight="6792.95" griddotcolor="#d3d3d3" linewidth="0" showattribassocs="1" backgroundcolor="#c2c2c2" documentation="" showpubliconly="0" zoom="70.7570576448898" showopsig="1" localid="-1" showstereotype="1" showops="1" showgrid="0" fillcolor="#ffff00" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showattsig="1" name="class diagram" snapx="25" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" snapgrid="0" xmi.id="uk3dmApt5bcsq" linecolor="#ff0000" showatts="1" canvaswidth="10530.8" snapy="25" showscope="1" isopen="1">
        <widgets>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uY24Ul6WFzc0s" showoperations="1" y="-1696.02" showstereotype="1" fillcolor="#ffaaff" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#000000" usesdiagramfillcolor="0" width="1000" x="-1820.07" xmi.id="uw5mZm9Nan99y" linecolor="#2e13ff" showattributes="1" height="300" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="u52htxWIsNDlx" showoperations="1" y="-2526.19" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="250" x="2075.59" xmi.id="uMmWXA3AGfGwe" linecolor="#ff0000" showattributes="1" height="162" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uGSVU333KwBx9" showoperations="1" y="-3721" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="147" x="1507.52" xmi.id="ukQaaNuZog71s" linecolor="#ff0000" showattributes="1" height="49" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uwuYsdchCl7xy" showoperations="1" y="-3965.13" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="193" x="1756.06" xmi.id="uX9xgl0D33Gl0" linecolor="#ff0000" showattributes="1" height="49" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uSYavHYWsTCDJ" showoperations="1" y="-3155.67" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="432" x="4087.45" xmi.id="u7SW8xoaiX7hn" linecolor="#ff0000" showattributes="1" height="137" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="ujdHWPNNv7m8V" showoperations="1" y="-3218.94" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="295" x="3354.25" xmi.id="uQ2IrapVqNP2R" linecolor="#ff0000" showattributes="1" height="49" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uNF3KmJ54pN0n" showoperations="1" y="-3639.38" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="683" x="4127.74" xmi.id="u84rAJUAzG4Ge" linecolor="#ff0000" showattributes="1" height="200" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uQ2BGmdtdgKUp" showoperations="1" y="-2316.79" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="694" x="3482.03" xmi.id="uo6Oy5unywK80" linecolor="#ff0000" showattributes="1" height="275" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uL0DmnNbKDcfk" showoperations="1" y="-3584.93" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="181" x="2860.35" xmi.id="uxdACF2ni8cc6" linecolor="#ff0000" showattributes="1" height="49" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="um28EHc4LAxSN" showoperations="1" y="-4654.45" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="261" x="1176.56" xmi.id="um0bnZMMGVl5L" linecolor="#ff0000" showattributes="1" height="287" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uz456aCuMJ4IJ" showoperations="1" y="-4890.68" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="796" x="2171.63" xmi.id="uhL2kHAMR9w8G" linecolor="#ff0000" showattributes="1" height="312" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uHG8JsYLL1awr" showoperations="1" y="-2514.38" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="455" x="2993.89" xmi.id="uHy1Bw5Y8UePL" linecolor="#ff0000" showattributes="1" height="512" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="ubzqlLlpHUhmQ" showoperations="1" y="-2707.01" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="956" x="4739.09" xmi.id="uQtvIopT8Drvd" linecolor="#ff0000" showattributes="1" height="300" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uRIUBwCTQpGZv" showoperations="1" y="-2616.82" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="159" x="2304.53" xmi.id="uJRsbYKHIKeSE" linecolor="#ff0000" showattributes="1" height="49" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uok9by1DOIvfy" showoperations="1" y="-3337.7" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="307" x="1587.72" xmi.id="uGMdtNmn1QJIR" linecolor="#ff0000" showattributes="1" height="87" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="upBNL4Mwmnjt7" showoperations="1" y="-1557.1" showstereotype="1" fillcolor="#aaffff" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#000000" usesdiagramfillcolor="0" width="1000" x="-836.188" xmi.id="ue2UNyKwJRGYt" linecolor="#000000" showattributes="1" height="700" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="uPUkX4suAlRsW" showoperations="1" y="-1247.93" showstereotype="1" fillcolor="#ffaa7f" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#000000" usesdiagramfillcolor="0" width="683" x="-2766.3" xmi.id="uGJAJHVksU5kD" linecolor="#00aa00" showattributes="1" height="525" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="ut9KqD4sGy6cM" showoperations="1" y="-1838.55" showstereotype="1" fillcolor="#ffaaff" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#000000" usesdiagramfillcolor="0" width="398" x="-2771.25" xmi.id="u9lL7RaxBuDmk" linecolor="#0000ff" showattributes="1" height="487" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="utIySW8p7KDcK" showoperations="1" y="-1047.91" showstereotype="1" fillcolor="#ffaa7f" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#000000" usesdiagramfillcolor="0" width="1000" x="-2028.33" xmi.id="ujk5BH4jpEXpe" linecolor="#00aa00" showattributes="1" height="250" showscope="1"/>
         <packagewidget fillcolor="#ffffff" x="-1539.29" height="60" usefillcolor="1" usesdiagramusefillcolor="0" linewidth="0" localid="u1ZpFqFlAjkG6" xmi.id="uXzRwZqek96LR" linecolor="#000000" textcolor="#000000" y="-1299.32" isinstance="0" usesdiagramfillcolor="0" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showstereotype="1" width="124" autoresize="1"/>
         <packagewidget fillcolor="#ffff00" x="3950.13" height="60" usefillcolor="1" usesdiagramusefillcolor="0" linewidth="0" localid="u4H188DSPu6Ua" xmi.id="u8YjLVwdaqM4H" linecolor="#ff0000" textcolor="#1dc3ff" y="-4369.41" isinstance="0" usesdiagramfillcolor="0" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showstereotype="1" width="70" autoresize="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="up0Rp4nm94KBh" showoperations="1" y="-5210.04" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="546" x="4364.75" xmi.id="uL8CubFOwKAhv" linecolor="#ff0000" showattributes="1" height="350" showscope="1"/>
         <classwidget autoresize="1" linewidth="0" isinstance="0" usesdiagramusefillcolor="0" showattsigs="601" showpubliconly="0" localid="u8FGPQKDRlEgW" showoperations="1" y="-4097.88" showstereotype="1" fillcolor="#ffff00" showopsigs="601" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" showpackage="1" usefillcolor="1" textcolor="#1dc3ff" usesdiagramfillcolor="0" width="1000" x="4613.7" xmi.id="uDGZu3uqItdAq" linecolor="#ff0000" showattributes="1" height="275" showscope="1"/>
        </widgets>
        <messages/>
        <associations>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uGMdtNmn1QJIR" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="3950.13"/>
           <endpoint endy="-3337.7" endx="1894.72"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="17" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uxdACF2ni8cc6" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="3950.13"/>
           <endpoint endy="-3584.93" endx="3041.35"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="217" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uMmWXA3AGfGwe" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="3950.13"/>
           <endpoint endy="-2526.19" endx="2325.59"/>
          </linepath>
         </assocwidget>
         <assocwidget type="500" autoresize="1" linewidth="0" usesdiagramusefillcolor="144" widgetaid="uQ2IrapVqNP2R" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uxdACF2ni8cc6" usefillcolor="1" textcolor="none" totalcounta="2" indexb="1" totalcountb="2" usesdiagramfillcolor="0" xmi.id="u7jKcBp5NyqEX" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-3218.94" startx="3354.25"/>
           <endpoint endy="-3535.93" endx="3041.35"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="2" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uQ2IrapVqNP2R" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="3950.13"/>
           <endpoint endy="-3218.94" endx="3649.25"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="u7SW8xoaiX7hn" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="4020.13"/>
           <endpoint endy="-3155.67" endx="4087.45"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="32" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uo6Oy5unywK80" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="4020.13"/>
           <endpoint endy="-2316.79" endx="4020.13"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="24" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uL8CubFOwKAhv" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4369.41" startx="4020.13"/>
           <endpoint endy="-4860.04" endx="4364.75"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uQtvIopT8Drvd" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="4020.13"/>
           <endpoint endy="-2707.01" endx="4739.09"/>
          </linepath>
         </assocwidget>
         <assocwidget type="501" autoresize="1" linewidth="0" usesdiagramusefillcolor="80" changeabilityB="900" visibilityB="0" changeabilityA="900" widgetaid="um0bnZMMGVl5L" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="ukQaaNuZog71s" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" xmi.id="uElJAsE5dYkee" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4367.45" startx="1437.56"/>
           <endpoint endy="-3721" endx="1507.52"/>
          </linepath>
          <floatingtext autoresize="1" linewidth="0" isinstance="0" pretext="" usesdiagramusefillcolor="1" localid="uL5NnUHYJCKrZ" y="-3725.72" showstereotype="1" fillcolor="none" font="Monaco,14,-1,5,50,0,0,0,0,0" usefillcolor="1" textcolor="none" text="0..1" usesdiagramfillcolor="1" width="54" x="1556.62" xmi.id="uN6MMNqkkgy98" posttext="" linecolor="#ff0000" height="29" role="702"/>
          <floatingtext autoresize="1" linewidth="0" isinstance="0" pretext="+" usesdiagramusefillcolor="1" localid="uCnVZwiKur2W5" y="-3747.77" showstereotype="1" fillcolor="none" font="Monaco,14,-1,5,50,0,0,0,0,0" usefillcolor="1" textcolor="none" text="cids" usesdiagramfillcolor="1" width="65" x="1469.7" xmi.id="u004vGNas1QbP" posttext="" linecolor="#ff0000" height="29" role="710"/>
         </assocwidget>
         <assocwidget type="510" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" visibilityB="0" changeabilityA="900" widgetaid="uDGZu3uqItdAq" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uJRsbYKHIKeSE" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" xmi.id="uWJbYfxciHsxY" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-3822.88" startx="4613.7"/>
           <endpoint endy="-2616.82" endx="2463.53"/>
          </linepath>
          <floatingtext autoresize="1" linewidth="0" isinstance="0" pretext="+" usesdiagramusefillcolor="1" localid="us5ulsGGwPO9k" y="-2647.82" showstereotype="1" fillcolor="none" font="Monaco,14,-1,5,50,0,0,0,0,0" usefillcolor="1" textcolor="none" text="b" usesdiagramfillcolor="1" width="31" x="2465.53" xmi.id="uL62ER2ZFmMLC" posttext="" linecolor="#ff0000" height="29" role="710"/>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="um0bnZMMGVl5L" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4367.45" startx="3950.13"/>
           <endpoint endy="-4367.45" endx="1437.56"/>
          </linepath>
         </assocwidget>
         <assocwidget type="501" autoresize="1" linewidth="0" usesdiagramusefillcolor="2" changeabilityB="900" visibilityB="0" changeabilityA="900" widgetaid="um0bnZMMGVl5L" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="ukQaaNuZog71s" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" xmi.id="uGQjN8PwdRhrq" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4367.45" startx="1437.56"/>
           <endpoint endy="-3721" endx="1507.52"/>
          </linepath>
          <floatingtext autoresize="1" linewidth="0" isinstance="0" pretext="" usesdiagramusefillcolor="1" localid="uiBZN1YbzoskB" y="-3725.72" showstereotype="1" fillcolor="none" font="Monaco,14,-1,5,50,0,0,0,0,0" usefillcolor="1" textcolor="none" text="0..1" usesdiagramfillcolor="1" width="54" x="1556.62" xmi.id="uox8b2pTjqnTt" posttext="" linecolor="#ff0000" height="29" role="702"/>
          <floatingtext autoresize="1" linewidth="0" isinstance="0" pretext="+" usesdiagramusefillcolor="1" localid="u86XRK5dLepF9" y="-3747.77" showstereotype="1" fillcolor="none" font="Monaco,14,-1,5,50,0,0,0,0,0" usefillcolor="1" textcolor="none" text="dids" usesdiagramfillcolor="1" width="65" x="1469.7" xmi.id="u8L9HgtREi97p" posttext="" linecolor="#ff0000" height="29" role="710"/>
         </assocwidget>
         <assocwidget type="500" autoresize="1" linewidth="0" usesdiagramusefillcolor="48" widgetaid="uQtvIopT8Drvd" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uHy1Bw5Y8UePL" usefillcolor="1" textcolor="none" totalcounta="2" indexb="1" totalcountb="2" usesdiagramfillcolor="0" xmi.id="u1RuBCslHL1X5" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-2440.1" startx="4739.09"/>
           <endpoint endy="-2440.1" endx="3448.89"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="96" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uHy1Bw5Y8UePL" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="3950.13"/>
           <endpoint endy="-2514.38" endx="3448.89"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uhL2kHAMR9w8G" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4369.41" startx="3950.13"/>
           <endpoint endy="-4578.68" endx="2967.63"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="255" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="u84rAJUAzG4Ge" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="4020.13"/>
           <endpoint endy="-3639.38" endx="4127.74"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uJRsbYKHIKeSE" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="3950.13"/>
           <endpoint endy="-2616.82" endx="2463.53"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="ukQaaNuZog71s" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="3950.13"/>
           <endpoint endy="-3721" endx="1654.52"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uDGZu3uqItdAq" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="4020.13"/>
           <endpoint endy="-4097.88" endx="4613.7"/>
          </linepath>
         </assocwidget>
         <assocwidget type="510" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" visibilityB="0" changeabilityA="900" widgetaid="uDGZu3uqItdAq" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uJRsbYKHIKeSE" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" xmi.id="uybUZlqPIzhfd" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-3822.88" startx="4613.7"/>
           <endpoint endy="-2616.82" endx="2463.53"/>
          </linepath>
          <floatingtext autoresize="1" linewidth="0" isinstance="0" pretext="+" usesdiagramusefillcolor="1" localid="u0f1NDqimH7Wh" y="-2647.82" showstereotype="1" fillcolor="none" font="Monaco,14,-1,5,50,0,0,0,0,0" usefillcolor="1" textcolor="none" text="a" usesdiagramfillcolor="1" width="31" x="2465.53" xmi.id="ulwAcJtXtOz0o" posttext="" linecolor="#ff0000" height="29" role="710"/>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="u8YjLVwdaqM4H" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uX9xgl0D33Gl0" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-4309.41" startx="3950.13"/>
           <endpoint endy="-3965.13" endx="1949.06"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="1" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="uXzRwZqek96LR" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="u9lL7RaxBuDmk" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-1299.32" startx="-1539.29"/>
           <endpoint endy="-1351.55" endx="-2373.25"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="1" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="uXzRwZqek96LR" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uGJAJHVksU5kD" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-1239.32" startx="-1539.29"/>
           <endpoint endy="-1239.32" endx="-2083.3"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="1" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="uXzRwZqek96LR" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="ujk5BH4jpEXpe" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-1239.32" startx="-1415.29"/>
           <endpoint endy="-1047.91" endx="-1415.29"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="1" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="uXzRwZqek96LR" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uw5mZm9Nan99y" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-1299.32" startx="-1415.29"/>
           <endpoint endy="-1396.02" endx="-1415.29"/>
          </linepath>
         </assocwidget>
         <assocwidget type="509" roleAdoc="" autoresize="1" linewidth="0" usesdiagramusefillcolor="1" changeabilityB="900" roleBdoc="" visibilityB="0" documentation="" changeabilityA="900" widgetaid="uXzRwZqek96LR" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="ue2UNyKwJRGYt" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" visibilityA="0" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-1299.32" startx="-1415.29"/>
           <endpoint endy="-1299.32" endx="-836.188"/>
          </linepath>
         </assocwidget>
         <assocwidget type="510" autoresize="1" linewidth="0" usesdiagramusefillcolor="0" changeabilityB="900" visibilityB="2" changeabilityA="900" widgetaid="ujk5BH4jpEXpe" fillcolor="#ffff00" seqnum="" font="Monaco [unknown],14,-1,5,50,0,0,0,0,0" indexa="1" widgetbid="uw5mZm9Nan99y" usefillcolor="1" textcolor="none" indexb="1" totalcounta="2" totalcountb="2" usesdiagramfillcolor="0" xmi.id="uc29pM9LvmIDX" visibilityA="2" linecolor="#ff0000">
          <linepath layout="Polyline">
           <startpoint starty="-1047.91" startx="-1302.47"/>
           <endpoint endy="-1396.02" endx="-1302.47"/>
          </linepath>
          <floatingtext autoresize="1" linewidth="0" isinstance="0" pretext="#" usesdiagramusefillcolor="1" localid="urdJ0VeCRVvaO" y="-1389.95" showstereotype="1" fillcolor="none" font="Monaco,14,-1,5,50,0,0,0,0,0" usefillcolor="1" textcolor="none" text="segPool" usesdiagramfillcolor="1" width="99" x="-1403.47" xmi.id="uSsTNYhx50xlm" posttext="" linecolor="#ff0000" height="29" role="710"/>
         </assocwidget>
        </associations>
       </diagram>
      </diagrams>
     </XMI.extension>
    </UML:Model>
    <UML:Model isSpecification="false" visibility="public" xmi.id="Use_Case_View" isRoot="false" namespace="m1" isLeaf="false" isAbstract="false" name="Use Case View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model isSpecification="false" visibility="public" xmi.id="Component_View" isRoot="false" namespace="m1" isLeaf="false" isAbstract="false" name="Component View">
     <UML:Namespace.ownedElement>
      <UML:Package isSpecification="false" visibility="public" xmi.id="u4DCR9uSht0hM" isRoot="false" namespace="Component_View" isLeaf="false" isAbstract="false" stereotype="folder" name="home/dustin/github/phy-SCNAClonal/phySCNAClonal/model">
       <UML:Namespace.ownedElement>
        <UML:Artifact isSpecification="false" visibility="public" xmi.id="uTSJH1UdohYXz" isRoot="false" namespace="u4DCR9uSht0hM" isLeaf="false" isAbstract="false" name="mh.cpp" drawas="1"/>
        <UML:Artifact isSpecification="false" visibility="public" xmi.id="uqw4mUSXCK6WI" isRoot="false" namespace="u4DCR9uSht0hM" isLeaf="false" isAbstract="false" name="mh.hpp" drawas="1"/>
        <UML:Artifact isSpecification="false" visibility="public" xmi.id="uWoKznMw3AtvG" isRoot="false" namespace="u4DCR9uSht0hM" isLeaf="false" isAbstract="false" name="util.cpp" drawas="1"/>
        <UML:Artifact isSpecification="false" visibility="public" xmi.id="uaON2fgDkUoJZ" isRoot="false" namespace="u4DCR9uSht0hM" isLeaf="false" isAbstract="false" name="util.hpp" drawas="1"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
     </UML:Namespace.ownedElement>
    </UML:Model>
    <UML:Model isSpecification="false" visibility="public" xmi.id="Deployment_View" isRoot="false" namespace="m1" isLeaf="false" isAbstract="false" name="Deployment View">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model isSpecification="false" visibility="public" xmi.id="Entity_Relationship_Model" isRoot="false" namespace="m1" isLeaf="false" isAbstract="false" name="Entity Relationship Model">
     <UML:Namespace.ownedElement/>
    </UML:Model>
   </UML:Namespace.ownedElement>
  </UML:Model>
 </XMI.content>
 <XMI.extensions xmi.extender="umbrello">
  <docsettings viewid="uk3dmApt5bcsq" documentation="" uniqueid="uSwhpoCoBtLDi"/>
  <listview>
   <listitem open="1" type="800" id="Views">
    <listitem open="1" type="821" id="Component_View">
     <listitem open="0" type="820" id="u4DCR9uSht0hM">
      <listitem open="0" type="824" id="uTSJH1UdohYXz"/>
      <listitem open="0" type="824" id="uqw4mUSXCK6WI"/>
      <listitem open="0" type="824" id="uWoKznMw3AtvG"/>
      <listitem open="0" type="824" id="uaON2fgDkUoJZ"/>
     </listitem>
    </listitem>
    <listitem open="1" type="827" id="Deployment_View"/>
    <listitem open="1" type="836" id="Entity_Relationship_Model"/>
    <listitem open="1" type="801" id="Logical_View">
     <listitem open="1" type="813" id="u3qZKPtHkix9M"/>
     <listitem label="class diagram" open="0" type="807" id="uk3dmApt5bcsq"/>
     <listitem open="0" type="830" id="Datatypes">
      <listitem open="1" type="829" id="uix1gU64a3sZ"/>
      <listitem open="0" type="829" id="ul3gI0PpS7ndb"/>
      <listitem open="1" type="829" id="uzuVHgqUUOsNA"/>
      <listitem open="1" type="829" id="ueBzwQtsNuTG5"/>
      <listitem open="0" type="829" id="ukaEiNMZkb27L"/>
      <listitem open="1" type="829" id="uYqsswCrgbtMr"/>
      <listitem open="1" type="829" id="uHFCB0pGxSum2"/>
      <listitem open="1" type="829" id="u71pLpNi8dO4o"/>
      <listitem open="1" type="829" id="umWlKwntyInGn"/>
      <listitem open="1" type="829" id="ummfz05vKgnuN"/>
      <listitem open="0" type="829" id="MKia3ZGMdCBG"/>
      <listitem open="1" type="829" id="uu97xwcPFOTAP"/>
      <listitem open="1" type="829" id="um4g0O4AyVm32"/>
      <listitem open="1" type="829" id="5f6p294Nq9tG"/>
      <listitem open="1" type="829" id="mlZ3aMGT3CUh"/>
      <listitem open="1" type="829" id="eZlCcdka8Tp7"/>
      <listitem open="0" type="829" id="OYhdzGZJC2Xo"/>
      <listitem open="1" type="829" id="u6c9cSRFZuLPj"/>
      <listitem open="1" type="829" id="u9znWiA3DMiy1"/>
      <listitem open="1" type="829" id="uV8dPzOPW4rr1"/>
      <listitem open="1" type="829" id="u17IlZmV6bEEd"/>
      <listitem open="1" type="829" id="ur1d37BB0e23a"/>
      <listitem open="1" type="829" id="udSiblrLAI3pw"/>
      <listitem open="1" type="829" id="0XjFzIldpKe9"/>
      <listitem open="0" type="829" id="uNEO6u9NCHwOO"/>
      <listitem open="1" type="829" id="uVA7dJFQEXEGS"/>
      <listitem open="1" type="829" id="uJZGsShZWASQ1"/>
      <listitem open="0" type="829" id="uwT4w0sHIarL"/>
      <listitem open="1" type="829" id="u7eHdwBclnIvZ"/>
      <listitem open="0" type="829" id="dO3tLezjDeNC"/>
      <listitem open="1" type="829" id="us6Bmuol8EbrX"/>
      <listitem open="0" type="829" id="u12pHNK4FPzNZ"/>
      <listitem open="1" type="829" id="uBgX5B9QEpUG3"/>
     </listitem>
     <listitem open="1" type="818" id="u8YjLVwdaqM4H">
      <listitem open="0" type="813" id="uJRsbYKHIKeSE"/>
      <listitem open="0" type="813" id="u7SW8xoaiX7hn">
       <listitem open="0" type="815" id="u5vH1Y10NpWed"/>
       <listitem open="0" type="815" id="uZSQfG0Q77uJI"/>
       <listitem open="0" type="815" id="u30Zd3GXAozNI"/>
       <listitem open="0" type="815" id="uLGvsRXG6qaNy"/>
      </listitem>
      <listitem open="0" type="813" id="uX9xgl0D33Gl0"/>
      <listitem open="0" type="813" id="uMmWXA3AGfGwe">
       <listitem open="0" type="814" id="uWg0AxvYkzaZf"/>
       <listitem open="0" type="814" id="uf70qfA6J22kV"/>
       <listitem open="0" type="814" id="uQEKqjyVS3IP6"/>
       <listitem open="0" type="814" id="uBydHPoset49g"/>
       <listitem open="0" type="814" id="u96CwBO7ayRYy"/>
      </listitem>
      <listitem open="0" type="813" id="uGMdtNmn1QJIR">
       <listitem open="0" type="814" id="u9OvviFMFLdxD"/>
       <listitem open="0" type="814" id="uD1SdafKp8hi3"/>
      </listitem>
      <listitem open="0" type="813" id="uQ2IrapVqNP2R"/>
      <listitem open="0" type="813" id="uDGZu3uqItdAq">
       <listitem open="0" type="814" id="uybUZlqPIzhfd"/>
       <listitem open="0" type="814" id="uWJbYfxciHsxY"/>
       <listitem open="0" type="814" id="uuksKR09Lg52n"/>
       <listitem open="0" type="814" id="uaGZJw2BGxVJm"/>
       <listitem open="0" type="814" id="uJth5s171GJDO"/>
       <listitem open="0" type="814" id="uTm7qi3kipyFa"/>
       <listitem open="0" type="815" id="u8XwBe6XcbqAD"/>
       <listitem open="0" type="815" id="uFpw6OQ0cvHU2"/>
       <listitem open="0" type="814" id="uYkgVTKgQop89"/>
       <listitem open="0" type="814" id="uHba6wFHIzbcy"/>
      </listitem>
      <listitem open="0" type="813" id="uxdACF2ni8cc6"/>
      <listitem open="0" type="813" id="um0bnZMMGVl5L">
       <listitem open="0" type="814" id="uElJAsE5dYkee"/>
       <listitem open="0" type="814" id="uGQjN8PwdRhrq"/>
       <listitem open="0" type="814" id="upOdHaDRNdkOg"/>
       <listitem open="0" type="814" id="ujabQ7WrW2c00"/>
       <listitem open="0" type="814" id="uuvdndyRbaRz4"/>
       <listitem open="0" type="814" id="ucjenb0hwXMh5"/>
       <listitem open="0" type="814" id="ulDig2TBHPDRG"/>
       <listitem open="0" type="814" id="uD35FV0lRrnVm"/>
       <listitem open="0" type="814" id="u1onkFpf8v6Ok"/>
       <listitem open="0" type="814" id="u2k5mobdMJ8Ei"/>
      </listitem>
      <listitem open="0" type="813" id="uHy1Bw5Y8UePL">
       <listitem open="0" type="815" id="ucu72qgjTe4ss"/>
       <listitem open="0" type="815" id="uk7Q6uu2yajwY"/>
       <listitem open="0" type="815" id="u9r21KrzE4dg1"/>
       <listitem open="0" type="815" id="uLUYMXXtAFrzx"/>
       <listitem open="0" type="815" id="uQnO1geRxq07l"/>
       <listitem open="0" type="815" id="ueZR2lJCfhjhL"/>
       <listitem open="0" type="815" id="uYPV8gmb0WXQG"/>
       <listitem open="0" type="815" id="ukRY8nWow0bNT"/>
       <listitem open="0" type="815" id="u9aBukwTk27KW"/>
       <listitem open="0" type="815" id="urS5Xuc0ZQN62"/>
       <listitem open="0" type="815" id="u4uV0ZSamf7eO"/>
       <listitem open="0" type="815" id="ufzGSuLm9TeBk"/>
       <listitem open="0" type="815" id="u7BhAOOVd0QHX"/>
       <listitem open="0" type="815" id="uBwVDTuc2nueI"/>
       <listitem open="0" type="815" id="uslhuLH93dcfJ"/>
       <listitem open="0" type="815" id="uf7iWdQgQH1DN"/>
       <listitem open="0" type="815" id="uUDcKHgymrndM"/>
       <listitem open="0" type="815" id="u1QwIKfBX6iL9"/>
       <listitem open="0" type="815" id="uBHbDXPwqgTBS"/>
      </listitem>
      <listitem open="0" type="813" id="uo6Oy5unywK80">
       <listitem open="0" type="814" id="uojoZf4U1LsZJ"/>
       <listitem open="0" type="814" id="uPemZoQlB71yQ"/>
       <listitem open="0" type="815" id="uUHzzIf5ZxTpH"/>
       <listitem open="0" type="815" id="ufZhpU9DIZPTV"/>
       <listitem open="0" type="815" id="uOunpPcMQtzFM"/>
       <listitem open="0" type="815" id="u059Yo1ib0UWI"/>
       <listitem open="0" type="815" id="umvmXBSUJ08DI"/>
       <listitem open="0" type="815" id="uyVZck6zrwTpm"/>
       <listitem open="0" type="815" id="u7rQtRE14G7Ho"/>
       <listitem open="0" type="815" id="ulLIrn1g4F4na"/>
      </listitem>
      <listitem open="0" type="813" id="uQtvIopT8Drvd">
       <listitem open="0" type="815" id="uq7DGTUYppmPR"/>
       <listitem open="0" type="815" id="uDr4zC9muWoao"/>
       <listitem open="0" type="815" id="uTjof3QhClKsw"/>
       <listitem open="0" type="815" id="unNj8Wja39hKc"/>
       <listitem open="0" type="814" id="ux7l1AVkKHF6l"/>
       <listitem open="0" type="815" id="u1KTb3l6K6QEJ"/>
       <listitem open="0" type="815" id="uEqgyTM8C7uR2"/>
       <listitem open="0" type="815" id="uRbYsXrxVLuLR"/>
       <listitem open="0" type="815" id="u4aRAXnJIFqpC"/>
       <listitem open="0" type="814" id="uZw3oPiMyjzqG"/>
       <listitem open="0" type="814" id="u39iRoZzx5FXT"/>
      </listitem>
      <listitem open="0" type="813" id="uhL2kHAMR9w8G">
       <listitem open="0" type="815" id="urf5gBeMX7EVV"/>
       <listitem open="0" type="815" id="uazIe7yJC34Ic"/>
       <listitem open="0" type="815" id="uS3FTNQkNCyNL"/>
       <listitem open="0" type="815" id="u79zV2L21GF1W"/>
       <listitem open="0" type="815" id="uqBvm10K9Kd9A"/>
       <listitem open="0" type="815" id="uHVI9gAizAj7t"/>
       <listitem open="0" type="815" id="unQMWzlztFW4k"/>
       <listitem open="0" type="815" id="uaGbpBjgA78Au"/>
       <listitem open="0" type="815" id="uyiRa0ynDHWcJ"/>
       <listitem open="0" type="815" id="un7aMYzFsvL7E"/>
       <listitem open="0" type="815" id="uufxvIckWsK8X"/>
      </listitem>
      <listitem open="0" type="813" id="u84rAJUAzG4Ge">
       <listitem open="0" type="815" id="usQ3bjbB3BSRL"/>
       <listitem open="0" type="815" id="uRX3Clfo16PNW"/>
       <listitem open="0" type="814" id="uldGbu6ycIXeE"/>
       <listitem open="0" type="815" id="uybFdf3eI9M5J"/>
       <listitem open="0" type="815" id="uInflbKzOJooD"/>
       <listitem open="0" type="815" id="uJ8a63w4adStD"/>
       <listitem open="0" type="815" id="u2Cztdx1YbVTH"/>
      </listitem>
      <listitem open="0" type="813" id="uL8CubFOwKAhv">
       <listitem open="0" type="815" id="uFAeZiaEdKV2z"/>
       <listitem open="0" type="815" id="uhApL7HpUXGNk"/>
       <listitem open="0" type="815" id="uzZRCABIz2FYu"/>
       <listitem open="0" type="814" id="ugSsMAjnSRHWx"/>
       <listitem open="0" type="814" id="uID2hTCcqpNvs"/>
       <listitem open="0" type="814" id="uzK7vDnotFkUs"/>
       <listitem open="0" type="814" id="uphXuYDglOZDf"/>
       <listitem open="0" type="814" id="uBmgSIwDFUuvt"/>
       <listitem open="0" type="814" id="ugAGheFdl1mr4"/>
       <listitem open="0" type="815" id="uBM6kPusaWVqQ"/>
       <listitem open="0" type="815" id="uQADG5pxwqFcW"/>
       <listitem open="0" type="815" id="uqjmO3ymENkcH"/>
       <listitem open="0" type="815" id="uBE8nqtXB4BDF"/>
      </listitem>
      <listitem open="0" type="813" id="ukQaaNuZog71s"/>
     </listitem>
     <listitem open="1" type="818" id="uXzRwZqek96LR">
      <listitem open="1" type="813" id="ue2UNyKwJRGYt">
       <listitem open="0" type="814" id="upLBjDcJ87Ouq"/>
       <listitem open="0" type="814" id="ub6BbxBJo3fz6"/>
       <listitem open="0" type="814" id="uRrbT3Rkxjex0"/>
       <listitem open="0" type="814" id="uOmm95DFtBVgQ"/>
       <listitem open="0" type="815" id="uEdHnsvJrhNat"/>
       <listitem open="0" type="815" id="uBoAvLkCIcoXi"/>
       <listitem open="0" type="814" id="upXp9czTUL0xe"/>
       <listitem open="0" type="815" id="uQQfkOiECyNUY"/>
       <listitem open="0" type="815" id="uEsDXghVASuXA"/>
       <listitem open="0" type="815" id="uzHochCDpJktp"/>
       <listitem open="0" type="815" id="ufnQ1OiN4y8FK"/>
       <listitem open="0" type="815" id="uL4R4gZf5wcl3"/>
       <listitem open="0" type="815" id="u6K9pxOBSEc4t"/>
       <listitem open="0" type="815" id="uL0G0B67OrvvF"/>
       <listitem open="0" type="814" id="uhPxQXga2VOMo"/>
       <listitem open="0" type="814" id="u1d44UzfOQhPh"/>
       <listitem open="0" type="814" id="uCPOG6Z9SB5he"/>
       <listitem open="0" type="814" id="u2L9XdJhRduzT"/>
       <listitem open="0" type="814" id="uU0K27Hdwgxf9"/>
       <listitem open="0" type="814" id="uv1ZOdlVYdhba"/>
       <listitem open="0" type="814" id="u0EYxyN4SO896"/>
       <listitem open="0" type="815" id="uJmEbWB1TC4UR"/>
       <listitem open="0" type="814" id="u5SQm4uOJ2BwY"/>
       <listitem open="0" type="814" id="uU4cCQHLVHibP"/>
       <listitem open="0" type="814" id="u0ju2PCTjG9lu"/>
       <listitem open="0" type="814" id="uy9C5gc5pGbDJ"/>
       <listitem open="0" type="814" id="u35xRZgkk9UpQ"/>
      </listitem>
      <listitem open="0" type="813" id="u9lL7RaxBuDmk">
       <listitem open="0" type="814" id="Rdk6snHOkO2H"/>
       <listitem open="0" type="814" id="BFLMyBTaamh6"/>
       <listitem open="0" type="814" id="XkM15lWT8tpL"/>
       <listitem open="0" type="814" id="vEzqy6pRhH2B"/>
       <listitem open="0" type="814" id="lsWLcBP7vk80"/>
       <listitem open="0" type="814" id="ParBVggPRxEp"/>
       <listitem open="0" type="814" id="IfUIUlJILFps"/>
       <listitem open="0" type="814" id="Wz7gX0hpBk6t"/>
       <listitem open="0" type="814" id="N0eowsbCV4U0"/>
       <listitem open="0" type="814" id="uWTHsFcHsKOk"/>
       <listitem open="0" type="814" id="bRJ7Vn5IWLOV"/>
       <listitem open="0" type="814" id="OPONFZ6IZy9H"/>
       <listitem open="0" type="814" id="ncxXZk61MsOb"/>
       <listitem open="0" type="814" id="plI8y50vzqAl"/>
       <listitem open="0" type="814" id="VdSdWHwwAav2"/>
       <listitem open="0" type="814" id="xvsHmEsBohKH"/>
       <listitem open="0" type="814" id="DJNV2COxOLoL"/>
       <listitem open="0" type="814" id="42uriC65Dls7"/>
      </listitem>
      <listitem open="0" type="813" id="u3OzDo8E5yuAq"/>
      <listitem open="1" type="813" id="uw5mZm9Nan99y">
       <listitem open="0" type="814" id="uhQ60AEZGhs1Z"/>
       <listitem open="0" type="814" id="u36UEqbQP3E1t"/>
       <listitem open="0" type="814" id="u6wMQuIoKs0pV"/>
       <listitem open="0" type="815" id="ufNvLzFKfszwj"/>
       <listitem open="0" type="815" id="uUhiIh66JJbAZ"/>
       <listitem open="0" type="815" id="u1ILHA5KjC8fG"/>
       <listitem open="0" type="815" id="ufjghCz075IPu"/>
       <listitem open="0" type="815" id="u8bcOXT2EnOmF"/>
       <listitem open="0" type="815" id="u5IlGxn6vUnmV"/>
       <listitem open="0" type="814" id="usKHjJy7DbcDJ"/>
       <listitem open="0" type="814" id="uUCNCTtJytDIm"/>
      </listitem>
      <listitem open="1" type="813" id="uGJAJHVksU5kD">
       <listitem open="0" type="815" id="uoKC8JdHXqEjB"/>
       <listitem open="0" type="814" id="m7qtnHzdI3MZ"/>
       <listitem open="0" type="814" id="p54oyScvOs0t"/>
       <listitem open="0" type="815" id="utytXH9nvX4L1"/>
       <listitem open="0" type="815" id="uTQo2OgKdfr4M"/>
       <listitem open="0" type="815" id="uhBvLhFJ7hELb"/>
       <listitem open="0" type="815" id="ugDCbkG53tlI7"/>
       <listitem open="0" type="815" id="uSFbzvVi5laeK"/>
       <listitem open="0" type="815" id="kZiXtMgd5Fge"/>
       <listitem open="0" type="815" id="uN2mauWozIBJj"/>
       <listitem open="0" type="815" id="uiF2M6P6TKTpM"/>
       <listitem open="0" type="814" id="wkem52XAfbyf"/>
       <listitem open="0" type="814" id="Q6yozxhCFSZY"/>
       <listitem open="0" type="814" id="RpgZWmgD9gR8"/>
       <listitem open="0" type="814" id="GF9to7ZX7Z4H"/>
       <listitem open="0" type="814" id="jN0F1BcxvGi0"/>
       <listitem open="0" type="814" id="i22X9tnP8h87"/>
       <listitem open="0" type="814" id="zxI5VKMwA0Te"/>
       <listitem open="0" type="814" id="p34lHmjXzsQn"/>
       <listitem open="0" type="814" id="DKnNIGz2Lpt8"/>
      </listitem>
      <listitem open="1" type="813" id="ujk5BH4jpEXpe">
       <listitem open="0" type="815" id="uJJI1qcT0zh9x"/>
       <listitem open="0" type="814" id="uRmyokQfI8cUg"/>
       <listitem open="0" type="815" id="uCmrJaRtFZ0hc"/>
       <listitem open="0" type="815" id="ukC4j5IWapCtY"/>
       <listitem open="0" type="815" id="uMmzxgydu1EDb"/>
       <listitem open="0" type="815" id="u5artKIw52dAK"/>
       <listitem open="0" type="815" id="u6Ukw8I6Svyhw"/>
       <listitem open="0" type="814" id="uc29pM9LvmIDX"/>
       <listitem open="0" type="814" id="uVWJqOZ5F3KED"/>
      </listitem>
     </listitem>
    </listitem>
    <listitem open="1" type="802" id="Use_Case_View"/>
   </listitem>
  </listview>
  <codegeneration>
   <codegenerator language="Python">
    <sourcecode id="u5artKIw52dAK" value="self._segmentPool=segmentPool&#xa;self.stripes=[]&#xa;self.baseline=baseline&#xa;"/>
    <sourcecode id="ukC4j5IWapCtY" value="self._aggregate(yDown,yUp,stripeNum,noiseStripeNum=2)&#xa;"/>
    <sourcecode id="u6Ukw8I6Svyhw" value="with open(outFileName,'w')as outFile:&#xa;  outFile.write(&quot;{0}\t{1}\t{2}\t{3}\t{4}\t{5}\n&quot;.format(&#xa;  &quot;id&quot;,&quot;segIdL&quot;,&quot;pairedCounts&quot;,&quot;tReadNum&quot;,&quot;nReadName&quot;,&quot;tag&quot;))for s in self.stripes:&#xa;    aT=s.pairedCounts[:,2]&#xa;    bT=s.pairedCounts[:,3]&#xa;    aTstrl=np.array_str(aT).strip(&quot;[]&quot;).split()&#xa;    bTstrl=np.array_str(bT).strip(&quot;[]&quot;).split()&#xa;    outFile.write(&quot;{0}\t{1}\t{2}\t{3}\t{4}\t{5}\n&quot;.format(&#xa;    s.id,&quot;,&quot;.join(s.segIdL),&quot;{0}|{1}&quot;.format(&quot;,&quot;.join(aTstrl),&quot;,&quot;.join(bTstrl)),s.tReadNum,s.nReadName,s.tag)&#xa;  pass&#xa;&#xa;"/>
    <sourcecode id="uJJI1qcT0zh9x" value="assert stripeNum>0&#xa;rdRaioLog=[]&#xa;ycV=np.array([&#xa;np.log(seg.tReadNum+1)-np.log(seg.nReadName+1)for seg in self._segmentPool.segments])&#xa;statusYcV=np.logical_and(ycV>y_min,ycV&lt;y_max)&#xa;yFcd=ycV.reshape(ycV.shape[0],1)&#xa;clusters=hierarchy.fclusterdata(&#xa;yFcd,stripeNum+noiseStripeNum,criterion=&quot;distance&quot;)mccs=Counter(&#xa;clusters[statusYcV]).most_common(stripeNum+noiseStripeNum)for cId,_ in mccs:&#xa;  self._decompose(cId,clusters,statusYcV)&#xa;&#xa;"/>
    <sourcecode id="uCmrJaRtFZ0hc" value="ca=np.argwhere(clusters==cId).flatten()&#xa;sa=np.argwhere(statusYcV).flatten()&#xa;mSIdx=np.intersectid(ca,sa)&#xa;segList=[self._segmentPool.segments[idx]for idx in mSIdx]&#xa;pairedCountsAll=np.array(&#xa;[[],[],[],[],[],[]],dtype=int).transpose()for seg in segList:&#xa;  pairedCountsAll=np.vstack((pairedCountsAll,&#xa;  seg.pairedCounts))&#xa;aT=pairedCountsAll[:,2]&#xa;bT=pairedCountsAll[:,3]&#xa;dT=aT+bT&#xa;lT=np.min(pairedCountsAll[:,2:4],axis=1)&#xa;pT=lT*1.0/dT&#xa;y=np.ones(pT.shape)&#xa;pTy=np.hstack((pT,y))&#xa;bandwidth=estimate_bandwidth(pTy,quantile=0.2,n_samples=500)&#xa;ms.fit(X)&#xa;labels=ms.labels_&#xa;clusterCenters=ms.clusterCenters&#xa;labelsUnique=np.unique(labels)&#xa;nClusters=len(labelsUnique)&#xa;segLabel=[&#xa;self._getSegLabl(seg,clusterCenters)for seg in segList]&#xa;for label in set(segLabel):&#xa;  if label==-1:&#xa;    continue&#xa;&#xa;  subSegList=[&#xa;  seg for seg,idx in enumerate(segList)if segLabel[idx]==label]&#xa;  subSegIdx=[&#xa;  mSIdx[idx]for seg,idx in enumerate(segList)if segLabel[idx]==label]&#xa;  tempStripe=Stripe()&#xa;  tempStripe.id=&quot;{0}_{1}&quot;.format(str(cId),str(idx))&#xa;  tempStripe.init_segs(subSegList,subSegIdx)&#xa;  self.stripes.append(tempStripe)&#xa;&#xa;"/>
    <sourcecode id="uMmzxgydu1EDb" value="if seg.pairedCounts is None:&#xa;  return-1&#xa;&#xa;aTseg=seg.pairedCounts[:,2]&#xa;bTseg=seg.pairedCounts[:,3]&#xa;dTseg=aTseg+bTseg&#xa;lTseg=np.min(seg.pairedCounts[:,2:4],axis=1)&#xa;pTseg=lTseg*1.0/dTseg&#xa;disSeg=np.abs(pTseg[:,None]-clusterCenters[:,0])&#xa;labelsSeg=np.argmin(disSeg,axis=1)&#xa;return Counter(labelsSeg).most_common(1)[0][0]"/>
    <sourcecode id="ufjghCz075IPu" value="self.maxCopyNumber=maxCopyNumber&#xa;self.coverage=coverage&#xa;self._alleleConfig=get_cn_allele_config(max_copy_number)&#xa;"/>
    <sourcecode id="u5IlGxn6vUnmV" value="bedChroms,bedStarts,bedEnds,tReadNums,nReadNums,gcs=\&#xa;BEDnParser(bedName)get_chrom_format(bedChroms)&#xa;bedNum=len(bedChroms)&#xa;for i in range(0,bedNum):&#xa;  chromIdx=chrom_name_to_idx(bedChroms[i])&#xa;  segName=get_segment_name(&#xa;  bedChroms[i],bedStarts[i],bedEnds[i])nReadNum=nReadNums[i]&#xa;  tReadNum=tReadNums[i]&#xa;  tempSeg=Segment()&#xa;  tempSeg.name=segName&#xa;  tempSeg.chromIdx=chromIdx&#xa;  tempSeg.chromName=bedChroms[i]&#xa;  tempSeg.start=bedStarts[i]&#xa;  tempSeg.end=bedEnds[i]&#xa;  tempSeg.nReadNum=nReadNum&#xa;  tempSeg.tReadNum=tReadNum&#xa;  tempSeg.gc=gcs[i]&#xa;  self.segments.append(tempSeg)&#xa;&#xa;"/>
    <sourcecode id="u8bcOXT2EnOmF" value="chromIdxL=constants.CHROM_IDX_LIST&#xa;chromStart=constants.CHROM_START&#xa;samSQ=normal_bam.header['SQ']&#xa;samChromFormat=get_chrom_format(map(lambda x:x['SN'],samSQ))&#xa;chromLens,chromIdxs=get_chrom_lens_idxs(chromIdxL,samSQ)&#xa;bedChroms,bedStarts,bedEnds,gcs=BEDParser(bed_file_name)&#xa;get_chrom_format(bedChroms)&#xa;bedNum=len(bedChroms)&#xa;for i in range(0,bedNum):&#xa;  chromIdx=chrom_name_to_idx(bedChroms[i])&#xa;  chromName=chrom_idx_to_name(chromIdx,samChromFormat)&#xa;  segName=get_segment_name(chromName,bedStarts[i],bedEnds[i])&#xa;  if chromIdx not in chromIdxL:&#xa;    print'Chromsome {0} not found, segment {1} excluded...'.format(&#xa;    bedChroms[i],segName)sys.stdout.flush()&#xa;    continue&#xa;&#xa;  chromListIdx=chromIdxs.index(chromIdx)&#xa;  if bedStarts[i]&lt;chromStart or bedEnds[&#xa;  i]>chromLens[chromListIdx]:&#xa;    print'Out of range chromsome {0}, segment {1} excluded...'.\&#xa;    format(bedChroms[i],segName)sys.stdout.flush()&#xa;    continue&#xa;&#xa;  nReadNum=normal_bam.count(&#xa;  chromName,bedStarts[i],bedEnds[i])tReadNum=tumor_bam.count(&#xa;  chromName,bedStarts[i],bedEnds[i])tempSeg=Segment()&#xa;  tempSeg.name=segName&#xa;  tempSeg.chromIdx=chromIdx&#xa;  tempSeg.chromName=chromName&#xa;  tempSeg.start=bedStarts[i]&#xa;  tempSeg.end=bedEnds[i]&#xa;  tempSeg.nReadNum=nReadNum&#xa;  tempSeg.tReadNum=tReadNum&#xa;  self.segments.append(tempSeg)&#xa;&#xa;"/>
    <sourcecode id="uUhiIh66JJbAZ" value="self._get_LOH_frac()&#xa;self._get_LOH_status()&#xa;self._get_APM_frac()&#xa;self._get_APM_status()&#xa;self._calc_baseline()&#xa;self._get_baseline_stripe()&#xa;return self.get_seg_by_tag()&#xa;"/>
    <sourcecode id="u1ILHA5KjC8fG" value="return filter(lambda item:item.tag==tag,self.segments)&#xa;"/>
    <sourcecode id="ufNvLzFKfszwj" value="def _calc_baseline(self,maxCopyNumber,subcloneNum,isPreprocess=False):&#xa;  if not isPreprocess:&#xa;    print>>sys.stdout,&quot;compute_Lambda_S function called from model&quot;&#xa;    return&#xa;&#xa;  thresh=constants.HC_THRESH&#xa;  rdRatioLog=[]&#xa;  for j in range(0,len(self.segments)):&#xa;    if self.segments[j].APMStatus=='TRUE'and\&#xa;    self.segments[j].LOHStatus=='FALSE':&#xa;      ratio=self.segments[j].tReadNum*1.0/\&#xa;      self.segments[j].normal_reads_num rdRatioLog.append(np.log(ratio))&#xa;&#xa;&#xa;  rdRatioLog=np.array(rdRatioLog)&#xa;  if rdRatioLog.shape[0]==0:&#xa;    print>>sys.stderr,'Error: no APM-LOH position found, existing...'&#xa;    print>>sys.stderr,'Either the baselineThredAPM is too large, or\;the constants APM_N_MIN is too large&#xa;    Or,the baseline_thred_LOH is\&#xa;    too small';sys.exit(1)&#xa;&#xa;  rdRatioLog=rdRatioLog.reshape(rdRatioLog.shape[0],1)&#xa;  y=np.ones(rdRatioLog.shape)&#xa;  rdRatioLog=np.hstack((rdRatioLog,y))&#xa;  clusters=hcluster.fclusterdata(rdRatioLog,&#xa;  thresh,criterion=&quot;distance&quot;)mccs=Counter(clusters).most_common(maxCopyNumber*subcloneNum)&#xa;  rdrMinLog=float('Inf')&#xa;  clusterMin=-1&#xa;  for i in range(0,len(mccs)):&#xa;    clusterTemp=mccs[i][0]&#xa;    print>>sys.stdout,&quot;cluster temp : {}&quot;.format(clusterTemp)&#xa;    tempRdrLog=mean(rdRatioLog[clusters==clusterTemp])&#xa;    print>>sys.stdout,&quot;tempRdrLog&quot;&#xa;    print>>sys.stdout,&quot;log: {}&quot;.format(tempRdrLog)&#xa;    if rdrMinLog>tempRdrLog:&#xa;      rdrMinLog=tempRdrLog&#xa;      clusterMin=clusterTemp&#xa;&#xa;&#xa;  print>>sys.stdout,mccs&#xa;  print>>sys.stdout,&quot;log baseline: {}&quot;.format(rdrMinLog)&#xa;  sys.stdout.flush()&#xa;  clusterFlag=(clusters==clusterMin)&#xa;  baselineNum=0&#xa;  rdrIdx=0&#xa;  for j in range(0,len(self.segments)):&#xa;    if self.segments[j].APMStatus=='TRUE'and\&#xa;    self.segments[j].LOHStatus=='FALSE':&#xa;      if clusterFlag[rdrIdx]:&#xa;        self.segments[j].baselineLabel='TRUE'&#xa;        baselineNum=baselineNum+1&#xa;&#xa;      else:&#xa;        self.segments[j].baselineLabel='FALSE'&#xa;&#xa;      rdrIdx=rdrIdx+1&#xa;&#xa;    else:&#xa;      self.segments[j].baselineLabel='FALSE'&#xa;&#xa;&#xa;  print>>sys.stdout,&quot;baselineNum: {}&quot;.format(baselineNum)&#xa;  if baselineNum==0:&#xa;    print>>sys.stderr,'Error: No diploid segments found, existing...'&#xa;    sys.exit(1)&#xa;&#xa;  self.baseline=rdrMinLog&#xa;&#xa;def _get_LOH_frac(self):&#xa;  for j in range(0,len(self.segments)):&#xa;    self.segments[j].LOHFrac=get_LOH_frac(&#xa;    self.segments[j].pairedCounts)&#xa;&#xa;def _get_APM_frac(self):&#xa;  for j in range(0,len(self.segments)):&#xa;    self.segments[j].APMFrac=get_APM_frac_MAXMIN(&#xa;    self.segments[j].pairedCounts)&#xa;&#xa;def _get_LOH_status(self,baseThred,isPreprocess=False):&#xa;  if isPreprocess:&#xa;    LOHNum=0&#xa;    FLOHNum=0&#xa;    for j in range(0,len(self.segments)):&#xa;      self.segments[j].LOHStatus=get_LOH_status(&#xa;      self.segments[j].LOHFrac,baseThred)if self.segments[j].LOHStatus==&quot;TRUE&quot;:&#xa;        LOHNum=LOHNum+1&#xa;&#xa;      elif self.segments[j].LOHStatus==&quot;FALSE&quot;:&#xa;        FLOHNum=FLOHNum+1&#xa;&#xa;&#xa;    print>>sys.stdout,&quot;LOHNum/segNum = {0}/{1}&quot;.format(LOHNum,len(self.segments))&#xa;    print>>sys.stdout,&quot;FLOHNum/segNum = {0}/{1}&quot;.format(FLOHNum,len(self.segments))&#xa;&#xa;  else:&#xa;    print>>sys.stdout,&quot;get_LOH_status function called from model.&quot;&#xa;&#xa;&#xa;def _get_APM_status(self,baselineThredAPM):&#xa;  APMNum=0&#xa;  for j in range(0,len(self.segments)):&#xa;    self.segments[j].APMStatus=get_APM_status(&#xa;    self.segments[j].APMFrac,baselineThredAPM)if self.segments[j].APMStatus==&quot;TRUE&quot;:&#xa;      APMNum=APMNum+1&#xa;&#xa;&#xa;  print&quot;APMNum/segNum = {0}/{1}&quot;.format(APMNum,len(self.segments))&#xa;"/>
    <sourcecode id="uzHochCDpJktp" value="self._nBamName=nBamName&#xa;self._tBamNameL=tBamNameL&#xa;self._bedNameL=bedNameL&#xa;self._refFaName=refFaName&#xa;self.__pathPrefix=pathPrefix&#xa;self.__subcloneNumberL=subcloneNumberL&#xa;self.__coverageL=coverageL&#xa;self.__maxCopyNumber=maxCopyNumber&#xa;self.__baselineThredLOH=baselineThredLOH&#xa;self.__baselineThredAPM=baselineThredAPM&#xa;self.__minDepth=minDepth&#xa;self.__minBqual=minBqual&#xa;self.__minMqual=minMqual&#xa;self.__processNum=processNum&#xa;self.__bedCorrectedPath=bedCorrectedPath&#xa;self.__pklPath=pklPath&#xa;self._segmentPoolL=[]&#xa;"/>
    <sourcecode id="uEdHnsvJrhNat" value="self._load_segments()&#xa;self._correct_bias()&#xa;blSegs,nonBlSegs=self._get_baseline()&#xa;self._mark_timestamp(blSegs,nonBlSegs)&#xa;self._generate_stripe()&#xa;self._mark_stripe()&#xa;self._dump()&#xa;"/>
    <sourcecode id="u6K9pxOBSEc4t" value="def _mark_timestamp(self,blSegs,nonBlSegs):&#xa;  pass&#xa;&#xa;def _load_segments(self):&#xa;  assert len(self._tBamNameL)==len(self._bedNameL)&#xa;  assert len(self._tBamNameL)==len(self.__subcloneNumberL)&#xa;  for tBamName,bedName,coverage,subcloneNumber in zip(self._tBamNameL,&#xa;  self._bedNameL,self.__coverageL,self.__subcloneNumberL):&#xa;    print>>sys.stdout,'Loading segments from bam file:\n{0}\n'.format(tBamName)&#xa;    print>>sys.stdout,'and bed file with gc:\n{0}\n'.format(bedName)&#xa;    tempSP=SegmentPool(self.__maxCopyNumber,coverage)&#xa;    nBam=pysam.Samfile(self._nBamName,'rb')&#xa;    tBam=pysam.Samfile(tBamName,'rb')&#xa;    tempSP.load_segments(nBam,tBam,bedName)&#xa;    nBam.close()&#xa;    tBam.close()&#xa;    self._segmentPoolL.append(tempSP)&#xa;&#xa;&#xa;def _correct_bias(self,method=&quot;&quot;):&#xa;  assert len(self._segmentPoolL)==len(self.__subcloneNumberL)&#xa;  for segmentPool,subcloneNumber in zip(self._segmentPoolL,&#xa;  self.__subcloneNumberL):&#xa;    if&quot;auto&quot;==method:&#xa;      self._MCMC_GC_C(SegmentPool,subcloneNumber)&#xa;&#xa;    elif&quot;visual&quot;==method:&#xa;      self._V_GC_C(SegmentPool,len(SegmentPool.segments))&#xa;&#xa;&#xa;&#xa;def _get_baseline(self):&#xa;  pass&#xa;&#xa;def _MCMC_GC_C(self,data,subcloneNumber):&#xa;  mcmclm=MCMCLM(data,0,subcloneNumber,self.__maxCopyNumber)&#xa;  m,c=mcmclm.run()&#xa;  print&quot;MCMC slope = {}&quot;.format(m)&#xa;  x=np.array(map(lambda seg:seg.gc,data.segments))&#xa;  y=np.array(map(lambda seg:np.log(seg.tumor_reads_num+1)-&#xa;  np.log(seg.normal_reads_num+1),data.segments))y_corrected=self._correct(x,y,m,c)&#xa;  for i in range(len(y_corrected)):&#xa;    data.segments[i].tumor_reads_num=np.exp(&#xa;    y_corrected[i]+np.log(data.segments[i].normal_reads_num+1))-1&#xa;    data.segments[i].log_ratio=np.log(&#xa;    (y_corrected[i]+1.0)/(data.segments[i].normal_reads_num+1.0))&#xa;&#xa;  print&quot;gc corrected, with slope = {0}, intercept = {1}&quot;.\&#xa;  format(slope,intercept)&#xa;def _correct(self,x,y,slope,intercept):&#xa;  K=np.percentile(y,50)&#xa;  A=slope*x+intercept&#xa;  return y-A+K&#xa;&#xa;def visualize(self):&#xa;  gsp=GCStripePlot(self.data.segments,len(self.data.segments))&#xa;  print&quot;total number: {}&quot;.format(self.data.seg_num)&#xa;  gsp.plot()&#xa;  x,y,m,c=gsp.output()&#xa;  print&quot;x, y, m, c&quot;&#xa;  print x,y,m,c&#xa;&#xa;def _V_GC_C(self,segmentPool,sampleNumber=10000):&#xa;  gsp=GCStripePlot(segmentPool.segments,sampleNumber)&#xa;  print>>sys.stdout,&quot;total number: {}&quot;.format(len(segmentPool.segments))&#xa;  gsp.plot()&#xa;  print>>sys.stdout,&quot;x, y, m, c&quot;&#xa;  print>>sys.stdout,gsp.output()&#xa;  x=np.array(map(lambda seg:seg.gc,data.segments))&#xa;  y=np.array(map(lambda seg:np.log(seg.tumor_reads_num+1)-&#xa;  np.log(seg.normal_reads_num+1),data.segments))y_corrected=self._correct(x,y,m,c)&#xa;  for i in range(len(y_corrected)):&#xa;    data.segments[i].tumor_reads_num=np.exp(&#xa;    y_corrected[i]+np.log(data.segments[i].normal_reads_num+1))-1&#xa;    data.segments[i].log_ratio=np.log(&#xa;    (y_corrected[i]+1.0)/(data.segments[i].normal_reads_num+1.0))&#xa;&#xa;  print&quot;gc corrected, with slope = {0}, intercept = {1}&quot;.\&#xa;  format(slope,intercept)&#xa;def _baseline_selection(self):&#xa;  print&quot;begin baseline selection..&quot;&#xa;  self._get_LOH_frac()&#xa;  self._get_LOH_status()&#xa;  self._get_APM_frac()&#xa;  self._get_APM_status()&#xa;  self._compute_Lambda_S()&#xa;&#xa;def _get_APM_status(self):&#xa;  self.data.get_APM_status(self.__baselineThredAPM)&#xa;&#xa;def _get_LOH_status(self):&#xa;  self.data.get_LOH_status(self.__baselineThredLOH,&#xa;  flag_runpreprocess=True)&#xa;def _compute_Lambda_S(self):&#xa;  print&quot;begin compute lambda s ..&quot;&#xa;  self.data.compute_Lambda_S_LOH(self.__maxCopyNumber,self.__subcloneNumberL,&#xa;  flag_runpreprocess=True)&#xa;def _load_segmentsn(self):&#xa;  nBam=pysam.Samfile(self._nBamName,'rb')&#xa;  tBam=pysam.Samfile(self.tBam_filename,'rb')&#xa;  print'Loading normalized segments by {0}...'.format(self.segments_bed)&#xa;  sys.stdout.flush()&#xa;  self.data.load_segmentsn(nBam,tBam,self.segments_bed)&#xa;  nBam.close()&#xa;  tBam.close()&#xa;&#xa;def _load_segments_bed(self,segments_bed,data):&#xa;  print'Loading segments with gc by {0}...'.format(self.segments_bed)&#xa;  sys.stdout.flush()&#xa;  data.load_segments_bed(segments_bed)&#xa;&#xa;def _get_counts(self,tBam_filename,data):&#xa;  seg_num=self.data.seg_num&#xa;  processNum=self.__processNum&#xa;  print&quot;processNum = {}&quot;.format(processNum)&#xa;  if processNum>seg_num:&#xa;    processNum=seg_num&#xa;&#xa;  pool=Pool(processes=processNum)&#xa;  args_list=[]&#xa;  for j in range(0,seg_num):&#xa;    seg_name=self.data.segments[j].name&#xa;    chrom_name=self.data.segments[j].chrom_name&#xa;    chrom_idx=self.data.segments[j].chrom_idx&#xa;    start=self.data.segments[j].start&#xa;    end=self.data.segments[j].end&#xa;    args_tuple=(&#xa;    seg_name,chrom_name,chrom_idx,start,end,self._nBamName,tBam_filename,self._refFaName,self.__minDepth,self.__minBqual,self.__minMqual)args_list.append(args_tuple)&#xa;&#xa;  counts_tuple_list=pool.map(process_by_segment,args_list)&#xa;  for j in range(0,seg_num):&#xa;    paired_counts_j,BAF_counts_j=counts_tuple_list[j]&#xa;    data.segments[j].paired_counts=paired_counts_j&#xa;    data.segments[j].BAF_counts=BAF_counts_j&#xa;&#xa;&#xa;def _get_LOH_frac(self):&#xa;  self.data.get_LOH_frac()&#xa;&#xa;def _get_APM_frac(self):&#xa;  self.data.get_APM_frac()&#xa;&#xa;"/>
    <sourcecode id="uJmEbWB1TC4UR" value="seg_name,chrom_name,chrom_idx,start,end,nBamName,\&#xa;tBam_filename,refFaName,minDepth,minBqual,\minMqual=args_tuple print'Preprocessing segment {0}...'.format(seg_name)&#xa;sys.stdout.flush()&#xa;nBam=pysam.Samfile(nBamName,'rb')&#xa;tBam=pysam.Samfile(tBam_filename,'rb')&#xa;ref_genome_fasta=pysam.Fastafile(refFaName)&#xa;normal_pileup_iter=nBam.pileup(chrom_name,start,end)&#xa;tumor_pileup_iter=tBam.pileup(chrom_name,start,end)&#xa;paired_pileup_iter=PairedPileupIterator(&#xa;normal_pileup_iter,tumor_pileup_iter,start,end)paired_counts_iter=PairedCountsIterator(&#xa;paired_pileup_iter,ref_genome_fasta,chrom_name,chrom_idx,minDepth,minBqual,minMqual)paired_counts_j,BAF_counts_j=iterator_to_counts(paired_counts_iter)&#xa;counts_tuple_j=(paired_counts_j,BAF_counts_j)&#xa;nBam.close()&#xa;tBam.close()&#xa;ref_genome_fasta.close()&#xa;return counts_tuple_j&#xa;"/>
    <sourcecode id="ufnQ1OiN4y8FK" value="buff=100000&#xa;paired_counts_j=np.array([[],[],[],[],[],[]],dtype=int).transpose()&#xa;BAF_counts_j=np.zeros((100,100))&#xa;buff_counts=[]&#xa;i=0&#xa;for counts in paired_counts_iter:&#xa;  buff_counts.append(counts)&#xa;  i=i+1&#xa;  if i&lt;buff:&#xa;    continue&#xa;&#xa;  buff_counts=np.array(buff_counts)&#xa;  if buff_counts.shape[0]!=0:&#xa;    BAF_counts_buff=get_BAF_counts(buff_counts)&#xa;    BAF_counts_j+=BAF_counts_buff&#xa;&#xa;  buff_counts_filtered=normal_heterozygous_filter(buff_counts)&#xa;  if buff_counts_filtered.shape[0]!=0:&#xa;    paired_counts_j=np.vstack((paired_counts_j,buff_counts_filtered))&#xa;&#xa;  buff_counts=[]&#xa;  i=0&#xa;&#xa;buff_counts=np.array(buff_counts)&#xa;if buff_counts.shape[0]!=0:&#xa;  BAF_counts_buff=get_BAF_counts(buff_counts)&#xa;  BAF_counts_j+=BAF_counts_buff&#xa;&#xa;buff_counts_filtered=normal_heterozygous_filter(buff_counts)&#xa;if buff_counts_filtered.shape[0]!=0:&#xa;  paired_counts_j=np.vstack((paired_counts_j,buff_counts_filtered))&#xa;&#xa;return(paired_counts_j,BAF_counts_j)"/>
    <sourcecode id="ufZhpU9DIZPTV" value="self._initial_state_fn=StateManager.default_initial_state_fn&#xa;self._last_state_fn=StateManager.default_last_state_fn&#xa;"/>
    <sourcecode id="u7rQtRE14G7Ho" value="with open(state_fn,'w')as state_file:&#xa;  pickle.dump(state,state_file,protocol=pickle.HIGHEST_PROTOCOL)&#xa;&#xa;"/>
    <sourcecode id="ulLIrn1g4F4na" value="self._write_state(state,self._last_state_fn)&#xa;"/>
    <sourcecode id="u059Yo1ib0UWI" value="with open(self._last_state_fn)as state_file:&#xa;  return pickle.load(state_file)&#xa;&#xa;"/>
    <sourcecode id="uOunpPcMQtzFM" value="with open(self._initial_state_fn)as state_file:&#xa;  return pickle.load(state_file)&#xa;&#xa;"/>
    <sourcecode id="uyVZck6zrwTpm" value="self._write_state(state,self._initial_state_fn)&#xa;"/>
    <sourcecode id="uUHzzIf5ZxTpH" value="rm_safely(self._last_state_fn)&#xa;"/>
    <sourcecode id="umvmXBSUJ08DI" value="return os.path.isfile(self._last_state_fn)&#xa;"/>
    <sourcecode id="unNj8Wja39hKc" value="super(alleles,self).__init__(parent=parent,tssb=tssb)&#xa;if tssb is not None:&#xa;  ntps=len(tssb.data[0].a)&#xa;&#xa;self.pi=0.0&#xa;self.param=0.0&#xa;self.param1=0.0&#xa;self.pi1=0.0&#xa;self.path=None&#xa;self.ht=0.0&#xa;if parent is None:&#xa;  self._conc=conc&#xa;  self.pi=1.0&#xa;  self.param=1.0&#xa;&#xa;else:&#xa;  self.pi=rand(1)*parent.pi&#xa;  parent.pi=parent.pi-self.pi&#xa;  self.param=self.pi&#xa;&#xa;"/>
    <sourcecode id="uDr4zC9muWoao" value="if self.parent()is None:&#xa;  return self._conc&#xa;&#xa;else:&#xa;  return self.parent().conc()&#xa;&#xa;"/>
    <sourcecode id="uEqgyTM8C7uR2" value="if self._parent is not None:&#xa;  self._parent._children.remove(self)&#xa;&#xa;self._parent.pi=self._parent.pi+self.pi&#xa;self._parent=None&#xa;self._children=None&#xa;"/>
    <sourcecode id="u4aRAXnJIFqpC" value="return x[0]._log_likelihood(self.param)&#xa;"/>
    <sourcecode id="uRbYsXrxVLuLR" value="lower_node,upper_node=self.__find_neighbor_datum_n(x)&#xa;l_flag=True&#xa;u_flag=True&#xa;if lower_node is not None:&#xa;  l_flag=self.__is_good_gap(lower_node,x,&quot;lower&quot;)&#xa;&#xa;else:&#xa;  l_flag=True&#xa;&#xa;if upper_node is not None:&#xa;  u_flag=self.__is_good_gap(lower_node,x,&quot;upper&quot;)&#xa;&#xa;else:&#xa;  u_flag=True&#xa;&#xa;if l_flag and u_flag:&#xa;  return self.logprob(x)&#xa;&#xa;else:&#xa;  return-float('Inf')&#xa;&#xa;"/>
    <sourcecode id="uq7DGTUYppmPR" value="return sum([self.logprob([data])for data in self.get_data()])&#xa;"/>
    <sourcecode id="uTjof3QhClKsw" value="datums=self.get_data()&#xa;if x not in datums:&#xa;  datums.append(x)&#xa;&#xa;datums_sorted=sorted(datums,&#xa;key=lambda item:1.0*item.tumor_reads_num/item.normal_reads_num)idx=datums_sorted.index(x)&#xa;if 0==idx:&#xa;  return(None,datums_sorted[1])&#xa;&#xa;elif len(datums_sorted)-1==idx:&#xa;  return(datums_sorted[idx-1],None)&#xa;&#xa;else:&#xa;  return(datums_sorted[idx-1],datums_sorted[idx+1])&#xa;&#xa;"/>
    <sourcecode id="u1KTb3l6K6QEJ" value="varpi=constants.VARPI&#xa;rdr_lower=1.0*lower_node.tumor_reads_num/lower_node.normal_reads_num&#xa;rdr_upper=1.0*upper_node.tumor_reads_num/upper_node.normal_reads_num&#xa;L=np.exp(rdr_upper-rdr_lower)&#xa;if&quot;lower&quot;==position:&#xa;  cn=lower_node.copy_number&#xa;&#xa;elif&quot;upper&quot;==position:&#xa;  cn=upper_node.copy_number-1&#xa;&#xa;if cn&lt;0:&#xa;  return False&#xa;&#xa;else:&#xa;  return L>=varpi*(1.0+(self.param/&#xa;  (cn*self.param+2*(1-self.param)))"/>
    <sourcecode id="u79zV2L21GF1W" value="self._archive=zipfile.ZipFile(archive_fn)&#xa;infolist=self._archive.infolist()&#xa;tree_info=[t for t in infolist if t.filename.startswith('tree_')]&#xa;burnin_info=[t for t in infolist if t.filename.startswith('burnin_')]&#xa;tree_info.sort(key=lambda tinfo:self._extract_metadata(tinfo)[0])&#xa;burnin_info.sort(key=lambda tinfo:self._extract_burnin_idx(tinfo))&#xa;self._trees=[]&#xa;self._burnin_trees=[]&#xa;for info in tree_info:&#xa;  idx,llh=self._extract_metadata(info)&#xa;  assert idx==len(self._trees)&#xa;  self._trees.append((idx,llh,info))&#xa;&#xa;for info in burnin_info:&#xa;  idx=self._extract_burnin_idx(info)&#xa;  assert len(burnin_info)+idx==len(self._burnin_trees)&#xa;  self._burnin_trees.append((idx,info))&#xa;&#xa;"/>
    <sourcecode id="uufxvIckWsK8X" value="return self._archive.read(filename)&#xa;"/>
    <sourcecode id="uyiRa0ynDHWcJ" value="return len(self._trees)&#xa;"/>
    <sourcecode id="urf5gBeMX7EVV" value="self._archive.close()&#xa;"/>
    <sourcecode id="uS3FTNQkNCyNL" value="tokens=zinfo.filename.split('_')&#xa;idx=int(tokens[1])&#xa;llh=float(tokens[2])&#xa;return(idx,llh)&#xa;"/>
    <sourcecode id="uazIe7yJC34Ic" value="idx=int(zinfo.filename.split('_')[1])&#xa;return idx&#xa;"/>
    <sourcecode id="un7aMYzFsvL7E" value="pickled=self._archive.read(zinfo)&#xa;tree=pickle.loads(pickled)&#xa;if remove_empty_vertices:&#xa;  remove_empty_nodes(tree.root)&#xa;&#xa;return tree&#xa;"/>
    <sourcecode id="uqBvm10K9Kd9A" value="tidx,llh,zinfo=self._trees[idx]&#xa;assert tidx==idx&#xa;return self._parse_tree(zinfo,remove_empty_vertices)&#xa;"/>
    <sourcecode id="uaGbpBjgA78Au" value="for idx,llh,tree in self.load_trees_and_metadata(&#xa;num_trees,remove_empty_vertices):&#xa;  yield tree&#xa;&#xa;"/>
    <sourcecode id="uHVI9gAizAj7t" value="for tidx,zinfo in self._burnin_trees:&#xa;  tree=self._parse_tree(zinfo,remove_empty_vertices)&#xa;  yield(tidx,tree)&#xa;&#xa;for tidx,llh,zinfo in self._trees:&#xa;  tree=self._parse_tree(zinfo,remove_empty_vertices)&#xa;  yield(tidx,tree)&#xa;&#xa;"/>
    <sourcecode id="unQMWzlztFW4k" value="trees=sorted(&#xa;self._trees,key=lambda tidx_llh_zinfo:tidx_llh_zinfo[1],reverse=True)if num_trees is not None:&#xa;  num_trees=min(num_trees,len(trees))&#xa;  trees=trees[:num_trees]&#xa;&#xa;for tidx,llh,zinfo in trees:&#xa;  tree=self._parse_tree(zinfo,remove_empty_vertices)&#xa;  yield(tidx,llh,tree)"/>
    <sourcecode id="uInflbKzOJooD" value="self._archive_fn=TreeWriter.default_archive_fn&#xa;if resume_run:&#xa;  self._ensure_archive_is_valid()&#xa;&#xa;else:&#xa;  rm_safely(self._archive_fn)&#xa;&#xa;"/>
    <sourcecode id="usQ3bjbB3BSRL" value="self._open_archive()&#xa;self._archive.writestr(filename,data)&#xa;self._close_archive()&#xa;"/>
    <sourcecode id="uybFdf3eI9M5J" value="with zipfile.ZipFile(self._archive_fn)as zipf:&#xa;  if zipf.testzip()is not None:&#xa;    raise CorruptZipFileError(&#xa;    'Corrupt zip file: %s'%self._archive_fn)&#xa;&#xa;"/>
    <sourcecode id="uJ8a63w4adStD" value="self._archive=zipfile.ZipFile(&#xa;self._archive_fn,'a',compression=zipfile.ZIP_DEFLATED,allowZip64=True)"/>
    <sourcecode id="uRX3Clfo16PNW" value="self._archive.close()&#xa;"/>
    <sourcecode id="u2Cztdx1YbVTH" value="self._open_archive()&#xa;for serialized_tree,idx,llh in serialized_trees:&#xa;  is_burnin=idx&lt;0&#xa;  prefix=is_burnin and'burnin'or'tree'&#xa;  treefn='%s_%s_%s'%(prefix,idx,llh)&#xa;  self._archive.writestr(treefn,serialized_tree)&#xa;&#xa;self._close_archive()&#xa;"/>
    <sourcecode id="uzZRCABIz2FYu" value="if root_node is None:&#xa;  raise Exception(&quot;Root node must be specified.&quot;)&#xa;&#xa;self.min_depth=min_depth&#xa;self.max_depth=max_depth&#xa;self.dp_alpha=dp_alpha&#xa;self.dp_gamma=dp_gamma&#xa;self.alpha_decay=alpha_decay&#xa;self.data=data&#xa;self.num_data=0 if data is None else len(&#xa;data)self.root=:&#xa;&#xa;  'node':root_node,'main':boundbeta(1.0,dp_alpha)if self.min_depth==0 else 0.0,'sticks':empty((0,1)),'children':[]&#xa;&#xa;root_node.tssb=self&#xa;if False:&#xa;  data_u=rand(self.num_data)&#xa;  self.assignments=[]&#xa;  for n in range(self.num_data):&#xa;    (c,path)=self.find_node(data_u[n])&#xa;    c.add_datum(n)&#xa;    self.assignments.append(c)&#xa;&#xa;&#xa;else:&#xa;  self.assignments=[]&#xa;  for n in range(self.num_data):&#xa;    self.root['node'].add_datum(n)&#xa;    self.assignments.append(self.root['node'])&#xa;&#xa;&#xa;"/>
    <sourcecode id="uFAeZiaEdKV2z" value="(weights,nodes)=self.get_mixture()&#xa;num_new_data=len(data)&#xa;for n in range(num_new_data):&#xa;  logprobs=[]&#xa;  for k,node in enumerate(nodes):&#xa;    logprobs.append(log(weights[k])+node.logprob(data[n]))&#xa;&#xa;  logprobs=array(logprobs)&#xa;  probs=exp(logprobs-logsumexp(logprobs))&#xa;  best_k=sum(rand()>cumsum(probs))&#xa;  nodes[best_k].add_datum(n+self.num_data)&#xa;  self.assignments.append(nodes[best_k])&#xa;&#xa;self.data=vstack([self.data,data])&#xa;self.num_data+=num_new_data&#xa;"/>
    <sourcecode id="uQADG5pxwqFcW" value="for iter in range(iters):&#xa;  def descend(root):&#xa;    for index,child in enumerate(root['children']):&#xa;      descend(child)&#xa;&#xa;    root['node'].resample_params()&#xa;&#xa;  descend(self.root)&#xa;&#xa;"/>
    <sourcecode id="uBM6kPusaWVqQ" value="def path_lt(path1,path2):&#xa;  if len(path1)==0 and len(path2)==0:&#xa;    return 0&#xa;&#xa;  elif len(path1)==0:&#xa;    return 1&#xa;&#xa;  elif len(path2)==0:&#xa;    return-1&#xa;&#xa;  s1=&quot;&quot;.join(map(lambda i:&quot;%03d&quot;%(i),path1))&#xa;  s2=&quot;&quot;.join(map(lambda i:&quot;%03d&quot;%(i),path2))&#xa;  return cmp(s2,s1)&#xa;&#xa;epsilon=finfo(float64).eps&#xa;lengths=[]&#xa;for n in range(self.num_data):&#xa;  llhmap=:&#xa;&#xa;&#xa;  ancestors=self.assignments[n].get_ancestors()&#xa;  current=self.root&#xa;  indices=[]&#xa;  for anc in ancestors[1:]:&#xa;    index=map(lambda c:c['node'],&#xa;    current['children']).index(anc)current=current['children'][index]&#xa;    indices.append(index)&#xa;&#xa;  max_u=1.0&#xa;  min_u=0.0&#xa;  old_llh=self.assignments[n].logprob(self.data[n:n+1])&#xa;  llhmap[self.assignments[n]]=old_llh&#xa;  llh_s=log(rand())+old_llh&#xa;  while True:&#xa;    new_u=(max_u-min_u)*rand()+min_u&#xa;    (new_node,new_path)=self.find_node(new_u)&#xa;    if new_node.parent()is None:&#xa;      new_node=new_node.children()[0]&#xa;      new_path=[0]&#xa;&#xa;    old_node=self.assignments[n]&#xa;    old_node.remove_datum(n)&#xa;    new_node.add_datum(n)&#xa;    self.assignments[n]=new_node&#xa;    if new_node in llhmap:&#xa;      new_llh=llhmap[new_node]&#xa;&#xa;    else:&#xa;      new_llh=new_node.logprob_restricted(self.data[n:n+1])&#xa;      llhmap[new_node]=new_llh&#xa;&#xa;    if new_llh>llh_s:&#xa;      break&#xa;&#xa;    elif abs(max_u-min_u)&lt;epsilon:&#xa;      new_node.remove_datum(n)&#xa;      old_node.add_datum(n)&#xa;      self.assignments[n]=old_node&#xa;      print>>sys.stderr,&quot;Slice sampler shrank down.  Keep current state.&quot;&#xa;      break&#xa;&#xa;    else:&#xa;      new_node.remove_datum(n)&#xa;      old_node.add_datum(n)&#xa;      self.assignments[n]=old_node&#xa;      path_comp=path_lt(indices,new_path)&#xa;      if path_comp&lt;0:&#xa;        min_u=new_u&#xa;&#xa;      elif path_comp>=0:&#xa;        max_u=new_u&#xa;&#xa;      else:&#xa;        raise Exception(&quot;Slice sampler weirdness.&quot;)&#xa;&#xa;&#xa;&#xa;  lengths.append(len(new_path))&#xa;&#xa;lengths=array(lengths)&#xa;"/>
    <sourcecode id="uhApL7HpUXGNk" value="def descend(root):&#xa;  counts=array(map(lambda child:descend(child),root['children']))&#xa;  keep=len(trim_zeros(counts,'b'))&#xa;  for child in root['children'][keep:]:&#xa;    child['node'].kill()&#xa;    del child['node']&#xa;&#xa;  root['sticks']=root['sticks'][:keep]&#xa;  root['children']=root['children'][:keep]&#xa;  return sum(counts)+root['node'].num_local_data()&#xa;&#xa;descend(self.root)&#xa;"/>
    <sourcecode id="uBE8nqtXB4BDF" value="def descend(root,depth=0):&#xa;  data_down=0&#xa;  indices=range(len(root['children']))&#xa;  indices.reverse()&#xa;  for i in indices:&#xa;    child=root['children'][i]&#xa;    child_data=descend(child,depth+1)&#xa;    post_alpha=1.0+child_data&#xa;    post_beta=self.dp_gamma+data_down&#xa;    root['sticks'][i]=boundbeta(&#xa;    post_alpha,post_beta)if depth!=0 else.999999 data_down+=child_data&#xa;&#xa;  data_here=root['node'].num_local_data()&#xa;  post_alpha=1.0+data_here&#xa;  post_beta=(self.alpha_decay**depth)*self.dp_alpha+data_down&#xa;  root['main']=boundbeta(&#xa;  post_alpha,post_beta)if self.min_depth&lt;=depth else 0.0 if depth==0:&#xa;    root['main']=1e-30&#xa;&#xa;  return data_here+data_down&#xa;&#xa;descend(self.root)&#xa;"/>
    <sourcecode id="uqjmO3ymENkcH" value="def descend(root,depth=0):&#xa;  if not root['children']:&#xa;    return&#xa;&#xa;  new_order=[]&#xa;  represented=set(&#xa;  filter(lambda i:root['children'][i]['node'].has_data(),range(len(root['children']))))all_weights=diff(hstack([0.0,sticks_to_edges(root['sticks'])]))&#xa;  while True:&#xa;    if not represented:&#xa;      break&#xa;&#xa;    u=rand()&#xa;    while True:&#xa;      sub_indices=filter(lambda i:i not in new_order,&#xa;      range(root['sticks'].shape[0]))sub_weights=hstack(&#xa;      [all_weights[sub_indices],1.0-sum(all_weights)])sub_weights=sub_weights/sum(sub_weights)&#xa;      index=sum(u>cumsum(sub_weights))&#xa;      if index==len(sub_indices):&#xa;        root['sticks']=vstack(&#xa;        [root['sticks'],boundbeta(1,self.dp_gamma)])root['children'].append(:&#xa;&#xa;          'node':&#xa;            root['node'].spawn(),&#xa;            'main':&#xa;              boundbeta(&#xa;              1.0,(self.alpha_decay**(depth+1))*self.dp_alpha)if self.min_depth&lt;=(depth+1)else 0.0,&#xa;              'sticks':&#xa;                empty((0,1)),&#xa;                'children':[]&#xa;&#xa;&#xa;            )&#xa;            all_weights=diff(&#xa;            hstack([0.0,sticks_to_edges(root['sticks'])]))&#xa;          else:&#xa;            index=sub_indices[index]&#xa;            break&#xa;&#xa;&#xa;        new_order.append(index)&#xa;        represented.discard(index)&#xa;&#xa;      new_children=[]&#xa;      for k in new_order:&#xa;        child=root['children'][k]&#xa;        new_children.append(child)&#xa;        descend(child,depth+1)&#xa;&#xa;      for k in filter(lambda k:k not in new_order,&#xa;      range(root['sticks'].shape[0])):&#xa;        root['children'][k]['node'].kill()&#xa;        del root['children'][k]['node']&#xa;&#xa;      root['children']=new_children&#xa;      root['sticks']=zeros((len(root['children']),1))&#xa;&#xa;    descend(self.root)&#xa;    self.resample_sticks()&#xa;&#xa;  def resample_hypers(self,dp_alpha=True,alpha_decay=True,dp_gamma=True):&#xa;    def dp_alpha_llh(dp_alpha,alpha_decay):&#xa;      def descend(dp_alpha,root,depth=0):&#xa;        llh=betapdfln(root['main'],1.0,(alpha_decay**depth)*&#xa;        dp_alpha)if self.min_depth&lt;=depth else 0.0 for child in root['children']:&#xa;          llh+=descend(dp_alpha,child,depth+1)&#xa;&#xa;        return llh&#xa;&#xa;      return descend(dp_alpha,self.root)&#xa;&#xa;    if dp_alpha:&#xa;      upper=self.max_dp_alpha&#xa;      lower=self.min_dp_alpha&#xa;      llh_s=log(rand())+dp_alpha_llh(self.dp_alpha,self.alpha_decay)&#xa;      while True:&#xa;        new_dp_alpha=(upper-lower)*rand()+lower&#xa;        new_llh=dp_alpha_llh(new_dp_alpha,self.alpha_decay)&#xa;        if new_llh>llh_s:&#xa;          break&#xa;&#xa;        elif new_dp_alpha&lt;self.dp_alpha:&#xa;          lower=new_dp_alpha&#xa;&#xa;        elif new_dp_alpha>self.dp_alpha:&#xa;          upper=new_dp_alpha&#xa;&#xa;        else:&#xa;          raise Exception(&quot;Slice sampler shrank to zero!&quot;)&#xa;&#xa;&#xa;      self.dp_alpha=new_dp_alpha&#xa;&#xa;    if alpha_decay:&#xa;      upper=self.max_alpha_decay&#xa;      lower=self.min_alpha_decay&#xa;      llh_s=log(rand())+dp_alpha_llh(self.dp_alpha,self.alpha_decay)&#xa;      while True:&#xa;        new_alpha_decay=(upper-lower)*rand()+lower&#xa;        new_llh=dp_alpha_llh(self.dp_alpha,new_alpha_decay)&#xa;        if new_llh>llh_s:&#xa;          break&#xa;&#xa;        elif new_alpha_decay&lt;self.alpha_decay:&#xa;          lower=new_alpha_decay&#xa;&#xa;        elif new_alpha_decay>self.alpha_decay:&#xa;          upper=new_alpha_decay&#xa;&#xa;        else:&#xa;          raise Exception(&quot;Slice sampler shrank to zero!&quot;)&#xa;&#xa;&#xa;      self.alpha_decay=new_alpha_decay&#xa;&#xa;    def dp_gamma_llh(dp_gamma):&#xa;      def descend(dp_gamma,root):&#xa;        llh=0&#xa;        for i,child in enumerate(root['children']):&#xa;          llh+=betapdfln(root['sticks'][i],1.0,dp_gamma)&#xa;          llh+=descend(dp_gamma,child)&#xa;&#xa;        return llh&#xa;&#xa;      return descend(dp_gamma,self.root)&#xa;&#xa;    if dp_gamma:&#xa;      upper=self.max_dp_gamma&#xa;      lower=self.min_dp_gamma&#xa;      llh_s=log(rand())+dp_gamma_llh(self.dp_gamma)&#xa;      while True:&#xa;        new_dp_gamma=(upper-lower)*rand()+lower&#xa;        new_llh=dp_gamma_llh(new_dp_gamma)&#xa;        if new_llh>llh_s:&#xa;          break&#xa;&#xa;        elif new_dp_gamma&lt;self.dp_gamma:&#xa;          lower=new_dp_gamma&#xa;&#xa;        elif new_dp_gamma>self.dp_gamma:&#xa;          upper=new_dp_gamma&#xa;&#xa;        else:&#xa;          raise Exception(&quot;Slice sampler shrank to zero!&quot;)&#xa;&#xa;&#xa;      self.dp_gamma=new_dp_gamma&#xa;&#xa;&#xa;  def draw_data(self,num_data=1,**args):&#xa;    self.data=[]&#xa;    self.assignments=[]&#xa;    for n in range(num_data):&#xa;      u=rand()&#xa;      (node,path)=self.find_node(u)&#xa;      self.data.append(node.sample(args))&#xa;      self.assignments.append(node)&#xa;      node.add_datum(n)&#xa;      self.num_data+=1&#xa;&#xa;    self.data=concatenate(self.data)&#xa;    return self.data&#xa;&#xa;  def resample_data(self,**args):&#xa;    for n in range(self.num_data):&#xa;      u=rand()&#xa;      (node,path)=self.find_node(u)&#xa;      self.assignments[n].remove_datum(n)&#xa;      node.add_datum(n)&#xa;      self.assignments[n]=node&#xa;      self.data[n]=node.sample(args)[0]&#xa;&#xa;&#xa;  def find_node(self,u):&#xa;    def descend(root,u,depth=0):&#xa;      if depth>=self.max_depth:&#xa;        return(root['node'],[])&#xa;&#xa;      elif u&lt;root['main']:&#xa;        return(root['node'],[])&#xa;&#xa;      else:&#xa;        u=(u-root['main'])/(1.0-root['main'])&#xa;        if depth>0:&#xa;          while not root['children']or(&#xa;          1.0-prod(1.0-root['sticks']))&lt;u:&#xa;            root['sticks']=vstack([&#xa;            root['sticks'],boundbeta(1,self.dp_gamma)if depth!=0 else.999])&#xa;            root['children'].append(:&#xa;&#xa;              'node':&#xa;                root['node'].spawn(),&#xa;                'main':&#xa;                  boundbeta(1.0,(self.alpha_decay**&#xa;                  (depth+1))*self.dp_alpha)if self.min_depth&lt;=(depth+1)else 0.0,&#xa;                  'sticks':&#xa;                    empty((0,1)),&#xa;                    'children':[]&#xa;&#xa;&#xa;                )&#xa;&#xa;              edges=1.0-cumprod(1.0-root['sticks'])&#xa;              index=sum(u>edges)&#xa;              edges=hstack([0.0,edges])&#xa;              u=(u-edges[index])/(edges[index+1]-edges[index])&#xa;              (node,path)=descend(root['children'][index],u,&#xa;              depth+1)&#xa;            else:&#xa;              index=0&#xa;              (node,path)=descend(root['children'][index],u,&#xa;              depth+1)&#xa;            path.insert(0,index)&#xa;            return(node,path)&#xa;&#xa;&#xa;        return descend(self.root,u)&#xa;&#xa;      def get_nodes(self):&#xa;        def descend(root):&#xa;          node=[root['node']]&#xa;          for child in root['children']:&#xa;            child_nodes=descend(child)&#xa;            node.extend(child_nodes)&#xa;&#xa;          return node&#xa;&#xa;        return descend(self.root)&#xa;&#xa;      def get_mixture(self):&#xa;        def descend(root,mass):&#xa;          weight=[mass*root['main']]&#xa;          node=[root['node']]&#xa;          edges=sticks_to_edges(root['sticks'])&#xa;          weights=diff(hstack([0.0,edges]))&#xa;          for i,child in enumerate(root['children']):&#xa;            (child_weights,child_nodes)=descend(&#xa;            child,mass*(1.0-root['main'])*weights[i])weight.extend(child_weights)&#xa;            node.extend(child_nodes)&#xa;&#xa;          return(weight,node)&#xa;&#xa;        return descend(self.root,1.0)&#xa;&#xa;      def complete_data_log_likelihood(self):&#xa;        weights,nodes=self.get_mixture()&#xa;        llhs=[]&#xa;        for i,node in enumerate(nodes):&#xa;          if node.num_local_data():&#xa;            llhs.append(node.num_local_data()*log(weights[i])+&#xa;            node.data_log_likelihood())&#xa;&#xa;        return sum(array(llhs))&#xa;&#xa;      def complete_log_likelihood(self):&#xa;        weights,nodes=self.get_mixture()&#xa;        llhs=[&#xa;        self.dp_alpha_llh(self.dp_alpha,self.alpha_decay),self.dp_gamma_llh(self.dp_gamma)]&#xa;        for i,node in enumerate(nodes):&#xa;          if node.num_local_data():&#xa;            llhs.append(node.data_log_likelihood())&#xa;&#xa;&#xa;        return sum(array(llhs))&#xa;&#xa;      def dp_alpha_llh(self,dp_alpha,alpha_decay):&#xa;        def descend(dp_alpha,root,depth=0):&#xa;          llh=betapdfln(root['main'],1.0,(alpha_decay**depth)*&#xa;          dp_alpha)if self.min_depth&lt;=depth else 0.0 for child in root['children']:&#xa;            llh+=descend(dp_alpha,child,depth+1)&#xa;&#xa;          return llh&#xa;&#xa;        return descend(dp_alpha,self.root)&#xa;&#xa;      def dp_gamma_llh(self,dp_gamma):&#xa;        def descend(dp_gamma,root):&#xa;          llh=0&#xa;          for i,child in enumerate(root['children']):&#xa;            llh+=betapdfln(root['sticks'][i],1.0,dp_gamma)&#xa;            llh+=descend(dp_gamma,child)&#xa;&#xa;          return llh&#xa;&#xa;        return descend(dp_gamma,self.root)&#xa;&#xa;      def print_graph(self,fh,base_width=5000,min_width=5):&#xa;        print>>fh,&#xa;        print>>fh,&quot; % (;self.root['main'],&quot;X&quot;,max(int(self.root['main']*base_width),min_width))def descend(root,name,mass):&#xa;          total=0.0&#xa;          edges=sticks_to_edges(root['sticks'])&#xa;          weights=diff(hstack([0.0,edges]))&#xa;          for i,child in enumerate(root['children']):&#xa;            child_name=&quot;%s-%d&quot;%(name,i)&#xa;            child_mass=mass*weights[i]*child['main']&#xa;            print>>fh,&quot; % (;child_mass,child_name,max(int(child_mass*base_width),min_width))print>>fh,&quot; % (;name,child_name)total+=child_mass+descend(child,child_name,&#xa;            mass*weights[i]*(1.0-child['main']))&#xa;          return total&#xa;&#xa;        print>>fh,"/>
    <sourcecode id="u9aBukwTk27KW" value="self.data=set([])&#xa;self._children=[]&#xa;self.tssb=tssb&#xa;if parent is not None:&#xa;  parent.add_child(self)&#xa;  self._parent=parent&#xa;&#xa;else:&#xa;  self._parent=None&#xa;&#xa;"/>
    <sourcecode id="urS5Xuc0ZQN62" value="if self._parent is not None:&#xa;  self._parent._children.remove(self)&#xa;&#xa;self._parent=None&#xa;self._children=None&#xa;"/>
    <sourcecode id="uBHbDXPwqgTBS" value="return self.__class__(parent=self,tssb=self.tssb)&#xa;"/>
    <sourcecode id="ukRY8nWow0bNT" value="if len(self.data):&#xa;  return True&#xa;&#xa;else:&#xa;  for child in self._children:&#xa;    if child.has_data():&#xa;      return True&#xa;&#xa;&#xa;&#xa;return False&#xa;"/>
    <sourcecode id="ufzGSuLm9TeBk" value="return reduce(lambda x,y:x+y,&#xa;map(lambda c:c.num_data(),self._children),len(self.data))"/>
    <sourcecode id="u7BhAOOVd0QHX" value="return len(self.data)&#xa;"/>
    <sourcecode id="uk7Q6uu2yajwY" value="self.data.add(id)&#xa;"/>
    <sourcecode id="uf7iWdQgQH1DN" value="self.data.remove(id)&#xa;"/>
    <sourcecode id="uUDcKHgymrndM" value="pass&#xa;"/>
    <sourcecode id="ucu72qgjTe4ss" value="self._children.append(child)&#xa;"/>
    <sourcecode id="uslhuLH93dcfJ" value="self._children.remove(child)&#xa;"/>
    <sourcecode id="u9r21KrzE4dg1" value="return self._children&#xa;"/>
    <sourcecode id="ueZR2lJCfhjhL" value="ids=list(self.data)&#xa;return[self.tssb.data[id]for id in ids]&#xa;"/>
    <sourcecode id="u4uV0ZSamf7eO" value="0/0&#xa;return 0&#xa;"/>
    <sourcecode id="uLUYMXXtAFrzx" value="return self.complete_logprob()&#xa;"/>
    <sourcecode id="u1QwIKfBX6iL9" value="return rand(num_data,2)&#xa;"/>
    <sourcecode id="uBwVDTuc2nueI" value="return self._parent&#xa;"/>
    <sourcecode id="uYPV8gmb0WXQG" value="if self.parent()is None:&#xa;  return self.__dict__[key]&#xa;&#xa;else:&#xa;  return self.parent().global_param(key)&#xa;&#xa;"/>
    <sourcecode id="uQnO1geRxq07l" value="if self._parent is None:&#xa;  return[self]&#xa;&#xa;else:&#xa;  ancestors=self._parent.get_ancestors()&#xa;  ancestors.append(self)&#xa;  return ancestors"/>
    <sourcecode id="u5vH1Y10NpWed" value="self._filenames=filenames&#xa;self._backup_filenames=[os.path.realpath(fn)+&#xa;'.backup'for fn in self._filenames]"/>
    <sourcecode id="uLGvsRXG6qaNy" value="for fn,backup_fn in zip(self._filenames,self._backup_filenames):&#xa;  shutil.copy2(fn,backup_fn)&#xa;&#xa;"/>
    <sourcecode id="u30Zd3GXAozNI" value="for fn,backup_fn in zip(self._filenames,self._backup_filenames):&#xa;  shutil.copy2(backup_fn,fn)&#xa;&#xa;"/>
    <sourcecode id="uZSQfG0Q77uJI" value="for backup_fn in self._backup_filenames:&#xa;  try:&#xa;    os.remove(backup_fn)&#xa;&#xa;  except OSError:&#xa;    pass&#xa;&#xa;&#xa;"/>
   </codegenerator>
  </codegeneration>
 </XMI.extensions>
</XMI>
