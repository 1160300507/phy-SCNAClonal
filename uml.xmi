<?xml version="1.0" encoding="UTF-8"?>
<XMI xmlns:UML="http://schema.omg.org/spec/UML/1.3" verified="false" xmi.version="1.2" timestamp="2018-03-08T16:40:16">
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>umbrello uml modeller http://umbrello.kde.org</XMI.exporter>
   <XMI.exporterVersion>1.6.9</XMI.exporterVersion>
   <XMI.exporterEncoding>UnicodeUTF8</XMI.exporterEncoding>
  </XMI.documentation>
  <XMI.metamodel href="UML.xml" xmi.name="UML" xmi.version="1.3"/>
 </XMI.header>
 <XMI.content>
  <UML:Model name="UML Model" isAbstract="false" isSpecification="false" isRoot="false" xmi.id="m1" isLeaf="false">
   <UML:Namespace.ownedElement>
    <UML:Stereotype name="folder" isAbstract="false" isSpecification="false" isRoot="false" namespace="m1" isLeaf="false" xmi.id="folder" visibility="public"/>
    <UML:Stereotype name="datatype" isAbstract="false" isSpecification="false" isRoot="false" namespace="m1" isLeaf="false" xmi.id="datatype" visibility="public"/>
    <UML:Stereotype name="constructor" isAbstract="false" isSpecification="false" isRoot="false" namespace="m1" isLeaf="false" xmi.id="constructor" visibility="public"/>
    <UML:Model name="Logical View" isAbstract="false" isSpecification="false" isRoot="false" namespace="m1" isLeaf="false" xmi.id="Logical_View" visibility="public">
     <UML:Namespace.ownedElement>
      <UML:Package name="Datatypes" isAbstract="false" isSpecification="false" stereotype="folder" isRoot="false" namespace="Logical_View" isLeaf="false" xmi.id="Datatypes" visibility="public">
       <UML:Namespace.ownedElement>
        <UML:DataType name="char" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="ueBzwQtsNuTG5" visibility="public"/>
        <UML:DataType name="int" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="umWlKwntyInGn" visibility="public"/>
        <UML:DataType name="float" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="u71pLpNi8dO4o" visibility="public"/>
        <UML:DataType name="double" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uHFCB0pGxSum2" visibility="public"/>
        <UML:DataType name="bool" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uzuVHgqUUOsNA" visibility="public"/>
        <UML:DataType name="string" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="udSiblrLAI3pw" visibility="public"/>
        <UML:DataType name="unsigned char" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uVA7dJFQEXEGS" visibility="public"/>
        <UML:DataType name="signed char" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="u9znWiA3DMiy1" visibility="public"/>
        <UML:DataType name="unsigned int" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uJZGsShZWASQ1" visibility="public"/>
        <UML:DataType name="signed int" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uV8dPzOPW4rr1" visibility="public"/>
        <UML:DataType name="short int" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="u6c9cSRFZuLPj" visibility="public"/>
        <UML:DataType name="unsigned short int" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="us6Bmuol8EbrX" visibility="public"/>
        <UML:DataType name="signed short int" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="ur1d37BB0e23a" visibility="public"/>
        <UML:DataType name="long int" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="um4g0O4AyVm32" visibility="public"/>
        <UML:DataType name="signed long int" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="u17IlZmV6bEEd" visibility="public"/>
        <UML:DataType name="unsigned long int" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="u7eHdwBclnIvZ" visibility="public"/>
        <UML:DataType name="long double" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uu97xwcPFOTAP" visibility="public"/>
        <UML:DataType name="wchar_t" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uBgX5B9QEpUG3" visibility="public"/>
        <UML:DataType name="short" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="OYhdzGZJC2Xo" visibility="public"/>
        <UML:DataType name="long" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="MKia3ZGMdCBG" visibility="public"/>
        <UML:DataType name="unsigned short" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="dO3tLezjDeNC" visibility="public"/>
        <UML:DataType name="unsigned long" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uwT4w0sHIarL" visibility="public"/>
        <UML:DataType name="new_datatype" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="5f6p294Nq9tG" visibility="public"/>
        <UML:DataType name="array" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uix1gU64a3sZ" visibility="public"/>
        <UML:DataType name="tuple" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="0XjFzIldpKe9" visibility="public"/>
        <UML:DataType name="object" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="mlZ3aMGT3CUh" visibility="public"/>
        <UML:DataType name="set" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="eZlCcdka8Tp7" visibility="public"/>
        <UML:DataType name="undef" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uNEO6u9NCHwOO" visibility="public"/>
        <UML:DataType name="list" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="ummfz05vKgnuN" visibility="public"/>
        <UML:DataType name="dict" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="uYqsswCrgbtMr" visibility="public"/>
        <UML:DataType name="vector&lt; int >" elementReference="uNEO6u9NCHwOO" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="u12pHNK4FPzNZ" visibility="public"/>
        <UML:DataType name="cngenotype&amp;" elementReference="uNEO6u9NCHwOO" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="ukaEiNMZkb27L" visibility="public"/>
        <UML:DataType name="ArrayXd&amp;" elementReference="uNEO6u9NCHwOO" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="ul3gI0PpS7ndb" visibility="public"/>
        <UML:DataType name="vector&lt; string >" elementReference="uNEO6u9NCHwOO" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="rGwfUTq1YR22" visibility="public"/>
        <UML:DataType name="map&lt; int, vector &lt; string > >" elementReference="uNEO6u9NCHwOO" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="mVVj4EDfjgDu" visibility="public"/>
        <UML:DataType name="map&lt; int, ArrayXd >" elementReference="uNEO6u9NCHwOO" isAbstract="false" isSpecification="false" stereotype="datatype" isRoot="false" namespace="Datatypes" isLeaf="false" xmi.id="xyrTXwO1HXKh" visibility="public"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Package name="preprocess" isAbstract="false" isSpecification="false" isRoot="false" namespace="Logical_View" isLeaf="false" xmi.id="uXzRwZqek96LR" visibility="public">
       <UML:Namespace.ownedElement>
        <UML:Class name="BamConverter" isAbstract="false" isSpecification="false" isRoot="false" namespace="uXzRwZqek96LR" isLeaf="false" xmi.id="ue2UNyKwJRGYt" visibility="public">
         <UML:Classifier.feature>
          <UML:Attribute name="nBamName" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uU0K27Hdwgxf9" visibility="protected"/>
          <UML:Attribute name="tBamNameL" isSpecification="false" type="ummfz05vKgnuN" xmi.id="u35xRZgkk9UpQ" visibility="protected"/>
          <UML:Attribute name="bedNameL" isSpecification="false" type="ummfz05vKgnuN" xmi.id="uOmm95DFtBVgQ" visibility="protected"/>
          <UML:Attribute name="refFaName" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uU4cCQHLVHibP" visibility="protected"/>
          <UML:Attribute name="pathPrefix" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;&quot;" xmi.id="uv1ZOdlVYdhba" visibility="private"/>
          <UML:Attribute name="subcloneNumberL" isSpecification="false" type="ummfz05vKgnuN" initialValue="[2]" xmi.id="uy9C5gc5pGbDJ" visibility="private"/>
          <UML:Attribute name="coverageL" isSpecification="false" type="ummfz05vKgnuN" initialValue="[30]" xmi.id="upXp9czTUL0xe" visibility="private"/>
          <UML:Attribute name="maxCopyNumber" isSpecification="false" type="umWlKwntyInGn" initialValue="6" xmi.id="uhPxQXga2VOMo" visibility="private"/>
          <UML:Attribute name="baselineThredLOH" isSpecification="false" type="u71pLpNi8dO4o" initialValue="0.3" xmi.id="ub6BbxBJo3fz6" visibility="private"/>
          <UML:Attribute name="baselineThredAPM" isSpecification="false" type="u71pLpNi8dO4o" initialValue="0.01" xmi.id="upLBjDcJ87Ouq" visibility="private"/>
          <UML:Attribute name="minDepth" isSpecification="false" type="u71pLpNi8dO4o" initialValue="20" xmi.id="uCPOG6Z9SB5he" visibility="private"/>
          <UML:Attribute name="minBqual" isSpecification="false" type="u71pLpNi8dO4o" initialValue="10" xmi.id="u1d44UzfOQhPh" visibility="private"/>
          <UML:Attribute name="minMqual" isSpecification="false" type="umWlKwntyInGn" initialValue="10" xmi.id="u2L9XdJhRduzT" visibility="private"/>
          <UML:Attribute name="processNum" isSpecification="false" type="umWlKwntyInGn" initialValue="1" xmi.id="u5SQm4uOJ2BwY" visibility="private"/>
          <UML:Attribute name="bedCorrectedPath" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;&quot;" xmi.id="uRrbT3Rkxjex0" visibility="private"/>
          <UML:Attribute name="pklPath" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;&quot;" xmi.id="u0EYxyN4SO896" visibility="private"/>
          <UML:Attribute name="segPoolL" isSpecification="false" type="ummfz05vKgnuN" initialValue="[]" xmi.id="u0ju2PCTjG9lu" visibility="private"/>
          <UML:Operation name="init__" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uzHochCDpJktp" visibility="private">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="uWzt2z9Cp2gRG"/>
            <UML:Parameter name="nBamName" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uNPSBikeZhXBz" visibility="private"/>
            <UML:Parameter name="tBamNameL" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uXLEI9ALPvvRc" visibility="private"/>
            <UML:Parameter name="bedNameL" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="upr4167aN2xo8" visibility="private"/>
            <UML:Parameter name="refFaName" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uyfXLyCLflcaN" visibility="private"/>
            <UML:Parameter name="pathPrefix" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uUvO9MTnEgMUa" visibility="private"/>
            <UML:Parameter name=";" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uONdaa524slpq" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="convert" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uEdHnsvJrhNat" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter name="readFromBed" value="True" isSpecification="false" type="uzuVHgqUUOsNA" xmi.id="5FJibamhEBZR" visibility="private"/>
            <UML:Parameter name="method" value="&quot;auto&quot;" isSpecification="false" type="udSiblrLAI3pw" xmi.id="OmxkfINQjyjX" visibility="private"/>
            <UML:Parameter name="pkl_flag" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uswRFsUVdMZod" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="mark_stripe" isQuery="false" isAbstract="false" comment="        generate stripe from segs&#xa;        mark segs in final sample&#xa;        load segments for each tumor sample&#xa;        correct bias of each tumor sample&#xa;        get the baseline segments&#xa;        calculate baseline of each SegmentPool&#xa;        return: the baseline segments&#xa;        The interception is irrelevant for correction, set as median&#xa;        MCMCLM only returns the m and c, then correct the data here&#xa;        :returns: TODO&#xa; ===============================================================================  Function ===============================================================================" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="u6K9pxOBSEc4t" visibility="protected"/>
          <UML:Operation name="process_by_segment" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" ownerScope="classifier" isLeaf="false" xmi.id="uJmEbWB1TC4UR" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="uQwiN1rwDagXQ"/>
            <UML:Parameter name="args_tuple" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uFzKmFkJw7F1V" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="iterator_to_counts" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" ownerScope="classifier" isLeaf="false" xmi.id="ufnQ1OiN4y8FK" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="uZWIAsYo8CGNd"/>
            <UML:Parameter name="paired_counts_iter" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="ufEV88PgW5ENw" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="load_segs" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uL4R4gZf5wcl3" visibility="protected">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter name="readFromBed" value="True" isSpecification="false" type="uzuVHgqUUOsNA" xmi.id="8scqAPGW9DGm" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="correct_bias" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uBoAvLkCIcoXi" visibility="protected"/>
          <UML:Operation name="get_baseline" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uEsDXghVASuXA" visibility="protected">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="0XjFzIldpKe9" xmi.id="uwVnweSOnBsMM"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="mark_timestamp" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uL0G0B67OrvvF" visibility="protected">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter name="blSegs" value="" isSpecification="false" type="ummfz05vKgnuN" xmi.id="urYzddNS8PdeP" visibility="private"/>
            <UML:Parameter name="nonBlSegs" value="" isSpecification="false" type="uNEO6u9NCHwOO" xmi.id="u1gNI6FN5kcrV" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="dump" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uQQfkOiECyNUY" visibility="protected"/>
          <UML:Operation name="generate_stripe" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="lQbIq9WmdOI6" visibility="protected"/>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Package name="data" isAbstract="false" isSpecification="false" isRoot="false" namespace="uXzRwZqek96LR" isLeaf="false" xmi.id="jkowKqKr2XUN" visibility="public">
         <UML:Namespace.ownedElement>
          <UML:Package name="elements" isAbstract="false" isSpecification="false" isRoot="false" namespace="jkowKqKr2XUN" isLeaf="false" xmi.id="6P7UINCkpLgN" visibility="public">
           <UML:Namespace.ownedElement>
            <UML:Class name="Segment" isAbstract="false" isSpecification="false" isRoot="false" namespace="6P7UINCkpLgN" isLeaf="false" xmi.id="u9lL7RaxBuDmk" visibility="public">
             <UML:Classifier.feature>
              <UML:Attribute name="name" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;&quot;" xmi.id="ncxXZk61MsOb" visibility="public"/>
              <UML:Attribute name="chromIdx" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="ParBVggPRxEp" visibility="public"/>
              <UML:Attribute name="chromName" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;&quot;" xmi.id="IfUIUlJILFps" visibility="public"/>
              <UML:Attribute name="start" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="xvsHmEsBohKH" visibility="public"/>
              <UML:Attribute name="end" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="N0eowsbCV4U0" visibility="public"/>
              <UML:Attribute name="nReadNum" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="plI8y50vzqAl" visibility="public"/>
              <UML:Attribute name="tReadNum" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="42uriC65Dls7" visibility="public"/>
              <UML:Attribute name="gc" isSpecification="false" type="u71pLpNi8dO4o" initialValue="-1.0" xmi.id="uWTHsFcHsKOk" visibility="public"/>
              <UML:Attribute name="LOHFrac" isSpecification="false" type="u71pLpNi8dO4o" initialValue="-1.0" xmi.id="bRJ7Vn5IWLOV" visibility="public"/>
              <UML:Attribute name="LOHStatus" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;NONE&quot;" xmi.id="OPONFZ6IZy9H" visibility="public"/>
              <UML:Attribute name="APMFrac" isSpecification="false" type="u71pLpNi8dO4o" initialValue="-1.0" xmi.id="BFLMyBTaamh6" visibility="public"/>
              <UML:Attribute name="APMStatus" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;NONE&quot;" xmi.id="XkM15lWT8tpL" visibility="public"/>
              <UML:Attribute name="pairedCounts" isSpecification="false" type="uNEO6u9NCHwOO" initialValue="None" xmi.id="VdSdWHwwAav2" visibility="public"/>
              <UML:Attribute name="BAFCounts" isSpecification="false" type="uNEO6u9NCHwOO" initialValue="None" xmi.id="vEzqy6pRhH2B" visibility="public"/>
              <UML:Attribute name="baselineLabel" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;FALSE&quot;" xmi.id="lsWLcBP7vk80" visibility="public"/>
              <UML:Attribute name="stripeIdx" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="DJNV2COxOLoL" visibility="public"/>
              <UML:Attribute name="alleleType" isSpecification="false" type="uNEO6u9NCHwOO" initialValue="None" xmi.id="Rdk6snHOkO2H" visibility="public"/>
              <UML:Attribute name="copyNumber" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="Wz7gX0hpBk6t" visibility="public"/>
              <UML:Attribute name="tag" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;SCNA&quot;" xmi.id="1kycj6zYOtLe" visibility="public"/>
             </UML:Classifier.feature>
            </UML:Class>
            <UML:Class name="Stripe" isAbstract="false" isSpecification="false" isRoot="false" namespace="6P7UINCkpLgN" isLeaf="false" xmi.id="uGJAJHVksU5kD" visibility="public">
             <UML:Classifier.feature>
              <UML:Attribute name="name" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;&quot;" xmi.id="wkem52XAfbyf" visibility="public"/>
              <UML:Attribute name="sid" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;&quot;" xmi.id="i22X9tnP8h87" visibility="public"/>
              <UML:Attribute name="segIdL" isSpecification="false" type="uNEO6u9NCHwOO" initialValue="[]" xmi.id="jN0F1BcxvGi0" visibility="public"/>
              <UML:Attribute name="pairedCounts" isSpecification="false" type="uNEO6u9NCHwOO" initialValue="None" xmi.id="GF9to7ZX7Z4H" visibility="public"/>
              <UML:Attribute name="nReadNum" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="RpgZWmgD9gR8" visibility="public"/>
              <UML:Attribute name="tReadNum" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="p34lHmjXzsQn" visibility="public"/>
              <UML:Attribute name="tag" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;baseline&quot;" xmi.id="zxI5VKMwA0Te" visibility="public"/>
              <UML:Attribute name="copyNumber" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="m7qtnHzdI3MZ" visibility="public"/>
              <UML:Attribute name="genotype" isSpecification="false" type="udSiblrLAI3pw" initialValue="&quot;&quot;" xmi.id="p54oyScvOs0t" visibility="public"/>
              <UML:Attribute name="tssb" isSpecification="false" type="uNEO6u9NCHwOO" initialValue="None" xmi.id="DKnNIGz2Lpt8" visibility="public"/>
              <UML:Attribute name="node" isSpecification="false" type="uNEO6u9NCHwOO" initialValue="None" xmi.id="Q6yozxhCFSZY" visibility="public"/>
              <UML:Operation name="init_segs" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="kZiXtMgd5Fge" visibility="public">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter name="segsL" value="[]" isSpecification="false" type="uNEO6u9NCHwOO" xmi.id="uyasQ1rz82eR" visibility="private"/>
                <UML:Parameter name="segsIdxL" value="[]" isSpecification="false" type="uNEO6u9NCHwOO" xmi.id="jji5DVlRuJK2" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="init_RD" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uSFbzvVi5laeK" visibility="protected"/>
              <UML:Operation name="init_BAF" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="ugDCbkG53tlI7" visibility="protected"/>
              <UML:Operation name="log_likelihood" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uiF2M6P6TKTpM" visibility="protected"/>
              <UML:Operation name="log_likelihood_RD_BAF" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uN2mauWozIBJj" visibility="private">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter name="phi" value="" isSpecification="false" type="u71pLpNi8dO4o" xmi.id="uYe51AmWfnCfM" visibility="private"/>
                <UML:Parameter name="baseline" value="0" isSpecification="false" type="u71pLpNi8dO4o" xmi.id="uJkOJRAbAe0jz" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="getLLStripe" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uTQo2OgKdfr4M" visibility="protected">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter name="copyNumber" value="" isSpecification="false" type="umWlKwntyInGn" xmi.id="uLD9MkaMnrf0G" visibility="private"/>
                <UML:Parameter name="phi" value="" isSpecification="false" type="u71pLpNi8dO4o" xmi.id="u8iySwvJz4QHG" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="augBAF" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uoKC8JdHXqEjB" visibility="protected">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter name="copyNumber" value="" isSpecification="false" type="umWlKwntyInGn" xmi.id="uUpwCSy5NteKs" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="getRD" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uhBvLhFJ7hELb" visibility="protected">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter name="copyNumber" value="" isSpecification="false" type="umWlKwntyInGn" xmi.id="u6eLmAPgDdGzY" visibility="private"/>
                <UML:Parameter name="phi" value="" isSpecification="false" type="u71pLpNi8dO4o" xmi.id="uxYrfLHaDSGEk" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="getBAF" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="utytXH9nvX4L1" visibility="protected">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter name="copyNumber" value="" isSpecification="false" type="umWlKwntyInGn" xmi.id="uszVuXGdWROes" visibility="private"/>
                <UML:Parameter name="alleleTypes" value="" isSpecification="false" type="uYqsswCrgbtMr" xmi.id="ufrtwG6PaukYw" visibility="private"/>
                <UML:Parameter name="phi" value="" isSpecification="false" type="u71pLpNi8dO4o" xmi.id="uSwhpoCoBtLDi" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
             </UML:Classifier.feature>
            </UML:Class>
           </UML:Namespace.ownedElement>
          </UML:Package>
          <UML:Package name="pools" isAbstract="false" isSpecification="false" isRoot="false" namespace="jkowKqKr2XUN" isLeaf="false" xmi.id="y4YEKZR3HDxZ" visibility="public">
           <UML:Namespace.ownedElement>
            <UML:Class name="SegmentPool" isAbstract="false" isSpecification="false" isRoot="false" namespace="y4YEKZR3HDxZ" isLeaf="false" xmi.id="uw5mZm9Nan99y" visibility="public">
             <UML:Classifier.feature>
              <UML:Attribute name="baseline" isSpecification="false" type="umWlKwntyInGn" initialValue="-1" xmi.id="u36UEqbQP3E1t" visibility="public"/>
              <UML:Attribute name="segments" isSpecification="false" type="uNEO6u9NCHwOO" xmi.id="uUCNCTtJytDIm" visibility="public"/>
              <UML:Attribute name="maxCopyNumber" isSpecification="false" type="umWlKwntyInGn" initialValue="6" xmi.id="usKHjJy7DbcDJ" visibility="public"/>
              <UML:Attribute name="coverage" isSpecification="false" type="umWlKwntyInGn" initialValue="30" xmi.id="u6wMQuIoKs0pV" visibility="public"/>
              <UML:Attribute name="alleleConfig" isSpecification="false" type="uYqsswCrgbtMr" xmi.id="uhQ60AEZGhs1Z" visibility="protected"/>
              <UML:Attribute name="idx" comment="索引" isSpecification="false" type="umWlKwntyInGn" initialValue="0" xmi.id="vu428SXh8HG2" visibility="public"/>
              <UML:Operation name="init__" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="ufjghCz075IPu" visibility="private">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="uCuaCvrO9tOsi"/>
                <UML:Parameter name="maxCopyNumber" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uA2rnU9B7ORIB" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="load_seg_bed" isQuery="false" isAbstract="false" comment="        :bedName: TODO&#xa;        :returns: TODO&#xa; if 0 == nReadNum: tempSeg.log2_ratio = -float('Inf') else: tempSeg.log2_ratio = np.log2(1.0 * tReadNum/nReadNum) tempSeg.log_ratio = np.log(1.0 * (tReadNum + 1.0) / (nReadNum + 1.0))" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="u5IlGxn6vUnmV" visibility="public">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="uTl7cByMay5Yx"/>
                <UML:Parameter name="bedName" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="u2Xu8y5PMzg6l" visibility="private"/>
                <UML:Parameter name="containsReadNum" value="True" isSpecification="false" type="uzuVHgqUUOsNA" xmi.id="AWQHif3CGDNq" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="load_seg_bam" isQuery="false" isAbstract="false" comment=" tempSeg.log2_ratio = np.log2(1.0 * tReadNum/normal_reads_num) tempSeg.log_ratio = np.log(1.0 * (tReadNum + 1.0) / (normal_reads_num + 1.0))" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="u8bcOXT2EnOmF" visibility="public">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="urr3yhjZBIiXa"/>
                <UML:Parameter name="normal_bam" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="ubqz6xv2YZn0A" visibility="private"/>
                <UML:Parameter name="tumor_bam" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uNmxMYEylbClz" visibility="private"/>
                <UML:Parameter name="bed_file_name" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uZYQBlrrCgsYe" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="get_baseline" isQuery="false" isAbstract="false" comment=" 此处转换成了stripe之后再返回" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uUhiIh66JJbAZ" visibility="public">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="u5s1dXxOA4Mo8"/>
                <UML:Parameter name="maxCopyNumber" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uX4EI4putoqRO" visibility="private"/>
                <UML:Parameter name="subcloneNum" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uuJqiE4OBoJQ7" visibility="private"/>
                <UML:Parameter name="isPreprocess" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uRlaX1ga4CbyE" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="get_seg_by_tag" isQuery="false" isAbstract="false" comment="        return seg list&#xa;" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="u1ILHA5KjC8fG" visibility="public">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="ujS7HJ8YvuCnG"/>
                <UML:Parameter name="tag" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uxIPtH4FmhBJh" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="get_baseline_stripe" isQuery="false" isAbstract="false" comment="        compute the Lambda S, through hierarchy clustering&#xa; def _log_likelihood(self, id, phi, update_tree=True, new_state=0): if update_tree: ################################################## # some useful info about the tree, # used by CNV related computations, u.set_node_height(self.tssb) u.set_path_from_root_to_node(self.tssb) u.map_datum_to_node(self.tssb) ################################################## seg = self.segments[id] ll, cn, pi = self._getSegResData(seg, phi) return ll def _getSegResData(self, seg, phi): copyNumbers = None if seg.baselineLabel == &quot;True&quot;: copyNumbers = [2] elif get_loga(seg) > self.baseline: copyNumbers = range(2, self.max_copy_number + 1) else: copyNumbers = range(0, 2 + 1) llPiS = [self._getLLSeg(seg, copyNumber, phi) for copyNumber in copyNumbers] (ll, pi) = max(llPiS, key=lambda x: x[0]) cn = llPiS.index((ll, pi)) return ll, cn, pi def _getLLSeg(self, seg, copyNumber, phi): llSeg = 0 llRd = self._getRD(seg, copyNumber, phi) alleleType = self._alleleConfig[copyNumber] self._augBAF(seg, copyNumber) if 0 == seg.pairedCounts.shape[0]: llBAFs = 0 pi = &quot;*&quot; else: llBAFs, pi = self._getBAF(seg, copyNumber, alleleType, phi) llSeg = llBAFs + llRd return llSeg, pi def _augBAF(self, seg, copyNumber): if copyNumber > 2: threshold = constants.BAF_THRESHOLD * self._coverage dTj = np.sum(seg.BAF[:, 2:4], axis=1) idxRm = tuple(np.where(dTj &lt; threshold)[0]) seg.BAF = np.delete(seg.BAF, idxRm, axis=0) else: pass def _getRD(self, seg, copyNumber, phi): cN = constants.COPY_NUMBER_NORMAL bar_c = phi * copyNumber + (1.0 - phi) * cN print &quot;____>>> _getRD: bar_c, cN, self._baseline, seg.normal_reads_num____&quot; print bar_c, cN, self._baseline, seg.normal_reads_num print &quot;_________end _getRD:bar_c, cN, self._baseline, seg.normal_reads_num______________&quot; lambda_possion = ( bar_c / cN) * self._baseline * (seg.normal_reads_num + 1) #not minus 1 ? better if lambda_possion &lt; 0: lambda_possion = 0 print &quot;____>>> _getRD: seg.tReadNum, lambda_possion____&quot; print seg.tReadNum, lambda_possion print &quot;_________end _getRD:seg.tReadNum, lambda_possion______________&quot; ll_RD = log_poisson_pdf(seg.tReadNum, lambda_possion) return ll_RD def _getBAF(self, seg, copyNumber, alleleType, phi): cN = constants.COPY_NUMBER_NORMAL mu_N = constants.MU_N # keys, ppmm values 0.5 mu_G = np.array(alleleType.values()) print &quot;____>>> _getBAF: mu_N, mu_G, cN, copyNumber, phi____&quot; print mu_N, mu_G, cN, copyNumber, phi print &quot;_________end _getBAF:mu_N, mu_G, cN, copyNumber, phi______________&quot; mu_E = get_mu_E_joint(mu_N, mu_G, cN, copyNumber, phi) if seg.pairedCounts.shape[0] > 1: b_T_j = np.min(seg.pairedCounts[:, 2:4], axis=1) dTj = np.sum(seg.pairedCounts[:, 2:4], axis=1) baf = b_T_j * 1.0 / dTj outlier = mad_based_outlier(baf) BAF = np.delete(seg.pairedCounts, list(outlier.astype(int)), axis=0) b_T_j = np.min(BAF[:, 2:4], axis=1) dTj = np.sum(BAF[:, 2:4], axis=1) else: b_T_j = np.min(seg.pairedCounts[:, 2:4], axis=1) dTj = np.sum(seg.pairedCounts[:, 2:4], axis=1) pass # add prior or not? ll = log_binomial_likelihood(b_T_j, dTj, mu_E) ll_bafs = ll.sum(axis=0) idx_max = ll_bafs.argmax(axis=0) llBAFs = ll_bafs[idx_max] pi = alleleType[alleleType.keys()[idx_max]] return llBAFs, pi # computes the binomial parameter def compute_n_genomes(self, tp, new_state=0): def descend(nd, new_state): # this is needed for Metropolis-Hastings likelihood computations pi = nd.pi1[tp] if new_state else nd.pi[tp] ssm_node = self.node.path[-1] mr_cnv = self.find_most_recent_cnv(nd) ancestors = nd.get_ancestors() if (ssm_node not in ancestors) and (not mr_cnv): self.nr1 += pi * 2 self.nr2 += pi * 2 self.nr3 += pi * 2 self.nr4 += pi * 2 elif ssm_node in ancestors and (not mr_cnv): self.nr1 += pi self.nv1 += pi self.nr2 += pi self.nv2 += pi self.nr3 += pi self.nv3 += pi self.nr4 += pi self.nv4 += pi elif (ssm_node not in ancestors) and mr_cnv: self.nr1 += pi * (mr_cnv[1] + mr_cnv[2]) self.nr2 += pi * (mr_cnv[1] + mr_cnv[2]) self.nr3 += pi * (mr_cnv[1] + mr_cnv[2]) self.nr4 += pi * (mr_cnv[1] + mr_cnv[2]) elif ssm_node in ancestors and mr_cnv: self.nr3 += pi * max(0, (mr_cnv[1]+mr_cnv[2] - 1)) self.nv3 += pi * min(1, mr_cnv[1]+mr_cnv[2]) self.nr4 += pi * max(0, (mr_cnv[1] + mr_cnv[2] - 1)) self.nv4 += pi * min(1, mr_cnv[1]+mr_cnv[2]) if ssm_node in mr_cnv[0].node.get_ancestors(): self.nr1 = self.nr1 + pi * mr_cnv[1] self.nv1 = self.nv1 + pi * mr_cnv[2] self.nr2 = self.nr2 + pi * mr_cnv[2] self.nv2 = self.nv2 + pi * mr_cnv[1] else: self.nr1 = self.nr1 + pi * max(0, (mr_cnv[1]+mr_cnv[2] - 1)) self.nv1 = self.nv1 + pi * min(1, mr_cnv[1]+mr_cnv[2]) self.nr2 = self.nr2 + pi * max(0, (mr_cnv[1] + mr_cnv[2] - 1)) self.nv2 = self.nv2 + pi * min(1, mr_cnv[1]+mr_cnv[2]) else: print &quot;PANIC&quot; nodes = self.tssb.root['node'].tssb.get_nodes() self.nr1 = 0 self.nv1 = 0 self.nr2 = 0 self.nv2 = 0 self.nr3 = 0 self.nv3 = 0 self.nr4 = 0 self.nv4 = 0 for nd in nodes: descend(nd, new_state) if len(self.cnv) == 1 and self.node == self.cnv[0][0].node: out = [ (self.nr1, self.nv1), (self.nr2, self.nv2), (self.nr3, self.nv3), (self.nr4, self.nv4)] else: out = [(self.nr1, self.nv1), (self.nr2, self.nv2)] return out" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="ufNvLzFKfszwj" visibility="protected">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="uqbYlhx6RX9IV"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
             </UML:Classifier.feature>
            </UML:Class>
            <UML:Class name="StripePool" isAbstract="false" comment="The stripe objects, including load, property operations" isSpecification="false" isRoot="false" namespace="y4YEKZR3HDxZ" isLeaf="false" xmi.id="ujk5BH4jpEXpe" visibility="public">
             <UML:GeneralizableElement.generalization>
              <UML:Generalization xmi.idref="uVdg3drZS5Nlq"/>
             </UML:GeneralizableElement.generalization>
             <UML:Classifier.feature>
              <UML:Attribute name="segPool" isSpecification="false" type="uw5mZm9Nan99y" xmi.id="uc29pM9LvmIDX" visibility="protected"/>
              <UML:Attribute name="stripes" isSpecification="false" type="ummfz05vKgnuN" initialValue="[]" xmi.id="uVWJqOZ5F3KED" visibility="public"/>
              <UML:Attribute name="baseline" isSpecification="false" type="u71pLpNi8dO4o" initialValue="0.0" xmi.id="uRmyokQfI8cUg" visibility="private"/>
              <UML:Operation name="init__" isQuery="false" isAbstract="false" comment="import segmentPool object&#xa;        :segmentPool: TODO&#xa; stripes" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="u5artKIw52dAK" visibility="private">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="ut7b2cD12c18P"/>
                <UML:Parameter name="segmentPool" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uqvmb4vXCeYGK" visibility="private"/>
                <UML:Parameter name="baseline" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uEy6gXg16gXth" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="get" isQuery="false" isAbstract="false" comment="TODO: Docstring for get.&#xa;        :returns: TODO&#xa;" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="ukC4j5IWapCtY" visibility="public">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="u7yPk2hVmrq2r"/>
                <UML:Parameter name="yDown" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uBUCNKUgjVg8E" visibility="private"/>
                <UML:Parameter name="yUp" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uBnwoXDhtWkng" visibility="private"/>
                <UML:Parameter name="stripeNum" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uzglV9mU9AmVs" visibility="private"/>
                <UML:Parameter name="noiseStripeNum" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="u7AmW1vLjMl3H" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="output_txt" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="u6Ukw8I6Svyhw" visibility="public">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="ua0VBFMTR0zeD"/>
                <UML:Parameter name="outFileName" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uj8awm8VyCkmX" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="aggregate" isQuery="false" isAbstract="false" comment="The aggregation operations for segments in data&#xa;        :returns: stripes data structure&#xa; here should keep idx 记录是否是outlier 此处应该只获取最大和最小值之间的条带，且要保留原始位置，以方便索引 此处获取最小和最大值之间的条带的方法是：直接去除这些位置不列入计算范围 此处应该是去除了outlier之后的Counter 对每一个条带进行裂解操作，生成子条带, return" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uJJI1qcT0zh9x" visibility="protected">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="ulpLs2ag5xD8H"/>
                <UML:Parameter name="yDown" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="u3iTyG0hRtp26" visibility="private"/>
                <UML:Parameter name="yUp" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uFH6UkM2isVGS" visibility="private"/>
                <UML:Parameter name="stripeNum" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="urRaeXyUjFX0O" visibility="private"/>
                <UML:Parameter name="noiseStripeNum" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uFGh8hdNIunYH" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="decompose" isQuery="false" isAbstract="false" comment="The decomposition operations for segments in data&#xa;        :parameters: TODO&#xa;        :returns: TODO&#xa; 获得该类别的所有结点idx： 即，clusters 中与cId相等且，在statusYcV中的位置 这里的基于BAF的归类处理分为3个步骤 首先进行所有seg的BAF的密度估计，然后获得峰值    类别定位 然后对每一个seg进行归类，按照内部投票的方式     Seg归类 然后返回 这里需要有一个记录原始向量中位置的向量 status_p_T_v = np.logical_and(pT > p_T_min, pT &lt; p_T_max).flatten()" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uCmrJaRtFZ0hc" visibility="protected">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="uTUl4qdJHjyKj"/>
                <UML:Parameter name="cId" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uJvqSnVw2LWUw" visibility="private"/>
                <UML:Parameter name="clusters" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uvKHvcEaPnzdD" visibility="private"/>
                <UML:Parameter name="statusYcV" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="ubskbBiiAQoDB" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
              <UML:Operation name="getSegLabl" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="uMmzxgydu1EDb" visibility="protected">
               <UML:BehavioralFeature.parameter>
                <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="u5aASKRtHTr7L"/>
                <UML:Parameter name="seg" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uWJgsFrBjwMFc" visibility="private"/>
                <UML:Parameter name="clusterCenters" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="ugMHCfETRe9uM" visibility="private"/>
               </UML:BehavioralFeature.parameter>
              </UML:Operation>
             </UML:Classifier.feature>
            </UML:Class>
           </UML:Namespace.ownedElement>
          </UML:Package>
         </UML:Namespace.ownedElement>
        </UML:Package>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Association name="" isSpecification="false" namespace="Logical_View" xmi.id="ui5OKutKIDDJW" visibility="public">
       <UML:Association.connection>
        <UML:AssociationEnd name="" isSpecification="false" type="uGJAJHVksU5kD" isNavigable="true" xmi.id="uWlkaM1tP3ipN" aggregation="composite" changeability="changeable" visibility="public"/>
        <UML:AssociationEnd name="" isSpecification="false" type="uNEO6u9NCHwOO" isNavigable="true" xmi.id="uc5J0a6fOHcNv" aggregation="none" changeability="changeable" visibility="public"/>
       </UML:Association.connection>
      </UML:Association>
      <UML:Generalization name="" discriminator="" isSpecification="false" namespace="Logical_View" xmi.id="uVdg3drZS5Nlq" child="ujk5BH4jpEXpe" visibility="public" parent="mlZ3aMGT3CUh"/>
      <UML:Dependency name="" client="uNEO6u9NCHwOO" isSpecification="false" namespace="Logical_View" supplier="ui5OKutKIDDJW" xmi.id="uHa85gubhGtzZ" visibility="public"/>
      <UML:Dependency name="" client="uNEO6u9NCHwOO" isSpecification="false" namespace="Logical_View" supplier="ui5OKutKIDDJW" xmi.id="uOiTc6baUCkyx" visibility="public"/>
      <UML:Dependency name="" client="uNEO6u9NCHwOO" isSpecification="false" namespace="Logical_View" supplier="ui5OKutKIDDJW" xmi.id="MPWpmOHI2TJr" visibility="public"/>
      <UML:Dependency name="" client="uNEO6u9NCHwOO" isSpecification="false" namespace="Logical_View" supplier="ui5OKutKIDDJW" xmi.id="oPgaFLAZ0TLU" visibility="public"/>
      <UML:Dependency name="" client="uNEO6u9NCHwOO" isSpecification="false" namespace="Logical_View" supplier="ui5OKutKIDDJW" xmi.id="kMjf2VQk4GOu" visibility="public"/>
      <UML:Dependency name="" client="uNEO6u9NCHwOO" isSpecification="false" namespace="Logical_View" supplier="ui5OKutKIDDJW" xmi.id="Uh4f7ZiGEhXu" visibility="public"/>
      <UML:Package name="model" isAbstract="false" isSpecification="false" isRoot="false" namespace="Logical_View" isLeaf="false" xmi.id="9sJ8Cwi2yr7x" visibility="public">
       <UML:Namespace.ownedElement>
        <UML:Class name="Node" isAbstract="false" isSpecification="false" isRoot="false" namespace="9sJ8Cwi2yr7x" isLeaf="false" xmi.id="FkigjR3eciNM" visibility="public">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="JcA0AsZJlsPx"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute name="data" isSpecification="false" type="eZlCcdka8Tp7" initialValue="set([])" xmi.id="Q1DTI03WYGvr" visibility="public"/>
          <UML:Attribute name="_children" isSpecification="false" type="ummfz05vKgnuN" initialValue="[]" xmi.id="teZM9rKXsVz8" visibility="protected"/>
          <UML:Attribute name="tssb" isSpecification="false" type="E4NSjs5cUdyd" initialValue="None" xmi.id="V2d2GWrRZeEd" visibility="public"/>
          <UML:Attribute name="_parent" isSpecification="false" type="b6p8i1jw56Mm" initialValue="None" xmi.id="UG8Ll7RE74EO" visibility="protected"/>
          <UML:Operation name="__init__" isQuery="false" isAbstract="false" comment=" set([])#shankar" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="nNXYFwU22Plw" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="Op7RiwfVJC2X"/>
            <UML:Parameter name="parent" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="SR6Fpukcls2H" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="kill" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="6UX6rI1Ih7XW" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="0F6l890Uw8ve"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="spawn" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="4Y7Li9spbPtT" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="fslM0Gq0Wxjc"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="has_data" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="6k42qxesWlDE" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="t61UTtx9lgVj"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="num_data" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="xMjRHR1N95Nx" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="2zpWk2ld8k8c"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="num_local_data" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="d3jPkE8fYq6n" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="F78OATLAS8hB"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="add_datum" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="AQoHAurowaDg" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="g3k99RKKp6Z0"/>
            <UML:Parameter name="id" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="mJJJ9N6OSFkc" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="remove_datum" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="1QmvyxbkGs1O" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="TSyIZXGYv2Tt"/>
            <UML:Parameter name="id" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="F8khLVHzW18g" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="resample_params" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="z2dEudc7jMo2" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="p31K4AyVawm9"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="add_child" isQuery="false" isAbstract="false" comment=" shankar" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="R2fM36D08qE0" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="OGUyCG6bHjvK"/>
            <UML:Parameter name="child" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="Rq5ABtC0uEKz" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="remove_child" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="q8KwxZxON0ZY" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="UMsl5n3twMqt"/>
            <UML:Parameter name="child" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="ulZmzrlL8GII" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="children" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="vlHGlopdaMQX" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="B9rHN7YsTQbW"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="get_data" isQuery="false" isAbstract="false" comment=" return self.tssb.data[list(self.data),:] #shankar" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="DdO7zC0sxG8g" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="4vIeHgARpziB"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="logprob" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="6E3Zec3qFRxE" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="91pw0V76k8dM"/>
            <UML:Parameter name="x" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="dw6YCDDG8TtO" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="data_log_likelihood" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="jgAy88Bj2HIE" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="UVSbwJz5IozI"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="sample" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="H5M1BzMueWtk" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="YKBr697NCUNN"/>
            <UML:Parameter name="num_data" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="c4TeJjqmCHN8" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="parent" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="RjI3D9nqBFUS" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="wJC9aZF8rPxx"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="global_param" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="Y5LkZi5yPL2c" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="oJsfiodEtwyS"/>
            <UML:Parameter name="key" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="UnSd0v4xCG4k" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="get_ancestors" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="c4O1PObsC2TC" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="xX97mDraVhFB"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="get_offsprings" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="VqQOmMoOOBNm" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="Zzcl15wwb51N"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class name="TSSB" isAbstract="false" isSpecification="false" isRoot="false" namespace="9sJ8Cwi2yr7x" isLeaf="false" xmi.id="e4aBEpIZSrfA" visibility="public">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="lpe8ZWQWpbFS"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute name="minDpAlpha" isSpecification="false" type="u71pLpNi8dO4o" initialValue="1.0" xmi.id="5AobIftXvNuF" visibility="public"/>
          <UML:Attribute name="maxDpAlpha" isSpecification="false" type="u71pLpNi8dO4o" initialValue="50.0" xmi.id="5d9sC8NkroNf" visibility="public"/>
          <UML:Attribute name="minDpGamma" isSpecification="false" type="u71pLpNi8dO4o" initialValue="1.0" xmi.id="clNqWV7bduAv" visibility="public"/>
          <UML:Attribute name="maxDpGamma" isSpecification="false" type="u71pLpNi8dO4o" initialValue="10.0" xmi.id="X3TSOLhSxqK9" visibility="public"/>
          <UML:Attribute name="minAlphaDecay" isSpecification="false" type="u71pLpNi8dO4o" initialValue="0.05" xmi.id="zftoTGR40msW" visibility="public"/>
          <UML:Attribute name="maxAlphaDecay" isSpecification="false" type="u71pLpNi8dO4o" initialValue="0.80" xmi.id="I05tsFpPJGrf" visibility="public"/>
          <UML:Attribute name="minDepth" isSpecification="false" type="umWlKwntyInGn" initialValue="0" xmi.id="bY7YNPfK4Y6W" visibility="public"/>
          <UML:Attribute name="maxDepth" isSpecification="false" type="umWlKwntyInGn" initialValue="15" xmi.id="nYanKSHaQMSI" visibility="public"/>
          <UML:Attribute name="dpAlpha" isSpecification="false" type="u71pLpNi8dO4o" initialValue="1.0" xmi.id="bHhsXWY63ddQ" visibility="public"/>
          <UML:Attribute name="dpGamma" isSpecification="false" type="u71pLpNi8dO4o" initialValue="1.0" xmi.id="1Ii5poZaK7Ld" visibility="public"/>
          <UML:Attribute name="alphaDecay" isSpecification="false" type="u71pLpNi8dO4o" initialValue="1.0" xmi.id="YcByydFXuuQP" visibility="public"/>
          <UML:Attribute name="data" isSpecification="false" type="ummfz05vKgnuN" initialValue="None" xmi.id="RwUUZ7saNaeC" visibility="public"/>
          <UML:Attribute name="dataNum" isSpecification="false" type="umWlKwntyInGn" initialValue="0" xmi.id="MBkhJ5KrhVnf" visibility="public"/>
          <UML:Attribute name="root" isSpecification="false" type="uYqsswCrgbtMr" initialValue="{&#xa;            'node': rootNode,&#xa;            'main': boundbeta(1.0, dpAlpha) if self.minDepth == 0 else 0.0,&#xa;            'sticks': empty((0, 1)),&#xa;            'children': []&#xa;        }" xmi.id="70D1vbPKXtm4" visibility="public"/>
          <UML:Attribute name="assignments" isSpecification="false" type="ummfz05vKgnuN" initialValue="[]" xmi.id="yedLCFWYQGDh" visibility="public"/>
          <UML:Operation name="__init__" isQuery="false" isAbstract="false" comment=" data.shape[0] #shankar" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="5kGsLUKtY7y8" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="OZAY7UICEX3X"/>
            <UML:Parameter name=";" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="4wM3VlGpQydu" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="add_data" isQuery="false" isAbstract="false" comment=" data.shape[0] #shankar shankar    def clear_data(self):        dims = self.data.shape[1]        for n in range(self.dataNum):            self.assignments[n].remove_datum(n)        self.assignments = []        self.data        = empty((0,dims))        self.dataNum    = 0" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="1NQXUMfWJ1Zm" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="gx1sU4PTRo0u"/>
            <UML:Parameter name="data" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="knbAmC28lCeq" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="resample_node_params" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="AdQRe0BOlmWX" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="bfA2R8uclL1N"/>
            <UML:Parameter name="iters" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="wYdhjIYNDZGh" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="resample_assignments" isQuery="false" isAbstract="false" comment=" Get an initial uniform variate. shankar: to make root node empty###################################  Record most likely copy number  #################################### here -float(&quot;Inf&quot;) means the situation restricted temporary fix only!!!!!!" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="LDl4zFawlDbU" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="T7qge6LFjTG9"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="cull_tree" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="bAlKVkhoxQrv" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="fRrRcQt6Wjm8"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="resample_sticks" isQuery="false" isAbstract="false" comment=" shankar Resample the main break. to make root node empty (shankar)" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="n6OVZce9kNTE" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="7B05br0FIpev"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="resample_stick_orders" isQuery="false" isAbstract="false" comment=" 每一phi stick 的实际长度 此处添加了剩余空间的长度 每一个空间所占用的比重 随机获得一个位置，此位置之前完整空间的个数 此处minDepth 应该是手动控制的 Immediately resample sticks. print >>sys.stderr, &quot;WARNING: Reached maximum depth.&quot; Rescale the uniform variate to the remaining interval. Perhaps break sticks out appropriately. shankar 返回两个向量graph: { title:            &quot;TSSB Graph&quot;  \&#xa;                                portsharing:      no            \&#xa;                                smanhattanedges:  yes           \&#xa;                                equalydist:       yes           \&#xa;                                layout_algorithm: tree          \&#xa;                                node.fontname:    &quot;helvR8&quot;      \&#xa;node.height:      25node: { label:&quot;%0.5f&quot; title:&quot;%s&quot; width:%d}node: {  label:&quot;%0.5f&quot; title:&quot;%s&quot; width:%d}edge: { source:&quot;%s&quot; target:&quot;%s&quot; anchor:1}}" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="DX1jHls2pEXP" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="oBYYWzmeAnjk"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class name="StripeNode" isAbstract="false" isSpecification="false" isRoot="false" namespace="9sJ8Cwi2yr7x" isLeaf="false" xmi.id="HsxkXAv3zJPl" visibility="public">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="eE82PToySQiR"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute name="initMean" isSpecification="false" type="u71pLpNi8dO4o" initialValue="0.5" xmi.id="wSMQ5K1XYAqH" visibility="public"/>
          <UML:Attribute name="minConc" isSpecification="false" type="u71pLpNi8dO4o" initialValue="0.01" xmi.id="FIUNKiltoY1X" visibility="public"/>
          <UML:Attribute name="maxConc" isSpecification="false" type="u71pLpNi8dO4o" initialValue="0.1" xmi.id="ajRdnoQkEm8J" visibility="public"/>
          <UML:Operation name="__init__" isQuery="false" isAbstract="false" comment=" pi is a first-class citizen used in MH&#x9;to store old state set of nodes from root to this node" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="nKiEjQfB21Gh" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="FB9cVfNIy3Uf"/>
            <UML:Parameter name="parent" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="LeeY1IIUq5xg" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="conc" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="RAqT949Uin0h" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="3IBsL6WZHfBk"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="kill" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="JW1HYVuzfkRm" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="maFULF9MWICp"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="logprob" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="PiOgMXPf2Qua" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="mtAGBM5a5SFP"/>
            <UML:Parameter name="x" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="voXZWwJIWYkp" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="logprob_restricted" isQuery="false" isAbstract="false" comment=" 此处添加time stamp 的限制 在投掷过程中，如果出现一下情况，需要重新投掷 如果与该结点内的tag不一致为log(0) 如果tag小于其所有父结点任意一个或大于子结点任意一个为log(0) 如果出现结点内部的stripe的gap过于靠近######################################################  here -float(&quot;Inf&quot;) means the situation restricted  #######################################################" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="xe4z4wXxk3WE" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="oQprq2GngIli"/>
            <UML:Parameter name="x" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="zoUUMEJ65RKG" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="__is_good_pedigree" isQuery="false" isAbstract="false" comment="is the time tag descending along the pedigree?&#xa;        @return:  Flag&#xa;        @rtype :  bool&#xa;" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="EIdwL8AJwenG" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="q4NvWh9I5w9v"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="__is_good_tags" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="yNhcfSIriwn2" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="4xLyZ6ENAZIe"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="__is_good_gaps" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="FRwKM3EKQtx5" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="UOWdxoHCEEVa"/>
            <UML:Parameter name="x" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="LFw39h5DcOB9" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="complete_logprob" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="Hjugcpjv3ewC" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="L0OyOX7tveUt"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="__find_neighbor_datum_n" isQuery="false" isAbstract="false" comment=" 对当前node中的stripe进行排序，计算gap" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="Ql3exYCDF5tp" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="zfuvHOmi8nK5"/>
            <UML:Parameter name="x" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uckvGf6cfUY3" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="__is_good_gap" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="MVIZaBPSo7O2" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="xLDlezoMYaAu"/>
            <UML:Parameter name="lowerNode" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="mUePwATvqLo5" visibility="private"/>
            <UML:Parameter name="upperNode" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="iYlqM4tiZCF7" visibility="private"/>
            <UML:Parameter name="position" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="LeZ7kvAUNmuH" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class name="config" isAbstract="false" isSpecification="false" isRoot="false" namespace="9sJ8Cwi2yr7x" isLeaf="false" xmi.id="wZfl9IpxPNAm" visibility="public">
         <UML:Classifier.feature>
          <UML:Attribute name="MH_ITR" isSpecification="false" type="umWlKwntyInGn" xmi.id="A5STWBlDX9Cl" visibility="public"/>
          <UML:Attribute name="MH_STD" isSpecification="false" type="u71pLpNi8dO4o" xmi.id="fPOf4z0yWfjf" visibility="public"/>
          <UML:Attribute name="N_STRIPE_DATA" comment="no. of data points" isSpecification="false" type="umWlKwntyInGn" xmi.id="xWdKtn74qXVK" visibility="public"/>
          <UML:Attribute name="NNODES" comment="no. of nodes in the tree" isSpecification="false" type="umWlKwntyInGn" xmi.id="gFXDOkw37KiB" visibility="public"/>
          <UML:Attribute name="TREE_HEIGHT" isSpecification="false" type="umWlKwntyInGn" xmi.id="Hj7lOrRKL2eF" visibility="public"/>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class name="nodecpp" isAbstract="false" isSpecification="false" isRoot="false" namespace="9sJ8Cwi2yr7x" isLeaf="false" xmi.id="b6p8i1jw56Mm" visibility="public"/>
        <UML:Class name="node" isAbstract="false" isSpecification="false" isRoot="false" namespace="9sJ8Cwi2yr7x" isLeaf="false" xmi.id="njJeEmyu1U5O" visibility="public">
         <UML:Classifier.feature>
          <UML:Attribute name="id" isSpecification="false" type="umWlKwntyInGn" xmi.id="E1RJJ8TYraKD" visibility="public"/>
          <UML:Attribute name="param" isSpecification="false" type="uHFCB0pGxSum2" xmi.id="PjVllAyYrFA6" visibility="public"/>
          <UML:Attribute name="pi" isSpecification="false" type="uHFCB0pGxSum2" xmi.id="1901b6Pn5o6P" visibility="public"/>
          <UML:Attribute name="param1" comment="dummy" isSpecification="false" type="uHFCB0pGxSum2" xmi.id="wZvl8FzVyUEh" visibility="public"/>
          <UML:Attribute name="pi1" isSpecification="false" type="uHFCB0pGxSum2" xmi.id="cCGUROYRVYS6" visibility="public"/>
          <UML:Attribute name="ndata" isSpecification="false" type="umWlKwntyInGn" xmi.id="cptgdy3aVyLb" visibility="public"/>
          <UML:Attribute name="dids" isSpecification="false" type="u12pHNK4FPzNZ" xmi.id="PiF6vCgxEjdD" visibility="public"/>
          <UML:Attribute name="nchild" isSpecification="false" type="umWlKwntyInGn" xmi.id="vX7IFQn7mgQE" visibility="public"/>
          <UML:Attribute name="cids" comment="children ids" isSpecification="false" type="u12pHNK4FPzNZ" xmi.id="zxqrAWUT5nSa" visibility="public"/>
          <UML:Attribute name="ht" isSpecification="false" type="umWlKwntyInGn" xmi.id="2IS08TLOo3td" visibility="public"/>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class name="datum" isAbstract="false" isSpecification="false" isRoot="false" namespace="9sJ8Cwi2yr7x" isLeaf="false" xmi.id="0YqEhB1f8pUG" visibility="public">
         <UML:Classifier.feature>
          <UML:Attribute name="id" isSpecification="false" type="umWlKwntyInGn" xmi.id="LzhOm7zpPPnX" visibility="public"/>
          <UML:Attribute name="a" comment="vector&lt;int> segs_idx;" isSpecification="false" type="q7teAkFAH6Mw" xmi.id="FNbLB6aU3Htp" visibility="public"/>
          <UML:Attribute name="b" isSpecification="false" type="q7teAkFAH6Mw" xmi.id="PscmFOI6VBif" visibility="public"/>
          <UML:Attribute name="tumor_reads_num" isSpecification="false" type="umWlKwntyInGn" xmi.id="uynB287FVhae" visibility="public"/>
          <UML:Attribute name="normal_reads_num" isSpecification="false" type="umWlKwntyInGn" xmi.id="l89oQ2bnsEZ7" visibility="public"/>
          <UML:Attribute name="baseline_label" isSpecification="false" type="uzuVHgqUUOsNA" xmi.id="crD51wivsT4s" visibility="public"/>
          <UML:Attribute name="copy_number" comment="用于保存param时刻对应的copy_number" isSpecification="false" type="umWlKwntyInGn" xmi.id="bB75sfjdosPC" visibility="public"/>
          <UML:Attribute name="genotype" comment="free it before delete struct&#xa;(用于保存param时刻对应的genotype)" isSpecification="false" type="udSiblrLAI3pw" xmi.id="s1ziDWqpM1sL" visibility="public"/>
          <UML:Operation name="log_ll" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="vaEl3IdfRkiI" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="uHFCB0pGxSum2" xmi.id="DMlv46h353Rn"/>
            <UML:Parameter name="phi" value="" isSpecification="false" type="uHFCB0pGxSum2" xmi.id="ORtCIJMAKLtX" visibility="private"/>
            <UML:Parameter name="cgn" value="" isSpecification="false" type="ukaEiNMZkb27L" xmi.id="phK9gCUckiNl" visibility="private"/>
            <UML:Parameter name="max_copy_number" value="" isSpecification="false" type="umWlKwntyInGn" xmi.id="yzOQh6i5YbFo" visibility="private"/>
            <UML:Parameter name="baseline" value="" isSpecification="false" type="uHFCB0pGxSum2" xmi.id="ubyCupjkU3tB" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="log_likelihood_RD_BAF" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="A7sgi8UbhQnc" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="uHFCB0pGxSum2" xmi.id="NoxwPdW8v9uH"/>
            <UML:Parameter name="phi" value="" isSpecification="false" type="uHFCB0pGxSum2" xmi.id="EVMiYDrkZcfc" visibility="private"/>
            <UML:Parameter name="cgn" value="" isSpecification="false" type="ukaEiNMZkb27L" xmi.id="jKdoO4ZWBSCr" visibility="private"/>
            <UML:Parameter name="cns" value="" isSpecification="false" type="ul3gI0PpS7ndb" xmi.id="YeQF2ErGjBxF" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Generalization name="" discriminator="" isSpecification="false" namespace="Logical_View" xmi.id="JcA0AsZJlsPx" child="FkigjR3eciNM" visibility="public" parent="mlZ3aMGT3CUh"/>
      <UML:Generalization name="" discriminator="" isSpecification="false" namespace="Logical_View" xmi.id="eE82PToySQiR" child="HsxkXAv3zJPl" visibility="public" parent="FkigjR3eciNM"/>
      <UML:Generalization name="" discriminator="" isSpecification="false" namespace="Logical_View" xmi.id="lpe8ZWQWpbFS" child="e4aBEpIZSrfA" visibility="public" parent="mlZ3aMGT3CUh"/>
      <UML:Dependency name="" client="njJeEmyu1U5O" isSpecification="false" namespace="Logical_View" supplier="ui5OKutKIDDJW" xmi.id="EI7AlLsNW6px" visibility="public"/>
      <UML:Dependency name="" client="njJeEmyu1U5O" isSpecification="false" namespace="Logical_View" supplier="ui5OKutKIDDJW" xmi.id="ROZxUNtziFza" visibility="public"/>
      <UML:Dependency name="" client="njJeEmyu1U5O" isSpecification="false" namespace="Logical_View" supplier="ui5OKutKIDDJW" xmi.id="3t7pvy6JeJPa" visibility="public"/>
      <UML:Dependency name="" client="njJeEmyu1U5O" isSpecification="false" namespace="Logical_View" supplier="ui5OKutKIDDJW" xmi.id="QIT5Zqf3uChf" visibility="public"/>
      <UML:Class name="ArrayXd" isAbstract="false" isSpecification="false" isRoot="false" namespace="Logical_View" isLeaf="false" xmi.id="q7teAkFAH6Mw" visibility="public"/>
      <UML:Package name="postprocess" isAbstract="false" isSpecification="false" isRoot="false" namespace="Logical_View" isLeaf="false" xmi.id="FjULOATWWpU4" visibility="public">
       <UML:Namespace.ownedElement>
        <UML:Class name="ResultGenerator" isAbstract="false" isSpecification="false" isRoot="false" namespace="FjULOATWWpU4" isLeaf="false" xmi.id="lq63br8VwVLS" visibility="public">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="Xx16sdIQpDzv"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation name="generate" isQuery="false" isAbstract="false" comment=" cnv_logical_physical_mapping = json.loads(reader.read_extra_file('cnv_logical_physical_mapping.json')) File not present in archive, likely because it originates from an older run. 注意此处是否添加add stripe name" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="OvhE9f9CUXkA" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="yHFO4sfRoLfv"/>
            <UML:Parameter name="tree_file" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="kFZln3NCbVXe" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_summarize_all_pops" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="0m7UKqc239lq" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="UbLIwyBwkIP2"/>
            <UML:Parameter name="tree_file" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="A82ldaQbrdyu" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_summarize_pops" isQuery="false" isAbstract="false" comment=" Note that there will be an entry in mut_assignments for a given subclone only if it has at least one SSM or CNV. This assumption holds true for all PhyloWGS trees, so one can ascertain the number of cancerous populations via len(mut_assignments). vertex.params represents phis (i.e., population freqs) associated with each sample. Preorder traversal is consistent with printo_latex.py, meaning index values should correspond to same vertices. Visit children in order of decreasing phi." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="6z2A9n0Hw33X" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="XxVGEsIKqJUz"/>
            <UML:Parameter name="tree" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="bR7Q23IWebmZ" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_list_mutations" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="4TGyUHW3gbRj" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="5QC1jHAtdcsF"/>
            <UML:Parameter name="tree" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="ekFGJ0prxJ79" visibility="private"/>
            <UML:Parameter name="include_stripe_names" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="BNUzewwjPBfr" visibility="private"/>
            <UML:Parameter name=";" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="S9u9kMqM45dL" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class name="ResultLoader" isAbstract="false" isSpecification="false" isRoot="false" namespace="FjULOATWWpU4" isLeaf="false" xmi.id="Xpyw0cmQlgXU" visibility="public">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="0Nq4RRQUqaTX"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation name="__init__" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="iZDW8g4yIQPX" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="uLVGRRlRoLjT"/>
            <UML:Parameter name="tree_summary_fn" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="f5IhiwhxO6wV" visibility="private"/>
            <UML:Parameter name="mutation_list_fn" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="2OcJfl2MLDsR" visibility="private"/>
            <UML:Parameter name=";" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="tuPCLmh0rxga" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_convert_keys_to_ints" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="7jnQwgppYEzt" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="IWi6rRYwALK4"/>
            <UML:Parameter name="dic" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="0gspeYNWttmJ" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_load_tree_data" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="z9uYLrPJYH9A" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="nUefLOyeueik"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_load_assignments" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="4GeEczHZ6B7S" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="xLR3UYTU3F1o"/>
            <UML:Parameter name="mutf" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="0XlYmsgaNIDi" visibility="private"/>
            <UML:Parameter name="tree_idx" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="h9Kbn3JrHy4r" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="load_mut_assignments" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="5fOQyZ9fiREV" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="Zwga9hOENkfL"/>
            <UML:Parameter name="tree_idx" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="SYNkWPbRk2SE" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="load_all_mut_assignments" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="Jmy1BAVeiqMC" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="Fvbzw4BVyr35"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="load_all_mut_assignments_into_memory" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="XQJuAwDSg9Rq" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="JwU2moC1joyf"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class name="ResultMunger" isAbstract="false" isSpecification="false" isRoot="false" namespace="FjULOATWWpU4" isLeaf="false" xmi.id="q78ozCtUcAMk" visibility="public">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="5ZCjgcZzY1zJ"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation name="__init__" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="evMCxLTkVmJT" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="IOMXonLQ5nhO"/>
            <UML:Parameter name="tree_summaries" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="1UFNpphMGSRq" visibility="private"/>
            <UML:Parameter name="mutlist" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="cIUIKqdymz9j" visibility="private"/>
            <UML:Parameter name="mutass" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="IcRmMlFNFTj2" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_convert_keys_to_ints" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="eKKQHR7Z2YLO" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="d62huh5YzPwG"/>
            <UML:Parameter name="dic" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="HZkU0RUGpqnd" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="remove_small_nodes" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="r1nrX7FnexFe" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="U0ETN8jC9U3f"/>
            <UML:Parameter name="min_stripes" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="OkuBagnEmpvg" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="remove_superclones" isQuery="false" isAbstract="false" comment=" Ignore polyclonal trees, since it's not clear how to handle them. Check assumption about node numbering (which isn't really important). Either tree doesn't have subclones, or it has multiple subclones. Ignore trees with >1 child coming off clonal node, since they don't fit our definition of superclonal. Check assumption about node numbering (which isn't really important). At this point, &quot;clone&quot; is the superclone to remove, and &quot;child&quot; will be the new clonal node. Prevent division by zero. 注意，此处不将data个数作为考虑 if not (float(clone['num_ssms']) / child['num_ssms'] &lt;= 0.33): Child must have at least 3 times the number of SSMs as parent to be considered superclonal tree.print(tree_idx, 'differential in num_ssms too small', clone['num_ssms'], child['num_ssms']) Cellular prevalences of clusters must be within 10%.print(tree_idx, 'CPs too dissimilar', clone['num_ssms'], child['num_ssms']) Revise cellular prevalence to be weighted mean of both nodes. Cellular prevalence is a vector, so we must brought it into NumPy so we can do scalar division on it. We must, however, convert it back to a list so we can dump it to JSON. Remove the &quot;true&quot; clonal node and move its mutations to the superclonal node. This is easier than the reverse, as it means that idx=1 always points to the same node, and this function doesn't refer to any other nodes. Otherwise, I'd be referring to the clonal idx=2 node, which becomes idx=1 partway through." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="bHSDEhrdRmo2" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="QbGCO9ts75LS"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="remove_polyclonal_trees" isQuery="false" isAbstract="false" comment=" Not polyclonal." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="C2fLXg06vQKA" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="89lZtXZJ7nWV"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_renumber_nodes" isQuery="false" isAbstract="false" comment=" We may have removed populations beyond max(subclone_idxs), but as these occurred *after* the highest-indexed of the remaining populations, renumbering is not necessary for them -- i.e., nothing in the tree is affected by their removal. Node was removed. Node not removed, but something before it was, so renumber. By proceeding in sorted order, we guarantee we're not overwriting a single element twice, which would give the wrong values. Why? Since the new_idx of a node is always less than its original index, we guarantee that we only move it &quot;down&quot;. Since we proceed in sorted order, we have already moved any nodes that preceded it, so we don't overwrite them. No preceding nodes were removed, so do nothing. Node remains, so must renumber it. We must also renumber children in the structure -- just renumbering parents isn't enough." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="wNM3SfUei9yD" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="jnsRuocgksN5"/>
            <UML:Parameter name="tree_idx" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="nwHhNZrTja0c" visibility="private"/>
            <UML:Parameter name="subclone_idx_map" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="7awENQkIn4JF" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_correct_mut_counts" isQuery="false" isAbstract="false" comment=" Note that only mutass entries for subclones with (> 0 SSMs or > 0 CNVs) will exist. Thus, no mutass entry will exist for node 0, as it never has SSMs or CNVs." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="REYAoZlt7h8S" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="dqeiVkAcatUU"/>
            <UML:Parameter name="populations" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="7qkuu27dpx3k" visibility="private"/>
            <UML:Parameter name="tree_idx" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="ldQUVnZxz65l" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_remove_nodes" isQuery="false" isAbstract="false" comment=" Remove summary stats about population. Mark node as removed. Use subclone_idx_map to track both node removals and renumberings." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="va6iV9SHmqjI" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="U1JbvzGZpVoW"/>
            <UML:Parameter name="nodes" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="bIDYMIJx9wfe" visibility="private"/>
            <UML:Parameter name="tree_idx" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="gqFHjhjcHpKn" visibility="private"/>
            <UML:Parameter name="mut_destination" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="wl2jZlzB1CjM" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_find_small_nodes" isQuery="false" isAbstract="false" comment=" This is a count of SSMs, so use it without adjustment (but ensure it's an int). This is a fraction of total SSMs. Ensure this node's phi is &lt;= the phi of its preceding sibling node, if any exists." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="CY6SLQDI9Fzj" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="hCcGnmjPEmm9"/>
            <UML:Parameter name="tree_idx" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="yyux8bJaadCT" visibility="private"/>
            <UML:Parameter name="populations" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="cS3Pvrt7NzXj" visibility="private"/>
            <UML:Parameter name="min_stripes" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="NkzXzyGvu8t2" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_remove_nodes_from_tree_structure" isQuery="false" isAbstract="false" comment=" Remove node from parent Assign removed node's children to their grandparent Sort, since order may not be preserved. If no children remain after deletion, remove child list from tree." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="cfFzeki0VhXS" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="EahjIC9vvXTm"/>
            <UML:Parameter name="subclonal_idx_map" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="flOXrFXYR8oF" visibility="private"/>
            <UML:Parameter name=";" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="uYc9IPGu4Tuh" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_move_muts_to_best_node" isQuery="false" isAbstract="false" comment=" Note this doesn't take into account CNVs that may skew the relationship between VAF and phi -- we assume that there is one maternal and one paternal copy, and that only one of these is mutated. Don't allow assignments to the non-cancerous root node." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="myKC67P1d1Av" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="0cJEN4lKvDAJ"/>
            <UML:Parameter name="muts" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="OOoRqg84GnlW" visibility="private"/>
            <UML:Parameter name="mutass" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="xsSsOtc8rwKy" visibility="private"/>
            <UML:Parameter name="populations" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="1hzeh7Y5TKWH" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_move_muts_to_clonal_node" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="4mRthkrgRoJ8" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="gecYGp5csHQj"/>
            <UML:Parameter name="muts" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="tpCL9gc7HwLe" visibility="private"/>
            <UML:Parameter name="mutass" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="y6xtH5CLseFX" visibility="private"/>
            <UML:Parameter name="populations" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="M4DnrWukL65U" visibility="private"/>
            <UML:Parameter name="structure" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="kgZ1cvga1bUH" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_reassign_muts" isQuery="false" isAbstract="false" comment=" This ensures we're not improperly overwriting assignments. Node was removed. This will comprise both SSMs and CNVs." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="nKT9OXb8DBAn" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="R1stwSdf5yH0"/>
            <UML:Parameter name="tree_idx" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="4oN3PpK3Uvck" visibility="private"/>
            <UML:Parameter name="subclone_idx_map" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="kfNcwlLi3nrR" visibility="private"/>
            <UML:Parameter name="destination" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="IQXTbfGfRbjo" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class name="JsonWriter" isAbstract="false" isSpecification="false" isRoot="false" namespace="FjULOATWWpU4" isLeaf="false" xmi.id="U83F8ANlFykZ" visibility="public">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="9MdhsjMvIjoV"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation name="__init__" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="m1Y2kMXSK6M8" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="eMSQQ73C8cFq"/>
            <UML:Parameter name="dataset_name" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="mpNZKsX0hDuV" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="write_mutlist" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="wkIHodNbSiAm" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="67xYo7JMn4ae"/>
            <UML:Parameter name="mutlist" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="YfnGthlV1CvR" visibility="private"/>
            <UML:Parameter name="mutlist_outfn" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="JzcPbpDVZTmO" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="write_summaries" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="jM9kY5Ap2mCb" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="hOjdnAMKxRcl"/>
            <UML:Parameter name="summaries" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="bP68srUxwRTk" visibility="private"/>
            <UML:Parameter name="params" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="Xm5KqfwZz5IX" visibility="private"/>
            <UML:Parameter name="summaries_outfn" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="8SKAEWlnvqtm" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="write_mutass" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="4YL4edZm5uvH" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="YExb6sqUUsox"/>
            <UML:Parameter name="mutass" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="Qe2KUv49Hll5" visibility="private"/>
            <UML:Parameter name="mutass_outfn" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="v7PqW2caaxeC" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class name="IndexCalculator" isAbstract="false" isSpecification="false" isRoot="false" namespace="FjULOATWWpU4" isLeaf="false" xmi.id="kHtBanfQUzIm" visibility="public">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="24vEgMiv5BER"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation name="__init__" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="0vb36pUNVPBy" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="P2gQiv6gqiju"/>
            <UML:Parameter name="tree_summ" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="n3DVmalGfRHe" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_determine_pop_relations" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="VDHyaSuOT8rF" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="Xx9NdsF63X3d"/>
            <UML:Parameter name="tree_struct" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="gcWL3lyQneqT" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="_calc_index" isQuery="false" isAbstract="false" comment=" The maximum value of `index` will be `N(N - 1)`, as we exclude the diagonal. If we ignore the diagonal, then if we were to explicitly calculate the N*N matrices corresponding to each of the indices and then sum the matrices, every entry in the sum would be 1." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="xxzR5qekQA3T" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="6mN9HQnFNkgR"/>
            <UML:Parameter name="reltype" value="" isSpecification="false" type="udSiblrLAI3pw" xmi.id="t1uggi7BfGXG" visibility="private"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="calc_linearity_index" isQuery="false" isAbstract="false" comment=" Note that the matrix isn't symmetric -- if A is an ancestor of B, then we know that B is *not* an ancestor of A. The clustering and branching matrices are, however, symmetric. Thus, for this, we should be normalizing against (N choose 2) instead of (N permute 2); but since _calc_index() normalizes against the latter, we multiply by two to correct for this, since (N permute 2) = 2(N choose 2)." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="bKB1TETMGL1u" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="185hNcxTNIde"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="calc_branching_index" isQuery="false" isAbstract="false" isSpecification="false" isRoot="false" isLeaf="false" xmi.id="iOt48XVhsehJ" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="s8f6ReySn29A"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation name="calc_clustering_index" isQuery="false" isAbstract="false" comment=" Technically, in the clustering matrix, the diagonal should be 1's (since a mutation should be said to cluster with itself). But to keep the value in the denominator against which we normalize the same across all three indices, thereby ensuring that the sum of the three normalized indices will be 1, we force the diagonal to be zero -- which is why we add nssms(nssms - 1) rather than nssms^2 below. It's enough just to subtract the other two indices from one to calculate the branching index. However, calculating it independently and then checking it against that result gives more confidnece it's correct." isSpecification="false" isRoot="false" isLeaf="false" xmi.id="c5bzLCe4YV8h" visibility="public">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter kind="return" type="udSiblrLAI3pw" xmi.id="3bMtF3C59pAa"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Generalization name="" discriminator="" isSpecification="false" namespace="Logical_View" xmi.id="24vEgMiv5BER" child="kHtBanfQUzIm" visibility="public" parent="mlZ3aMGT3CUh"/>
      <UML:Generalization name="" discriminator="" isSpecification="false" namespace="Logical_View" xmi.id="9MdhsjMvIjoV" child="U83F8ANlFykZ" visibility="public" parent="mlZ3aMGT3CUh"/>
      <UML:Generalization name="" discriminator="" isSpecification="false" namespace="Logical_View" xmi.id="Xx16sdIQpDzv" child="lq63br8VwVLS" visibility="public" parent="mlZ3aMGT3CUh"/>
      <UML:Generalization name="" discriminator="" isSpecification="false" namespace="Logical_View" xmi.id="0Nq4RRQUqaTX" child="Xpyw0cmQlgXU" visibility="public" parent="mlZ3aMGT3CUh"/>
      <UML:Generalization name="" discriminator="" isSpecification="false" namespace="Logical_View" xmi.id="5ZCjgcZzY1zJ" child="q78ozCtUcAMk" visibility="public" parent="mlZ3aMGT3CUh"/>
     </UML:Namespace.ownedElement>
     <XMI.extension xmi.extender="umbrello">
      <diagrams>
       <diagram showpackage="1" snapy="25" linewidth="0" linecolor="#ff0000" snapcsgrid="0" canvasheight="2227.87" showops="1" canvaswidth="4410.19" showopsig="1" showstereotype="1" xmi.id="gfupzRjZDc4O" name="class diagram" usefillcolor="1" showgrid="0" snapx="25" textcolor="#000000" localid="-1" showattribassocs="1" showatts="1" showattsig="1" showscope="1" isopen="1" zoom="93.14999999999998" type="1" showpubliconly="0" documentation="" griddotcolor="#d3d3d3" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" backgroundcolor="#ffffff" snapgrid="0">
        <widgets>
         <classwidget showattributes="1" showattsigs="601" height="493" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="195.989" x="-1639.03" width="735" showstereotype="1" xmi.id="ue2UNyKwJRGYt" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="MCnLlpfsF1Et" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <classwidget showattributes="1" showattsigs="601" height="348" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="696.892" x="-402.62" width="223" showstereotype="1" xmi.id="u9lL7RaxBuDmk" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="K9ZrVHBmPNI3" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <classwidget showattributes="1" showattsigs="601" height="357" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="656.17" x="181.409" width="337" showstereotype="1" xmi.id="uGJAJHVksU5kD" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="vNY2ki06snPe" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <classwidget showattributes="1" showattsigs="601" height="221" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="61.8082" x="7.29834" width="547" showstereotype="1" xmi.id="uw5mZm9Nan99y" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="a5Uq4ihMpHDL" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <classwidget showattributes="1" showattsigs="601" height="170" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="-389.412" x="-943.637" width="544" showstereotype="1" xmi.id="ujk5BH4jpEXpe" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="YM5viLzdiVfS" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <packagewidget linewidth="0" usesdiagramusefillcolor="0" linecolor="#ff0000" height="60" fillcolor="#55ffff" isinstance="0" showstereotype="1" localid="MDE3grVpV0qu" textcolor="#000000" font="Sans Serif,9,-1,5,50,0,0,0,0,0" width="70" usesdiagramfillcolor="0" xmi.id="y4YEKZR3HDxZ" usefillcolor="1" x="-262.524" y="160.479"/>
         <packagewidget linewidth="0" usesdiagramusefillcolor="0" linecolor="#ff0000" height="60" fillcolor="#55ffff" isinstance="0" showstereotype="1" localid="wUttbhuPEH0y" textcolor="#000000" font="Sans Serif,9,-1,5,50,0,0,0,0,0" width="130" usesdiagramfillcolor="0" xmi.id="uXzRwZqek96LR" usefillcolor="1" x="-638.831" y="319.727"/>
         <packagewidget linewidth="0" usesdiagramusefillcolor="0" linecolor="#ff0000" height="60" fillcolor="#55ffff" isinstance="0" showstereotype="1" localid="nwGfxUGHfSKJ" textcolor="#000000" font="Sans Serif,9,-1,5,50,0,0,0,0,0" width="106" usesdiagramfillcolor="0" xmi.id="6P7UINCkpLgN" usefillcolor="1" x="-456.464" y="345.864"/>
         <packagewidget linewidth="0" usesdiagramusefillcolor="0" linecolor="#ff0000" height="60" fillcolor="#55ffff" isinstance="0" showstereotype="1" localid="Jo8mozeiTYb2" textcolor="#000000" font="Sans Serif,9,-1,5,50,0,0,0,0,0" width="70" usesdiagramfillcolor="0" xmi.id="jkowKqKr2XUN" usefillcolor="1" x="-557.41" y="174.184"/>
         <packagewidget linewidth="0" usesdiagramusefillcolor="0" linecolor="#ff0000" height="44" fillcolor="#55ffff" isinstance="0" showstereotype="1" localid="chxvWboj8nRN" textcolor="#000000" font="Sans Serif,9,-1,5,50,0,0,0,0,0" width="70" usesdiagramfillcolor="0" xmi.id="9sJ8Cwi2yr7x" usefillcolor="1" x="1092.58" y="-178.72"/>
         <classwidget showattributes="1" showattsigs="601" height="255" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="235.458" x="1193.59" width="478" showstereotype="1" xmi.id="HsxkXAv3zJPl" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="GYDPLw9vb6q7" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <classwidget showattributes="1" showattsigs="601" height="391" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="-3.66364" x="730.783" width="405" showstereotype="1" xmi.id="e4aBEpIZSrfA" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="feplRE9wVVIy" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#aaaa00" usesdiagramfillcolor="0"/>
         <floatingtext height="29" pretext="#" linewidth="0" linecolor="#ff0000" text="_parent" y="-175.074" x="1861.72" width="96" showstereotype="1" xmi.id="DCjnmPPZuF2Y" usefillcolor="1" usesdiagramusefillcolor="1" localid="HS5DaxUjRG4J" textcolor="none" isinstance="0" role="710" font="Monaco,14,-1,5,50,0,0,0,0,0" posttext="" fillcolor="none" usesdiagramfillcolor="1"/>
         <classwidget showattributes="1" showattsigs="601" height="425" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="-276.543" x="1297.53" width="224" showstereotype="1" xmi.id="FkigjR3eciNM" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="sAsKIbK06fi8" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <classwidget showattributes="1" showattsigs="601" height="246" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="252.173" x="1754.4" width="629" showstereotype="1" xmi.id="q78ozCtUcAMk" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="uoU0mk0WJiGd" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <packagewidget linewidth="0" usesdiagramusefillcolor="0" linecolor="#ff0000" height="44" fillcolor="#55ffff" isinstance="0" showstereotype="1" localid="DSFA9IhTZsHR" textcolor="#000000" font="Sans Serif,9,-1,5,50,0,0,0,0,0" width="83" usesdiagramfillcolor="0" xmi.id="FjULOATWWpU4" usefillcolor="1" x="1958.02" y="-361.728"/>
         <classwidget showattributes="1" showattsigs="601" height="93" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="-218.519" x="2113.58" width="529" showstereotype="1" xmi.id="U83F8ANlFykZ" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="jsjaIvQDjsBU" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <classwidget showattributes="1" showattsigs="601" height="127" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="-449.383" x="2200" width="330" showstereotype="1" xmi.id="kHtBanfQUzIm" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="cBytrEW2ejCl" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <classwidget showattributes="1" showattsigs="601" height="144" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="85.9775" x="1752.94" width="468" showstereotype="1" xmi.id="Xpyw0cmQlgXU" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="zsFYkUyRKh2d" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
         <classwidget showattributes="1" showattsigs="601" height="93" showopsigs="601" showpackage="1" linewidth="0" linecolor="#ff0000" y="-32.4732" x="1756.39" width="462" showstereotype="1" xmi.id="lq63br8VwVLS" usefillcolor="1" showoperations="1" usesdiagramusefillcolor="0" localid="cQoKIzmt8kmx" textcolor="#000000" showscope="1" isinstance="0" showpubliconly="0" font="Sans Serif,9,-1,5,50,0,0,0,0,0" fillcolor="#55ffff" usesdiagramfillcolor="0"/>
        </widgets>
        <messages/>
        <associations>
         <assocwidget widgetaid="ujk5BH4jpEXpe" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="2" totalcountb="2" widgetbid="uw5mZm9Nan99y" xmi.id="uc29pM9LvmIDX" usefillcolor="1" usesdiagramusefillcolor="0" visibilityA="2" textcolor="none" indexb="1" type="510" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="-399.637" starty="-219.412"/>
           <endpoint endx="7.29834" endy="61.8082"/>
          </linepath>
          <floatingtext height="29" pretext="#" linewidth="0" linecolor="#ff0000" text="segPool" y="69.667" x="-73.6667" width="96" showstereotype="1" xmi.id="nXNdmYyIs1Ea" usefillcolor="1" usesdiagramusefillcolor="1" localid="BdW3Rwfzz7p1" textcolor="none" isinstance="0" role="710" font="Monaco,14,-1,5,50,0,0,0,0,0" posttext="" fillcolor="none" usesdiagramfillcolor="1"/>
         </assocwidget>
         <assocwidget widgetaid="y4YEKZR3HDxZ" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="uw5mZm9Nan99y" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="0" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="-192.524" starty="191.146"/>
           <endpoint endx="7.29834" endy="191.146"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="y4YEKZR3HDxZ" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="ujk5BH4jpEXpe" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="0" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="-262.524" starty="160.479"/>
           <endpoint endx="-399.637" endy="-219.412"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="uXzRwZqek96LR" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="ue2UNyKwJRGYt" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="1" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="-638.831" starty="319.727"/>
           <endpoint endx="-904.028" endy="319.727"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="6P7UINCkpLgN" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="u9lL7RaxBuDmk" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="1" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="-405.092" starty="405.864"/>
           <endpoint endx="-402.62" endy="696.892"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="6P7UINCkpLgN" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="uGJAJHVksU5kD" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="1" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="-350.464" starty="405.864"/>
           <endpoint endx="181.409" endy="656.17"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="9sJ8Cwi2yr7x" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="HsxkXAv3zJPl" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="129" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="1162.58" starty="-134.72"/>
           <endpoint endx="1193.59" endy="235.458"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="9sJ8Cwi2yr7x" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="e4aBEpIZSrfA" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="35" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="1135.78" starty="-134.72"/>
           <endpoint endx="1135.78" endy="-3.66364"/>
          </linepath>
         </assocwidget>
         <assocwidget linewidth="0" usesdiagramusefillcolor="0" seqnum="" totalcountb="2" linecolor="#ff0000" fillcolor="#ffff00" indexa="1" textcolor="none" type="500" widgetbid="FkigjR3eciNM" totalcounta="2" font="Sans Serif,9,-1,5,50,0,0,0,0,0" indexb="1" widgetaid="HsxkXAv3zJPl" usesdiagramfillcolor="0" xmi.id="eE82PToySQiR" usefillcolor="1">
          <linepath layout="Polyline">
           <startpoint startx="1443.21" starty="235.458"/>
           <endpoint endx="1443.21" endy="148.457"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="9sJ8Cwi2yr7x" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="FkigjR3eciNM" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="35" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="1162.58" starty="-178.72"/>
           <endpoint endx="1297.53" endy="-178.72"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="FjULOATWWpU4" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="q78ozCtUcAMk" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="49" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="2041.02" starty="-317.728"/>
           <endpoint endx="2041.02" endy="252.173"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="FjULOATWWpU4" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="U83F8ANlFykZ" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="35" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="2041.02" starty="-317.728"/>
           <endpoint endx="2113.58" endy="-218.519"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="FjULOATWWpU4" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="kHtBanfQUzIm" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="35" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="2041.02" starty="-361.728"/>
           <endpoint endx="2200" endy="-361.728"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="FjULOATWWpU4" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="Xpyw0cmQlgXU" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="35" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="2041.02" starty="-317.728"/>
           <endpoint endx="2041.02" endy="85.9775"/>
          </linepath>
         </assocwidget>
         <assocwidget widgetaid="FjULOATWWpU4" linewidth="0" linecolor="#ff0000" seqnum="" changeabilityB="900" visibilityB="0" totalcountb="2" widgetbid="lq63br8VwVLS" usefillcolor="1" roleAdoc="" usesdiagramusefillcolor="35" visibilityA="0" textcolor="none" indexb="1" type="509" documentation="" totalcounta="2" changeabilityA="900" font="Sans Serif,9,-1,5,50,0,0,0,0,0" roleBdoc="" indexa="1" fillcolor="#ffff00" usesdiagramfillcolor="0">
          <linepath layout="Polyline">
           <startpoint startx="2041.02" starty="-317.728"/>
           <endpoint endx="2041.02" endy="-32.4732"/>
          </linepath>
         </assocwidget>
        </associations>
       </diagram>
      </diagrams>
     </XMI.extension>
    </UML:Model>
    <UML:Model name="Use Case View" isAbstract="false" isSpecification="false" isRoot="false" namespace="m1" isLeaf="false" xmi.id="Use_Case_View" visibility="public">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model name="Component View" isAbstract="false" isSpecification="false" isRoot="false" namespace="m1" isLeaf="false" xmi.id="Component_View" visibility="public">
     <UML:Namespace.ownedElement>
      <UML:Artifact name="mh.hpp" isAbstract="false" isSpecification="false" isRoot="false" namespace="Component_View" isLeaf="false" xmi.id="jOQ1EXDf0gbN" drawas="1" visibility="public"/>
      <UML:Artifact name="mh.cpp" isAbstract="false" isSpecification="false" isRoot="false" namespace="Component_View" isLeaf="false" xmi.id="BUnKuxASbafc" drawas="1" visibility="public"/>
     </UML:Namespace.ownedElement>
    </UML:Model>
    <UML:Model name="Deployment View" isAbstract="false" isSpecification="false" isRoot="false" namespace="m1" isLeaf="false" xmi.id="Deployment_View" visibility="public">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model name="Entity Relationship Model" isAbstract="false" isSpecification="false" isRoot="false" namespace="m1" isLeaf="false" xmi.id="Entity_Relationship_Model" visibility="public">
     <UML:Namespace.ownedElement/>
    </UML:Model>
   </UML:Namespace.ownedElement>
  </UML:Model>
 </XMI.content>
 <XMI.extensions xmi.extender="umbrello">
  <docsettings uniqueid="cQoKIzmt8kmx" viewid="gfupzRjZDc4O" documentation=""/>
  <listview>
   <listitem open="1" type="800" id="Views">
    <listitem open="1" type="821" id="Component_View">
     <listitem open="0" type="824" id="BUnKuxASbafc"/>
     <listitem open="0" type="824" id="jOQ1EXDf0gbN"/>
    </listitem>
    <listitem open="1" type="827" id="Deployment_View"/>
    <listitem open="1" type="836" id="Entity_Relationship_Model"/>
    <listitem open="1" type="801" id="Logical_View">
     <listitem open="0" type="813" id="q7teAkFAH6Mw"/>
     <listitem open="0" label="class diagram" type="807" id="gfupzRjZDc4O"/>
     <listitem open="0" type="830" id="Datatypes">
      <listitem open="1" type="829" id="uix1gU64a3sZ"/>
      <listitem open="1" type="829" id="uzuVHgqUUOsNA"/>
      <listitem open="1" type="829" id="ueBzwQtsNuTG5"/>
      <listitem open="1" type="829" id="uYqsswCrgbtMr"/>
      <listitem open="1" type="829" id="uHFCB0pGxSum2"/>
      <listitem open="1" type="829" id="u71pLpNi8dO4o"/>
      <listitem open="1" type="829" id="umWlKwntyInGn"/>
      <listitem open="1" type="829" id="ummfz05vKgnuN"/>
      <listitem open="0" type="829" id="MKia3ZGMdCBG"/>
      <listitem open="1" type="829" id="uu97xwcPFOTAP"/>
      <listitem open="1" type="829" id="um4g0O4AyVm32"/>
      <listitem open="1" type="829" id="5f6p294Nq9tG"/>
      <listitem open="1" type="829" id="mlZ3aMGT3CUh"/>
      <listitem open="1" type="829" id="eZlCcdka8Tp7"/>
      <listitem open="0" type="829" id="OYhdzGZJC2Xo"/>
      <listitem open="1" type="829" id="u6c9cSRFZuLPj"/>
      <listitem open="1" type="829" id="u9znWiA3DMiy1"/>
      <listitem open="1" type="829" id="uV8dPzOPW4rr1"/>
      <listitem open="1" type="829" id="u17IlZmV6bEEd"/>
      <listitem open="1" type="829" id="ur1d37BB0e23a"/>
      <listitem open="1" type="829" id="udSiblrLAI3pw"/>
      <listitem open="1" type="829" id="0XjFzIldpKe9"/>
      <listitem open="0" type="829" id="uNEO6u9NCHwOO"/>
      <listitem open="1" type="829" id="uVA7dJFQEXEGS"/>
      <listitem open="1" type="829" id="uJZGsShZWASQ1"/>
      <listitem open="0" type="829" id="uwT4w0sHIarL"/>
      <listitem open="1" type="829" id="u7eHdwBclnIvZ"/>
      <listitem open="0" type="829" id="dO3tLezjDeNC"/>
      <listitem open="1" type="829" id="us6Bmuol8EbrX"/>
      <listitem open="1" type="829" id="uBgX5B9QEpUG3"/>
     </listitem>
     <listitem open="1" type="818" id="9sJ8Cwi2yr7x">
      <listitem open="0" type="813" id="wZfl9IpxPNAm">
       <listitem open="0" type="814" id="A5STWBlDX9Cl"/>
       <listitem open="0" type="814" id="fPOf4z0yWfjf"/>
       <listitem open="0" type="814" id="xWdKtn74qXVK"/>
       <listitem open="0" type="814" id="gFXDOkw37KiB"/>
       <listitem open="0" type="814" id="Hj7lOrRKL2eF"/>
      </listitem>
      <listitem open="0" type="813" id="0YqEhB1f8pUG">
       <listitem open="0" type="814" id="FNbLB6aU3Htp"/>
       <listitem open="0" type="814" id="PscmFOI6VBif"/>
       <listitem open="0" type="814" id="crD51wivsT4s"/>
       <listitem open="0" type="814" id="bB75sfjdosPC"/>
       <listitem open="0" type="814" id="s1ziDWqpM1sL"/>
       <listitem open="0" type="814" id="LzhOm7zpPPnX"/>
       <listitem open="0" type="815" id="A7sgi8UbhQnc"/>
       <listitem open="0" type="815" id="vaEl3IdfRkiI"/>
       <listitem open="0" type="814" id="l89oQ2bnsEZ7"/>
       <listitem open="0" type="814" id="uynB287FVhae"/>
      </listitem>
      <listitem open="0" type="813" id="njJeEmyu1U5O">
       <listitem open="0" type="814" id="zxqrAWUT5nSa"/>
       <listitem open="0" type="814" id="PiF6vCgxEjdD"/>
       <listitem open="0" type="814" id="2IS08TLOo3td"/>
       <listitem open="0" type="814" id="E1RJJ8TYraKD"/>
       <listitem open="0" type="814" id="vX7IFQn7mgQE"/>
       <listitem open="0" type="814" id="cptgdy3aVyLb"/>
       <listitem open="0" type="814" id="PjVllAyYrFA6"/>
       <listitem open="0" type="814" id="wZvl8FzVyUEh"/>
       <listitem open="0" type="814" id="1901b6Pn5o6P"/>
       <listitem open="0" type="814" id="cCGUROYRVYS6"/>
      </listitem>
      <listitem open="0" type="813" id="FkigjR3eciNM">
       <listitem open="0" type="815" id="nNXYFwU22Plw"/>
       <listitem open="0" type="814" id="teZM9rKXsVz8"/>
       <listitem open="0" type="814" id="UG8Ll7RE74EO"/>
       <listitem open="0" type="815" id="R2fM36D08qE0"/>
       <listitem open="0" type="815" id="AQoHAurowaDg"/>
       <listitem open="0" type="815" id="vlHGlopdaMQX"/>
       <listitem open="0" type="814" id="Q1DTI03WYGvr"/>
       <listitem open="0" type="815" id="jgAy88Bj2HIE"/>
       <listitem open="0" type="815" id="c4O1PObsC2TC"/>
       <listitem open="0" type="815" id="DdO7zC0sxG8g"/>
       <listitem open="0" type="815" id="VqQOmMoOOBNm"/>
       <listitem open="0" type="815" id="Y5LkZi5yPL2c"/>
       <listitem open="0" type="815" id="6k42qxesWlDE"/>
       <listitem open="0" type="815" id="6UX6rI1Ih7XW"/>
       <listitem open="0" type="815" id="6E3Zec3qFRxE"/>
       <listitem open="0" type="815" id="xMjRHR1N95Nx"/>
       <listitem open="0" type="815" id="d3jPkE8fYq6n"/>
       <listitem open="0" type="815" id="RjI3D9nqBFUS"/>
       <listitem open="0" type="815" id="q8KwxZxON0ZY"/>
       <listitem open="0" type="815" id="1QmvyxbkGs1O"/>
       <listitem open="0" type="815" id="z2dEudc7jMo2"/>
       <listitem open="0" type="815" id="H5M1BzMueWtk"/>
       <listitem open="0" type="815" id="4Y7Li9spbPtT"/>
       <listitem open="0" type="814" id="V2d2GWrRZeEd"/>
      </listitem>
      <listitem open="0" type="813" id="b6p8i1jw56Mm"/>
      <listitem open="0" type="813" id="HsxkXAv3zJPl">
       <listitem open="0" type="815" id="Ql3exYCDF5tp"/>
       <listitem open="0" type="815" id="nKiEjQfB21Gh"/>
       <listitem open="0" type="815" id="MVIZaBPSo7O2"/>
       <listitem open="0" type="815" id="FRwKM3EKQtx5"/>
       <listitem open="0" type="815" id="EIdwL8AJwenG"/>
       <listitem open="0" type="815" id="yNhcfSIriwn2"/>
       <listitem open="0" type="815" id="Hjugcpjv3ewC"/>
       <listitem open="0" type="815" id="RAqT949Uin0h"/>
       <listitem open="0" type="814" id="wSMQ5K1XYAqH"/>
       <listitem open="0" type="815" id="JW1HYVuzfkRm"/>
       <listitem open="0" type="815" id="xe4z4wXxk3WE"/>
       <listitem open="0" type="815" id="PiOgMXPf2Qua"/>
       <listitem open="0" type="814" id="ajRdnoQkEm8J"/>
       <listitem open="0" type="814" id="FIUNKiltoY1X"/>
      </listitem>
      <listitem open="0" type="813" id="e4aBEpIZSrfA">
       <listitem open="0" type="815" id="5kGsLUKtY7y8"/>
       <listitem open="0" type="815" id="1NQXUMfWJ1Zm"/>
       <listitem open="0" type="814" id="YcByydFXuuQP"/>
       <listitem open="0" type="814" id="yedLCFWYQGDh"/>
       <listitem open="0" type="815" id="bAlKVkhoxQrv"/>
       <listitem open="0" type="814" id="RwUUZ7saNaeC"/>
       <listitem open="0" type="814" id="MBkhJ5KrhVnf"/>
       <listitem open="0" type="814" id="bHhsXWY63ddQ"/>
       <listitem open="0" type="814" id="1Ii5poZaK7Ld"/>
       <listitem open="0" type="814" id="I05tsFpPJGrf"/>
       <listitem open="0" type="814" id="nYanKSHaQMSI"/>
       <listitem open="0" type="814" id="5d9sC8NkroNf"/>
       <listitem open="0" type="814" id="X3TSOLhSxqK9"/>
       <listitem open="0" type="814" id="zftoTGR40msW"/>
       <listitem open="0" type="814" id="bY7YNPfK4Y6W"/>
       <listitem open="0" type="814" id="5AobIftXvNuF"/>
       <listitem open="0" type="814" id="clNqWV7bduAv"/>
       <listitem open="0" type="815" id="LDl4zFawlDbU"/>
       <listitem open="0" type="815" id="AdQRe0BOlmWX"/>
       <listitem open="0" type="815" id="DX1jHls2pEXP"/>
       <listitem open="0" type="815" id="n6OVZce9kNTE"/>
       <listitem open="0" type="814" id="70D1vbPKXtm4"/>
      </listitem>
     </listitem>
     <listitem open="1" type="818" id="FjULOATWWpU4">
      <listitem open="0" type="813" id="kHtBanfQUzIm">
       <listitem open="0" type="815" id="0vb36pUNVPBy"/>
       <listitem open="0" type="815" id="xxzR5qekQA3T"/>
       <listitem open="0" type="815" id="VDHyaSuOT8rF"/>
       <listitem open="0" type="815" id="iOt48XVhsehJ"/>
       <listitem open="0" type="815" id="c5bzLCe4YV8h"/>
       <listitem open="0" type="815" id="bKB1TETMGL1u"/>
      </listitem>
      <listitem open="0" type="813" id="U83F8ANlFykZ">
       <listitem open="0" type="815" id="m1Y2kMXSK6M8"/>
       <listitem open="0" type="815" id="4YL4edZm5uvH"/>
       <listitem open="0" type="815" id="wkIHodNbSiAm"/>
       <listitem open="0" type="815" id="jM9kY5Ap2mCb"/>
      </listitem>
      <listitem open="0" type="813" id="lq63br8VwVLS">
       <listitem open="0" type="815" id="4TGyUHW3gbRj"/>
       <listitem open="0" type="815" id="0m7UKqc239lq"/>
       <listitem open="0" type="815" id="6z2A9n0Hw33X"/>
       <listitem open="0" type="815" id="OvhE9f9CUXkA"/>
      </listitem>
      <listitem open="0" type="813" id="Xpyw0cmQlgXU">
       <listitem open="0" type="815" id="iZDW8g4yIQPX"/>
       <listitem open="0" type="815" id="7jnQwgppYEzt"/>
       <listitem open="0" type="815" id="4GeEczHZ6B7S"/>
       <listitem open="0" type="815" id="z9uYLrPJYH9A"/>
       <listitem open="0" type="815" id="XQJuAwDSg9Rq"/>
       <listitem open="0" type="815" id="Jmy1BAVeiqMC"/>
       <listitem open="0" type="815" id="5fOQyZ9fiREV"/>
      </listitem>
      <listitem open="0" type="813" id="q78ozCtUcAMk">
       <listitem open="0" type="815" id="evMCxLTkVmJT"/>
       <listitem open="0" type="815" id="eKKQHR7Z2YLO"/>
       <listitem open="0" type="815" id="REYAoZlt7h8S"/>
       <listitem open="0" type="815" id="CY6SLQDI9Fzj"/>
       <listitem open="0" type="815" id="myKC67P1d1Av"/>
       <listitem open="0" type="815" id="4mRthkrgRoJ8"/>
       <listitem open="0" type="815" id="nKT9OXb8DBAn"/>
       <listitem open="0" type="815" id="cfFzeki0VhXS"/>
       <listitem open="0" type="815" id="va6iV9SHmqjI"/>
       <listitem open="0" type="815" id="wNM3SfUei9yD"/>
       <listitem open="0" type="815" id="C2fLXg06vQKA"/>
       <listitem open="0" type="815" id="r1nrX7FnexFe"/>
       <listitem open="0" type="815" id="bHSDEhrdRmo2"/>
      </listitem>
     </listitem>
     <listitem open="0" type="818" id="uXzRwZqek96LR">
      <listitem open="0" type="813" id="ue2UNyKwJRGYt">
       <listitem open="0" type="814" id="upLBjDcJ87Ouq"/>
       <listitem open="0" type="814" id="ub6BbxBJo3fz6"/>
       <listitem open="0" type="814" id="uRrbT3Rkxjex0"/>
       <listitem open="0" type="814" id="uOmm95DFtBVgQ"/>
       <listitem open="0" type="815" id="uEdHnsvJrhNat"/>
       <listitem open="0" type="815" id="uBoAvLkCIcoXi"/>
       <listitem open="0" type="814" id="upXp9czTUL0xe"/>
       <listitem open="0" type="815" id="uQQfkOiECyNUY"/>
       <listitem open="0" type="815" id="lQbIq9WmdOI6"/>
       <listitem open="0" type="815" id="uEsDXghVASuXA"/>
       <listitem open="0" type="815" id="uzHochCDpJktp"/>
       <listitem open="0" type="815" id="ufnQ1OiN4y8FK"/>
       <listitem open="0" type="815" id="uL4R4gZf5wcl3"/>
       <listitem open="0" type="815" id="u6K9pxOBSEc4t"/>
       <listitem open="0" type="815" id="uL0G0B67OrvvF"/>
       <listitem open="0" type="814" id="uhPxQXga2VOMo"/>
       <listitem open="0" type="814" id="u1d44UzfOQhPh"/>
       <listitem open="0" type="814" id="uCPOG6Z9SB5he"/>
       <listitem open="0" type="814" id="u2L9XdJhRduzT"/>
       <listitem open="0" type="814" id="uU0K27Hdwgxf9"/>
       <listitem open="0" type="814" id="uv1ZOdlVYdhba"/>
       <listitem open="0" type="814" id="u0EYxyN4SO896"/>
       <listitem open="0" type="815" id="uJmEbWB1TC4UR"/>
       <listitem open="0" type="814" id="u5SQm4uOJ2BwY"/>
       <listitem open="0" type="814" id="uU4cCQHLVHibP"/>
       <listitem open="0" type="814" id="u0ju2PCTjG9lu"/>
       <listitem open="0" type="814" id="uy9C5gc5pGbDJ"/>
       <listitem open="0" type="814" id="u35xRZgkk9UpQ"/>
      </listitem>
      <listitem open="1" type="818" id="jkowKqKr2XUN">
       <listitem open="1" type="818" id="6P7UINCkpLgN">
        <listitem open="0" type="813" id="u9lL7RaxBuDmk">
         <listitem open="0" type="814" id="Rdk6snHOkO2H"/>
         <listitem open="0" type="814" id="BFLMyBTaamh6"/>
         <listitem open="0" type="814" id="XkM15lWT8tpL"/>
         <listitem open="0" type="814" id="vEzqy6pRhH2B"/>
         <listitem open="0" type="814" id="lsWLcBP7vk80"/>
         <listitem open="0" type="814" id="ParBVggPRxEp"/>
         <listitem open="0" type="814" id="IfUIUlJILFps"/>
         <listitem open="0" type="814" id="Wz7gX0hpBk6t"/>
         <listitem open="0" type="814" id="N0eowsbCV4U0"/>
         <listitem open="0" type="814" id="uWTHsFcHsKOk"/>
         <listitem open="0" type="814" id="bRJ7Vn5IWLOV"/>
         <listitem open="0" type="814" id="OPONFZ6IZy9H"/>
         <listitem open="0" type="814" id="ncxXZk61MsOb"/>
         <listitem open="0" type="814" id="plI8y50vzqAl"/>
         <listitem open="0" type="814" id="VdSdWHwwAav2"/>
         <listitem open="0" type="814" id="xvsHmEsBohKH"/>
         <listitem open="0" type="814" id="DJNV2COxOLoL"/>
         <listitem open="0" type="814" id="1kycj6zYOtLe"/>
         <listitem open="0" type="814" id="42uriC65Dls7"/>
        </listitem>
        <listitem open="0" type="813" id="uGJAJHVksU5kD">
         <listitem open="0" type="815" id="uoKC8JdHXqEjB"/>
         <listitem open="0" type="814" id="m7qtnHzdI3MZ"/>
         <listitem open="0" type="814" id="p54oyScvOs0t"/>
         <listitem open="0" type="815" id="utytXH9nvX4L1"/>
         <listitem open="0" type="815" id="uTQo2OgKdfr4M"/>
         <listitem open="0" type="815" id="uhBvLhFJ7hELb"/>
         <listitem open="0" type="815" id="ugDCbkG53tlI7"/>
         <listitem open="0" type="815" id="uSFbzvVi5laeK"/>
         <listitem open="0" type="815" id="kZiXtMgd5Fge"/>
         <listitem open="0" type="815" id="uN2mauWozIBJj"/>
         <listitem open="0" type="815" id="uiF2M6P6TKTpM"/>
         <listitem open="0" type="814" id="wkem52XAfbyf"/>
         <listitem open="0" type="814" id="Q6yozxhCFSZY"/>
         <listitem open="0" type="814" id="RpgZWmgD9gR8"/>
         <listitem open="0" type="814" id="GF9to7ZX7Z4H"/>
         <listitem open="0" type="814" id="jN0F1BcxvGi0"/>
         <listitem open="0" type="814" id="i22X9tnP8h87"/>
         <listitem open="0" type="814" id="zxI5VKMwA0Te"/>
         <listitem open="0" type="814" id="p34lHmjXzsQn"/>
         <listitem open="0" type="814" id="DKnNIGz2Lpt8"/>
        </listitem>
       </listitem>
       <listitem open="1" type="818" id="y4YEKZR3HDxZ">
        <listitem open="0" type="813" id="uw5mZm9Nan99y">
         <listitem open="0" type="814" id="uhQ60AEZGhs1Z"/>
         <listitem open="0" type="814" id="u36UEqbQP3E1t"/>
         <listitem open="0" type="814" id="u6wMQuIoKs0pV"/>
         <listitem open="0" type="815" id="ufNvLzFKfszwj"/>
         <listitem open="0" type="815" id="uUhiIh66JJbAZ"/>
         <listitem open="0" type="815" id="u1ILHA5KjC8fG"/>
         <listitem open="0" type="814" id="vu428SXh8HG2"/>
         <listitem open="0" type="815" id="ufjghCz075IPu"/>
         <listitem open="0" type="815" id="u8bcOXT2EnOmF"/>
         <listitem open="0" type="815" id="u5IlGxn6vUnmV"/>
         <listitem open="0" type="814" id="usKHjJy7DbcDJ"/>
         <listitem open="0" type="814" id="uUCNCTtJytDIm"/>
        </listitem>
        <listitem open="0" type="813" id="ujk5BH4jpEXpe">
         <listitem open="0" type="815" id="uJJI1qcT0zh9x"/>
         <listitem open="0" type="814" id="uRmyokQfI8cUg"/>
         <listitem open="0" type="815" id="uCmrJaRtFZ0hc"/>
         <listitem open="0" type="815" id="ukC4j5IWapCtY"/>
         <listitem open="0" type="815" id="uMmzxgydu1EDb"/>
         <listitem open="0" type="815" id="u5artKIw52dAK"/>
         <listitem open="0" type="815" id="u6Ukw8I6Svyhw"/>
         <listitem open="0" type="814" id="uc29pM9LvmIDX"/>
         <listitem open="0" type="814" id="uVWJqOZ5F3KED"/>
        </listitem>
       </listitem>
      </listitem>
     </listitem>
    </listitem>
    <listitem open="1" type="802" id="Use_Case_View"/>
   </listitem>
  </listview>
  <codegeneration>
   <codegenerator language="Python">
    <sourcecode value="self._nBamName=nBamName&#xa;self._tBamNameL=tBamNameL&#xa;self._bedNameL=bedNameL&#xa;self._refFaName=refFaName&#xa;self.__pathPrefix=pathPrefix&#xa;self.__subcloneNumberL=subcloneNumberL&#xa;self.__coverageL=coverageL&#xa;self.__maxCopyNumber=maxCopyNumber&#xa;self.__baselineThredLOH=baselineThredLOH&#xa;self.__baselineThredAPM=baselineThredAPM&#xa;self.__minDepth=minDepth&#xa;self.__minBqual=minBqual&#xa;self.__minMqual=minMqual&#xa;self.__processNum=processNum&#xa;self.__bedCorrectedPath=bedCorrectedPath&#xa;self.__pklPath=pklPath&#xa;self._segmentPoolL=[]&#xa;" id="uzHochCDpJktp"/>
    <sourcecode value="self._load_segments()&#xa;self._correct_bias()&#xa;blSegs,nonBlSegs=self._get_baseline()&#xa;self._mark_timestamp(blSegs,nonBlSegs)&#xa;self._generate_stripe()&#xa;self._mark_stripe()&#xa;self._dump()&#xa;" id="uEdHnsvJrhNat"/>
    <sourcecode value="def _mark_timestamp(self,blSegs,nonBlSegs):&#xa;  pass&#xa;&#xa;def _load_segments(self):&#xa;  assert len(self._tBamNameL)==len(self._bedNameL)&#xa;  assert len(self._tBamNameL)==len(self.__subcloneNumberL)&#xa;  for tBamName,bedName,coverage,subcloneNumber in zip(self._tBamNameL,&#xa;  self._bedNameL,self.__coverageL,self.__subcloneNumberL):&#xa;    print>>sys.stdout,'Loading segments from bam file:\n{0}\n'.format(tBamName)&#xa;    print>>sys.stdout,'and bed file with gc:\n{0}\n'.format(bedName)&#xa;    tempSP=SegmentPool(self.__maxCopyNumber,coverage)&#xa;    nBam=pysam.Samfile(self._nBamName,'rb')&#xa;    tBam=pysam.Samfile(tBamName,'rb')&#xa;    tempSP.load_segments(nBam,tBam,bedName)&#xa;    nBam.close()&#xa;    tBam.close()&#xa;    self._segmentPoolL.append(tempSP)&#xa;&#xa;&#xa;def _correct_bias(self,method=&quot;&quot;):&#xa;  assert len(self._segmentPoolL)==len(self.__subcloneNumberL)&#xa;  for segmentPool,subcloneNumber in zip(self._segmentPoolL,&#xa;  self.__subcloneNumberL):&#xa;    if&quot;auto&quot;==method:&#xa;      self._MCMC_GC_C(SegmentPool,subcloneNumber)&#xa;&#xa;    elif&quot;visual&quot;==method:&#xa;      self._V_GC_C(SegmentPool,len(SegmentPool.segments))&#xa;&#xa;&#xa;&#xa;def _get_baseline(self):&#xa;  pass&#xa;&#xa;def _MCMC_GC_C(self,data,subcloneNumber):&#xa;  mcmclm=MCMCLM(data,0,subcloneNumber,self.__maxCopyNumber)&#xa;  m,c=mcmclm.run()&#xa;  print&quot;MCMC slope = {}&quot;.format(m)&#xa;  x=np.array(map(lambda seg:seg.gc,data.segments))&#xa;  y=np.array(map(lambda seg:np.log(seg.tumor_reads_num+1)-&#xa;  np.log(seg.normal_reads_num+1),data.segments))y_corrected=self._correct(x,y,m,c)&#xa;  for i in range(len(y_corrected)):&#xa;    data.segments[i].tumor_reads_num=np.exp(&#xa;    y_corrected[i]+np.log(data.segments[i].normal_reads_num+1))-1&#xa;    data.segments[i].log_ratio=np.log(&#xa;    (y_corrected[i]+1.0)/(data.segments[i].normal_reads_num+1.0))&#xa;&#xa;  print&quot;gc corrected, with slope = {0}, intercept = {1}&quot;.\&#xa;  format(slope,intercept)&#xa;def _correct(self,x,y,slope,intercept):&#xa;  K=np.percentile(y,50)&#xa;  A=slope*x+intercept&#xa;  return y-A+K&#xa;&#xa;def visualize(self):&#xa;  gsp=GCStripePlot(self.data.segments,len(self.data.segments))&#xa;  print&quot;total number: {}&quot;.format(self.data.seg_num)&#xa;  gsp.plot()&#xa;  x,y,m,c=gsp.output()&#xa;  print&quot;x, y, m, c&quot;&#xa;  print x,y,m,c&#xa;&#xa;def _V_GC_C(self,segmentPool,sampleNumber=10000):&#xa;  gsp=GCStripePlot(segmentPool.segments,sampleNumber)&#xa;  print>>sys.stdout,&quot;total number: {}&quot;.format(len(segmentPool.segments))&#xa;  gsp.plot()&#xa;  print>>sys.stdout,&quot;x, y, m, c&quot;&#xa;  print>>sys.stdout,gsp.output()&#xa;  x=np.array(map(lambda seg:seg.gc,data.segments))&#xa;  y=np.array(map(lambda seg:np.log(seg.tumor_reads_num+1)-&#xa;  np.log(seg.normal_reads_num+1),data.segments))y_corrected=self._correct(x,y,m,c)&#xa;  for i in range(len(y_corrected)):&#xa;    data.segments[i].tumor_reads_num=np.exp(&#xa;    y_corrected[i]+np.log(data.segments[i].normal_reads_num+1))-1&#xa;    data.segments[i].log_ratio=np.log(&#xa;    (y_corrected[i]+1.0)/(data.segments[i].normal_reads_num+1.0))&#xa;&#xa;  print&quot;gc corrected, with slope = {0}, intercept = {1}&quot;.\&#xa;  format(slope,intercept)&#xa;def _baseline_selection(self):&#xa;  print&quot;begin baseline selection..&quot;&#xa;  self._get_LOH_frac()&#xa;  self._get_LOH_status()&#xa;  self._get_APM_frac()&#xa;  self._get_APM_status()&#xa;  self._compute_Lambda_S()&#xa;&#xa;def _get_APM_status(self):&#xa;  self.data.get_APM_status(self.__baselineThredAPM)&#xa;&#xa;def _get_LOH_status(self):&#xa;  self.data.get_LOH_status(self.__baselineThredLOH,&#xa;  flag_runpreprocess=True)&#xa;def _compute_Lambda_S(self):&#xa;  print&quot;begin compute lambda s ..&quot;&#xa;  self.data.compute_Lambda_S_LOH(self.__maxCopyNumber,self.__subcloneNumberL,&#xa;  flag_runpreprocess=True)&#xa;def _load_segmentsn(self):&#xa;  nBam=pysam.Samfile(self._nBamName,'rb')&#xa;  tBam=pysam.Samfile(self.tBam_filename,'rb')&#xa;  print'Loading normalized segments by {0}...'.format(self.segments_bed)&#xa;  sys.stdout.flush()&#xa;  self.data.load_segmentsn(nBam,tBam,self.segments_bed)&#xa;  nBam.close()&#xa;  tBam.close()&#xa;&#xa;def _load_segments_bed(self,segments_bed,data):&#xa;  print'Loading segments with gc by {0}...'.format(self.segments_bed)&#xa;  sys.stdout.flush()&#xa;  data.load_segments_bed(segments_bed)&#xa;&#xa;def _get_counts(self,tBam_filename,data):&#xa;  seg_num=self.data.seg_num&#xa;  processNum=self.__processNum&#xa;  print&quot;processNum = {}&quot;.format(processNum)&#xa;  if processNum>seg_num:&#xa;    processNum=seg_num&#xa;&#xa;  pool=Pool(processes=processNum)&#xa;  args_list=[]&#xa;  for j in range(0,seg_num):&#xa;    seg_name=self.data.segments[j].name&#xa;    chrom_name=self.data.segments[j].chrom_name&#xa;    chrom_idx=self.data.segments[j].chrom_idx&#xa;    start=self.data.segments[j].start&#xa;    end=self.data.segments[j].end&#xa;    args_tuple=(&#xa;    seg_name,chrom_name,chrom_idx,start,end,self._nBamName,tBam_filename,self._refFaName,self.__minDepth,self.__minBqual,self.__minMqual)args_list.append(args_tuple)&#xa;&#xa;  counts_tuple_list=pool.map(process_by_segment,args_list)&#xa;  for j in range(0,seg_num):&#xa;    paired_counts_j,BAF_counts_j=counts_tuple_list[j]&#xa;    data.segments[j].paired_counts=paired_counts_j&#xa;    data.segments[j].BAF_counts=BAF_counts_j&#xa;&#xa;&#xa;def _get_LOH_frac(self):&#xa;  self.data.get_LOH_frac()&#xa;&#xa;def _get_APM_frac(self):&#xa;  self.data.get_APM_frac()&#xa;&#xa;" id="u6K9pxOBSEc4t"/>
    <sourcecode value="seg_name,chrom_name,chrom_idx,start,end,nBamName,\&#xa;tBam_filename,refFaName,minDepth,minBqual,\minMqual=args_tuple print'Preprocessing segment {0}...'.format(seg_name)&#xa;sys.stdout.flush()&#xa;nBam=pysam.Samfile(nBamName,'rb')&#xa;tBam=pysam.Samfile(tBam_filename,'rb')&#xa;ref_genome_fasta=pysam.Fastafile(refFaName)&#xa;normal_pileup_iter=nBam.pileup(chrom_name,start,end)&#xa;tumor_pileup_iter=tBam.pileup(chrom_name,start,end)&#xa;paired_pileup_iter=PairedPileupIterator(&#xa;normal_pileup_iter,tumor_pileup_iter,start,end)paired_counts_iter=PairedCountsIterator(&#xa;paired_pileup_iter,ref_genome_fasta,chrom_name,chrom_idx,minDepth,minBqual,minMqual)paired_counts_j,BAF_counts_j=iterator_to_counts(paired_counts_iter)&#xa;counts_tuple_j=(paired_counts_j,BAF_counts_j)&#xa;nBam.close()&#xa;tBam.close()&#xa;ref_genome_fasta.close()&#xa;return counts_tuple_j&#xa;" id="uJmEbWB1TC4UR"/>
    <sourcecode value="buff=100000&#xa;paired_counts_j=np.array([[],[],[],[],[],[]],dtype=int).transpose()&#xa;BAF_counts_j=np.zeros((100,100))&#xa;buff_counts=[]&#xa;i=0&#xa;for counts in paired_counts_iter:&#xa;  buff_counts.append(counts)&#xa;  i=i+1&#xa;  if i&lt;buff:&#xa;    continue&#xa;&#xa;  buff_counts=np.array(buff_counts)&#xa;  if buff_counts.shape[0]!=0:&#xa;    BAF_counts_buff=get_BAF_counts(buff_counts)&#xa;    BAF_counts_j+=BAF_counts_buff&#xa;&#xa;  buff_counts_filtered=normal_heterozygous_filter(buff_counts)&#xa;  if buff_counts_filtered.shape[0]!=0:&#xa;    paired_counts_j=np.vstack((paired_counts_j,buff_counts_filtered))&#xa;&#xa;  buff_counts=[]&#xa;  i=0&#xa;&#xa;buff_counts=np.array(buff_counts)&#xa;if buff_counts.shape[0]!=0:&#xa;  BAF_counts_buff=get_BAF_counts(buff_counts)&#xa;  BAF_counts_j+=BAF_counts_buff&#xa;&#xa;buff_counts_filtered=normal_heterozygous_filter(buff_counts)&#xa;if buff_counts_filtered.shape[0]!=0:&#xa;  paired_counts_j=np.vstack((paired_counts_j,buff_counts_filtered))&#xa;&#xa;return(paired_counts_j,BAF_counts_j)" id="ufnQ1OiN4y8FK"/>
    <sourcecode value="self.maxCopyNumber=maxCopyNumber&#xa;self.coverage=coverage&#xa;self._alleleConfig=get_cn_allele_config(max_copy_number)&#xa;" id="ufjghCz075IPu"/>
    <sourcecode value="bedChroms,bedStarts,bedEnds,tReadNums,nReadNums,gcs=\&#xa;BEDnParser(bedName)get_chrom_format(bedChroms)&#xa;bedNum=len(bedChroms)&#xa;for i in range(0,bedNum):&#xa;  chromIdx=chrom_name_to_idx(bedChroms[i])&#xa;  segName=get_segment_name(&#xa;  bedChroms[i],bedStarts[i],bedEnds[i])nReadNum=nReadNums[i]&#xa;  tReadNum=tReadNums[i]&#xa;  tempSeg=Segment()&#xa;  tempSeg.name=segName&#xa;  tempSeg.chromIdx=chromIdx&#xa;  tempSeg.chromName=bedChroms[i]&#xa;  tempSeg.start=bedStarts[i]&#xa;  tempSeg.end=bedEnds[i]&#xa;  tempSeg.nReadNum=nReadNum&#xa;  tempSeg.tReadNum=tReadNum&#xa;  tempSeg.gc=gcs[i]&#xa;  self.segments.append(tempSeg)&#xa;&#xa;" id="u5IlGxn6vUnmV"/>
    <sourcecode value="chromIdxL=constants.CHROM_IDX_LIST&#xa;chromStart=constants.CHROM_START&#xa;samSQ=normal_bam.header['SQ']&#xa;samChromFormat=get_chrom_format(map(lambda x:x['SN'],samSQ))&#xa;chromLens,chromIdxs=get_chrom_lens_idxs(chromIdxL,samSQ)&#xa;bedChroms,bedStarts,bedEnds,gcs=BEDParser(bed_file_name)&#xa;get_chrom_format(bedChroms)&#xa;bedNum=len(bedChroms)&#xa;for i in range(0,bedNum):&#xa;  chromIdx=chrom_name_to_idx(bedChroms[i])&#xa;  chromName=chrom_idx_to_name(chromIdx,samChromFormat)&#xa;  segName=get_segment_name(chromName,bedStarts[i],bedEnds[i])&#xa;  if chromIdx not in chromIdxL:&#xa;    print'Chromsome {0} not found, segment {1} excluded...'.format(&#xa;    bedChroms[i],segName)sys.stdout.flush()&#xa;    continue&#xa;&#xa;  chromListIdx=chromIdxs.index(chromIdx)&#xa;  if bedStarts[i]&lt;chromStart or bedEnds[&#xa;  i]>chromLens[chromListIdx]:&#xa;    print'Out of range chromsome {0}, segment {1} excluded...'.\&#xa;    format(bedChroms[i],segName)sys.stdout.flush()&#xa;    continue&#xa;&#xa;  nReadNum=normal_bam.count(&#xa;  chromName,bedStarts[i],bedEnds[i])tReadNum=tumor_bam.count(&#xa;  chromName,bedStarts[i],bedEnds[i])tempSeg=Segment()&#xa;  tempSeg.name=segName&#xa;  tempSeg.chromIdx=chromIdx&#xa;  tempSeg.chromName=chromName&#xa;  tempSeg.start=bedStarts[i]&#xa;  tempSeg.end=bedEnds[i]&#xa;  tempSeg.nReadNum=nReadNum&#xa;  tempSeg.tReadNum=tReadNum&#xa;  self.segments.append(tempSeg)&#xa;&#xa;" id="u8bcOXT2EnOmF"/>
    <sourcecode value="self._get_LOH_frac()&#xa;self._get_LOH_status()&#xa;self._get_APM_frac()&#xa;self._get_APM_status()&#xa;self._calc_baseline()&#xa;self._get_baseline_stripe()&#xa;return self.get_seg_by_tag()&#xa;" id="uUhiIh66JJbAZ"/>
    <sourcecode value="return filter(lambda item:item.tag==tag,self.segments)&#xa;" id="u1ILHA5KjC8fG"/>
    <sourcecode value="def _calc_baseline(self,maxCopyNumber,subcloneNum,isPreprocess=False):&#xa;  if not isPreprocess:&#xa;    print>>sys.stdout,&quot;compute_Lambda_S function called from model&quot;&#xa;    return&#xa;&#xa;  thresh=constants.HC_THRESH&#xa;  rdRatioLog=[]&#xa;  for j in range(0,len(self.segments)):&#xa;    if self.segments[j].APMStatus=='TRUE'and\&#xa;    self.segments[j].LOHStatus=='FALSE':&#xa;      ratio=self.segments[j].tReadNum*1.0/\&#xa;      self.segments[j].normal_reads_num rdRatioLog.append(np.log(ratio))&#xa;&#xa;&#xa;  rdRatioLog=np.array(rdRatioLog)&#xa;  if rdRatioLog.shape[0]==0:&#xa;    print>>sys.stderr,'Error: no APM-LOH position found, existing...'&#xa;    print>>sys.stderr,'Either the baselineThredAPM is too large, or\;the constants APM_N_MIN is too large&#xa;    Or,the baseline_thred_LOH is\&#xa;    too small';sys.exit(1)&#xa;&#xa;  rdRatioLog=rdRatioLog.reshape(rdRatioLog.shape[0],1)&#xa;  y=np.ones(rdRatioLog.shape)&#xa;  rdRatioLog=np.hstack((rdRatioLog,y))&#xa;  clusters=hcluster.fclusterdata(rdRatioLog,&#xa;  thresh,criterion=&quot;distance&quot;)mccs=Counter(clusters).most_common(maxCopyNumber*subcloneNum)&#xa;  rdrMinLog=float('Inf')&#xa;  clusterMin=-1&#xa;  for i in range(0,len(mccs)):&#xa;    clusterTemp=mccs[i][0]&#xa;    print>>sys.stdout,&quot;cluster temp : {}&quot;.format(clusterTemp)&#xa;    tempRdrLog=mean(rdRatioLog[clusters==clusterTemp])&#xa;    print>>sys.stdout,&quot;tempRdrLog&quot;&#xa;    print>>sys.stdout,&quot;log: {}&quot;.format(tempRdrLog)&#xa;    if rdrMinLog>tempRdrLog:&#xa;      rdrMinLog=tempRdrLog&#xa;      clusterMin=clusterTemp&#xa;&#xa;&#xa;  print>>sys.stdout,mccs&#xa;  print>>sys.stdout,&quot;log baseline: {}&quot;.format(rdrMinLog)&#xa;  sys.stdout.flush()&#xa;  clusterFlag=(clusters==clusterMin)&#xa;  baselineNum=0&#xa;  rdrIdx=0&#xa;  for j in range(0,len(self.segments)):&#xa;    if self.segments[j].APMStatus=='TRUE'and\&#xa;    self.segments[j].LOHStatus=='FALSE':&#xa;      if clusterFlag[rdrIdx]:&#xa;        self.segments[j].baselineLabel='TRUE'&#xa;        baselineNum=baselineNum+1&#xa;&#xa;      else:&#xa;        self.segments[j].baselineLabel='FALSE'&#xa;&#xa;      rdrIdx=rdrIdx+1&#xa;&#xa;    else:&#xa;      self.segments[j].baselineLabel='FALSE'&#xa;&#xa;&#xa;  print>>sys.stdout,&quot;baselineNum: {}&quot;.format(baselineNum)&#xa;  if baselineNum==0:&#xa;    print>>sys.stderr,'Error: No diploid segments found, existing...'&#xa;    sys.exit(1)&#xa;&#xa;  self.baseline=rdrMinLog&#xa;&#xa;def _get_LOH_frac(self):&#xa;  for j in range(0,len(self.segments)):&#xa;    self.segments[j].LOHFrac=get_LOH_frac(&#xa;    self.segments[j].pairedCounts)&#xa;&#xa;def _get_APM_frac(self):&#xa;  for j in range(0,len(self.segments)):&#xa;    self.segments[j].APMFrac=get_APM_frac_MAXMIN(&#xa;    self.segments[j].pairedCounts)&#xa;&#xa;def _get_LOH_status(self,baseThred,isPreprocess=False):&#xa;  if isPreprocess:&#xa;    LOHNum=0&#xa;    FLOHNum=0&#xa;    for j in range(0,len(self.segments)):&#xa;      self.segments[j].LOHStatus=get_LOH_status(&#xa;      self.segments[j].LOHFrac,baseThred)if self.segments[j].LOHStatus==&quot;TRUE&quot;:&#xa;        LOHNum=LOHNum+1&#xa;&#xa;      elif self.segments[j].LOHStatus==&quot;FALSE&quot;:&#xa;        FLOHNum=FLOHNum+1&#xa;&#xa;&#xa;    print>>sys.stdout,&quot;LOHNum/segNum = {0}/{1}&quot;.format(LOHNum,len(self.segments))&#xa;    print>>sys.stdout,&quot;FLOHNum/segNum = {0}/{1}&quot;.format(FLOHNum,len(self.segments))&#xa;&#xa;  else:&#xa;    print>>sys.stdout,&quot;get_LOH_status function called from model.&quot;&#xa;&#xa;&#xa;def _get_APM_status(self,baselineThredAPM):&#xa;  APMNum=0&#xa;  for j in range(0,len(self.segments)):&#xa;    self.segments[j].APMStatus=get_APM_status(&#xa;    self.segments[j].APMFrac,baselineThredAPM)if self.segments[j].APMStatus==&quot;TRUE&quot;:&#xa;      APMNum=APMNum+1&#xa;&#xa;&#xa;  print&quot;APMNum/segNum = {0}/{1}&quot;.format(APMNum,len(self.segments))&#xa;" id="ufNvLzFKfszwj"/>
    <sourcecode value="self._segmentPool=segmentPool&#xa;self.stripes=[]&#xa;self.baseline=baseline&#xa;" id="u5artKIw52dAK"/>
    <sourcecode value="self._aggregate(yDown,yUp,stripeNum,noiseStripeNum=2)&#xa;" id="ukC4j5IWapCtY"/>
    <sourcecode value="with open(outFileName,'w')as outFile:&#xa;  outFile.write(&quot;{0}\t{1}\t{2}\t{3}\t{4}\t{5}\n&quot;.format(&#xa;  &quot;id&quot;,&quot;segIdL&quot;,&quot;pairedCounts&quot;,&quot;tReadNum&quot;,&quot;nReadName&quot;,&quot;tag&quot;))for s in self.stripes:&#xa;    aT=s.pairedCounts[:,2]&#xa;    bT=s.pairedCounts[:,3]&#xa;    aTstrl=np.array_str(aT).strip(&quot;[]&quot;).split()&#xa;    bTstrl=np.array_str(bT).strip(&quot;[]&quot;).split()&#xa;    outFile.write(&quot;{0}\t{1}\t{2}\t{3}\t{4}\t{5}\n&quot;.format(&#xa;    s.id,&quot;,&quot;.join(s.segIdL),&quot;{0}|{1}&quot;.format(&quot;,&quot;.join(aTstrl),&quot;,&quot;.join(bTstrl)),s.tReadNum,s.nReadName,s.tag)&#xa;  pass&#xa;&#xa;" id="u6Ukw8I6Svyhw"/>
    <sourcecode value="assert stripeNum>0&#xa;rdRaioLog=[]&#xa;ycV=np.array([&#xa;np.log(seg.tReadNum+1)-np.log(seg.nReadName+1)for seg in self._segmentPool.segments])&#xa;statusYcV=np.logical_and(ycV>y_min,ycV&lt;y_max)&#xa;yFcd=ycV.reshape(ycV.shape[0],1)&#xa;clusters=hierarchy.fclusterdata(&#xa;yFcd,stripeNum+noiseStripeNum,criterion=&quot;distance&quot;)mccs=Counter(&#xa;clusters[statusYcV]).most_common(stripeNum+noiseStripeNum)for cId,_ in mccs:&#xa;  self._decompose(cId,clusters,statusYcV)&#xa;&#xa;" id="uJJI1qcT0zh9x"/>
    <sourcecode value="ca=np.argwhere(clusters==cId).flatten()&#xa;sa=np.argwhere(statusYcV).flatten()&#xa;mSIdx=np.intersectid(ca,sa)&#xa;segList=[self._segmentPool.segments[idx]for idx in mSIdx]&#xa;pairedCountsAll=np.array(&#xa;[[],[],[],[],[],[]],dtype=int).transpose()for seg in segList:&#xa;  pairedCountsAll=np.vstack((pairedCountsAll,&#xa;  seg.pairedCounts))&#xa;aT=pairedCountsAll[:,2]&#xa;bT=pairedCountsAll[:,3]&#xa;dT=aT+bT&#xa;lT=np.min(pairedCountsAll[:,2:4],axis=1)&#xa;pT=lT*1.0/dT&#xa;y=np.ones(pT.shape)&#xa;pTy=np.hstack((pT,y))&#xa;bandwidth=estimate_bandwidth(pTy,quantile=0.2,n_samples=500)&#xa;ms.fit(X)&#xa;labels=ms.labels_&#xa;clusterCenters=ms.clusterCenters&#xa;labelsUnique=np.unique(labels)&#xa;nClusters=len(labelsUnique)&#xa;segLabel=[&#xa;self._getSegLabl(seg,clusterCenters)for seg in segList]&#xa;for label in set(segLabel):&#xa;  if label==-1:&#xa;    continue&#xa;&#xa;  subSegList=[&#xa;  seg for seg,idx in enumerate(segList)if segLabel[idx]==label]&#xa;  subSegIdx=[&#xa;  mSIdx[idx]for seg,idx in enumerate(segList)if segLabel[idx]==label]&#xa;  tempStripe=Stripe()&#xa;  tempStripe.id=&quot;{0}_{1}&quot;.format(str(cId),str(idx))&#xa;  tempStripe.init_segs(subSegList,subSegIdx)&#xa;  self.stripes.append(tempStripe)&#xa;&#xa;" id="uCmrJaRtFZ0hc"/>
    <sourcecode value="if seg.pairedCounts is None:&#xa;  return-1&#xa;&#xa;aTseg=seg.pairedCounts[:,2]&#xa;bTseg=seg.pairedCounts[:,3]&#xa;dTseg=aTseg+bTseg&#xa;lTseg=np.min(seg.pairedCounts[:,2:4],axis=1)&#xa;pTseg=lTseg*1.0/dTseg&#xa;disSeg=np.abs(pTseg[:,None]-clusterCenters[:,0])&#xa;labelsSeg=np.argmin(disSeg,axis=1)&#xa;return Counter(labelsSeg).most_common(1)[0][0]" id="uMmzxgydu1EDb"/>
    <sourcecode value="self.data=set([])&#xa;self._children=[]&#xa;self.tssb=tssb&#xa;if parent is not None:&#xa;  parent.add_child(self)&#xa;  self._parent=parent&#xa;&#xa;else:&#xa;  self._parent=None&#xa;&#xa;" id="nNXYFwU22Plw"/>
    <sourcecode value="if self._parent is not None:&#xa;  self._parent._children.remove(self)&#xa;&#xa;self._parent=None&#xa;self._children=None&#xa;" id="6UX6rI1Ih7XW"/>
    <sourcecode value="return self.__class__(parent=self,tssb=self.tssb)&#xa;" id="4Y7Li9spbPtT"/>
    <sourcecode value="if len(self.data):&#xa;  return True&#xa;&#xa;else:&#xa;  for child in self._children:&#xa;    if child.has_data():&#xa;      return True&#xa;&#xa;&#xa;&#xa;return False&#xa;" id="6k42qxesWlDE"/>
    <sourcecode value="return reduce(lambda x,y:x+y,&#xa;map(lambda c:c.num_data(),self._children),len(self.data))" id="xMjRHR1N95Nx"/>
    <sourcecode value="return len(self.data)&#xa;" id="d3jPkE8fYq6n"/>
    <sourcecode value="self.data.add(id)&#xa;" id="AQoHAurowaDg"/>
    <sourcecode value="self.data.remove(id)&#xa;" id="1QmvyxbkGs1O"/>
    <sourcecode value="pass&#xa;" id="z2dEudc7jMo2"/>
    <sourcecode value="self._children.append(child)&#xa;" id="R2fM36D08qE0"/>
    <sourcecode value="self._children.remove(child)&#xa;" id="q8KwxZxON0ZY"/>
    <sourcecode value="return self._children&#xa;" id="vlHGlopdaMQX"/>
    <sourcecode value="ids=list(self.data)&#xa;return[self.tssb.data[id]for id in ids]&#xa;" id="DdO7zC0sxG8g"/>
    <sourcecode value="0/0&#xa;return 0&#xa;" id="6E3Zec3qFRxE"/>
    <sourcecode value="return self.complete_logprob()&#xa;" id="jgAy88Bj2HIE"/>
    <sourcecode value="return rand(num_data,2)&#xa;" id="H5M1BzMueWtk"/>
    <sourcecode value="return self._parent&#xa;" id="RjI3D9nqBFUS"/>
    <sourcecode value="if self.parent()is None:&#xa;  return self.__dict__[key]&#xa;&#xa;else:&#xa;  return self.parent().global_param(key)&#xa;&#xa;" id="Y5LkZi5yPL2c"/>
    <sourcecode value="if self._parent is None:&#xa;  return[self]&#xa;&#xa;else:&#xa;  ancestors=self._parent.get_ancestors()&#xa;  ancestors.append(self)&#xa;  return ancestors&#xa;&#xa;" id="c4O1PObsC2TC"/>
    <sourcecode value="offsprings=[self]&#xa;for child in self._children:&#xa;  offsprings.extend(child.get_offsprings())&#xa;&#xa;return offsprings" id="VqQOmMoOOBNm"/>
    <sourcecode value="if rootNode is None:&#xa;  raise Exception(&quot;Root node must be specified.&quot;)&#xa;&#xa;self.minDepth=minDepth&#xa;self.maxDepth=maxDepth&#xa;self.dpAlpha=dpAlpha&#xa;self.dpGamma=dpGamma&#xa;self.alphaDecay=alphaDecay&#xa;self.data=data&#xa;self.dataNum=0 if data is None else len(&#xa;data)self.root=:&#xa;&#xa;  'node':rootNode,'main':boundbeta(1.0,dpAlpha)if self.minDepth==0 else 0.0,'sticks':empty((0,1)),'children':[]&#xa;&#xa;rootNode.tssb=self&#xa;if False:&#xa;  dataU=rand(self.dataNum)&#xa;  self.assignments=[]&#xa;  for n in range(self.dataNum):&#xa;    (c,path)=self.find_node(dataU[n])&#xa;    c.add_datum(n)&#xa;    self.assignments.append(c)&#xa;&#xa;&#xa;else:&#xa;  self.assignments=[]&#xa;  for n in range(self.dataNum):&#xa;    self.root['node'].add_datum(n)&#xa;    self.assignments.append(self.root['node'])&#xa;&#xa;&#xa;" id="5kGsLUKtY7y8"/>
    <sourcecode value="(weights,nodes)=self.get_mixture()&#xa;newDataNum=len(data)&#xa;for n in range(newDataNum):&#xa;  logprobs=[]&#xa;  for k,node in enumerate(nodes):&#xa;    logprobs.append(log(weights[k])+node.logprob(data[n]))&#xa;&#xa;  logprobs=array(logprobs)&#xa;  probs=exp(logprobs-logsumexp(logprobs))&#xa;  best_k=sum(rand()>cumsum(probs))&#xa;  nodes[best_k].add_datum(n+self.dataNum)&#xa;  self.assignments.append(nodes[best_k])&#xa;&#xa;self.data=vstack([self.data,data])&#xa;self.dataNum+=newDataNum&#xa;" id="1NQXUMfWJ1Zm"/>
    <sourcecode value="for iter in range(iters):&#xa;  def descend(root):&#xa;    for index,child in enumerate(root['children']):&#xa;      descend(child)&#xa;&#xa;    root['node'].resample_params()&#xa;&#xa;  descend(self.root)&#xa;&#xa;" id="AdQRe0BOlmWX"/>
    <sourcecode value="def path_lt(path1,path2):&#xa;  if len(path1)==0 and len(path2)==0:&#xa;    return 0&#xa;&#xa;  elif len(path1)==0:&#xa;    return 1&#xa;&#xa;  elif len(path2)==0:&#xa;    return-1&#xa;&#xa;  s1=&quot;&quot;.join(map(lambda i:&quot;%03d&quot;%(i),path1))&#xa;  s2=&quot;&quot;.join(map(lambda i:&quot;%03d&quot;%(i),path2))&#xa;  return cmp(s2,s1)&#xa;&#xa;epsilon=finfo(float64).eps&#xa;lengths=[]&#xa;for n in range(self.dataNum):&#xa;  llhMapD=:&#xa;&#xa;&#xa;  ancestors=self.assignments[n].get_ancestors()&#xa;  current=self.root&#xa;  indices=[]&#xa;  for anc in ancestors[1:]:&#xa;    index=map(lambda c:c['node'],&#xa;    current['children']).index(anc)current=current['children'][index]&#xa;    indices.append(index)&#xa;&#xa;  maxU=1.0&#xa;  minU=0.0&#xa;  oldLlh=self.assignments[n].logprob(self.data[n:n+1])&#xa;  llhMapD[self.assignments[n]]=oldLlh&#xa;  llhS=log(rand())+oldLlh&#xa;  while True:&#xa;    newU=(maxU-minU)*rand()+minU&#xa;    (newNode,newPath)=self.find_node(newU)&#xa;    if newNode.parent()is None:&#xa;      newNode=newNode.children()[0]&#xa;      newPath=[0]&#xa;&#xa;    oldNode=self.assignments[n]&#xa;    oldNode.remove_datum(n)&#xa;    newNode.add_datum(n)&#xa;    self.assignments[n]=newNode&#xa;    if newNode in llhMapD:&#xa;      newLlh=llhMapD[newNode]&#xa;&#xa;    else:&#xa;      newLlh=newNode.logprob_restricted(self.data[n:n+1])&#xa;      llhMapD[newNode]=newLlh&#xa;&#xa;    if newLlh>llhS:&#xa;      break&#xa;&#xa;    elif-float(&quot;Inf&quot;)==newLlh:&#xa;      continue&#xa;&#xa;    elif abs(maxU-minU)&lt;epsilon:&#xa;      newNode.remove_datum(n)&#xa;      oldNode.add_datum(n)&#xa;      self.assignments[n]=oldNode&#xa;      print>>sys.stderr,&quot;Slice sampler shrank down.  Keep current state.&quot;&#xa;      break&#xa;&#xa;    else:&#xa;      newNode.remove_datum(n)&#xa;      oldNode.add_datum(n)&#xa;      self.assignments[n]=oldNode&#xa;      pathComp=path_lt(indices,newPath)&#xa;      if pathComp&lt;0:&#xa;        minU=newU&#xa;&#xa;      elif pathComp>=0:&#xa;        maxU=newU&#xa;&#xa;      else:&#xa;        raise Exception(&quot;Slice sampler weirdness.&quot;)&#xa;&#xa;&#xa;&#xa;  lengths.append(len(newPath))&#xa;&#xa;lengths=array(lengths)&#xa;" id="LDl4zFawlDbU"/>
    <sourcecode value="def descend(root):&#xa;  counts=array(map(lambda child:descend(child),root['children']))&#xa;  keep=len(trim_zeros(counts,'b'))&#xa;  for child in root['children'][keep:]:&#xa;    child['node'].kill()&#xa;    del child['node']&#xa;&#xa;  root['sticks']=root['sticks'][:keep]&#xa;  root['children']=root['children'][:keep]&#xa;  return sum(counts)+root['node'].num_local_data()&#xa;&#xa;descend(self.root)&#xa;" id="bAlKVkhoxQrv"/>
    <sourcecode value="def descend(root,depth=0):&#xa;  dataDown=0&#xa;  indices=range(len(root['children']))&#xa;  indices.reverse()&#xa;  for i in indices:&#xa;    child=root['children'][i]&#xa;    childData=descend(child,depth+1)&#xa;    postAlpha=1.0+childData&#xa;    postBeta=self.dpGamma+dataDown&#xa;    root['sticks'][i]=boundbeta(&#xa;    postAlpha,postBeta)if depth!=0 else.999999 dataDown+=childData&#xa;&#xa;  dataHere=root['node'].num_local_data()&#xa;  postAlpha=1.0+dataHere&#xa;  postBeta=(self.alphaDecay**depth)*self.dpAlpha+dataDown&#xa;  root['main']=boundbeta(&#xa;  postAlpha,postBeta)if self.minDepth&lt;=depth else 0.0 if depth==0:&#xa;    root['main']=1e-30&#xa;&#xa;  return dataHere+dataDown&#xa;&#xa;descend(self.root)&#xa;" id="n6OVZce9kNTE"/>
    <sourcecode value="def descend(root,depth=0):&#xa;  if not root['children']:&#xa;    return&#xa;&#xa;  newOrder=[]&#xa;  represented=set(&#xa;  filter(lambda i:root['children'][i]['node'].has_data(),range(len(root['children']))))allWeights=diff(hstack([0.0,sticks_to_edges(root['sticks'])]))&#xa;  while True:&#xa;    if not represented:&#xa;      break&#xa;&#xa;    u=rand()&#xa;    while True:&#xa;      subIndices=filter(lambda i:i not in newOrder,&#xa;      range(root['sticks'].shape[0]))subWeights=hstack(&#xa;      [allWeights[subIndices],1.0-sum(allWeights)])subWeights=subWeights/sum(subWeights)&#xa;      index=sum(u>cumsum(subWeights))&#xa;      if index==len(subIndices):&#xa;        root['sticks']=vstack(&#xa;        [root['sticks'],boundbeta(1,self.dpGamma)])root['children'].append(:&#xa;&#xa;          'node':&#xa;            root['node'].spawn(),&#xa;            'main':&#xa;              boundbeta(&#xa;              1.0,(self.alphaDecay**(depth+1))*self.dpAlpha)if self.minDepth&lt;=(depth+1)else 0.0,&#xa;              'sticks':&#xa;                empty((0,1)),&#xa;                'children':[]&#xa;&#xa;&#xa;            )&#xa;            allWeights=diff(&#xa;            hstack([0.0,sticks_to_edges(root['sticks'])]))&#xa;          else:&#xa;            index=subIndices[index]&#xa;            break&#xa;&#xa;&#xa;        newOrder.append(index)&#xa;        represented.discard(index)&#xa;&#xa;      newChildren=[]&#xa;      for k in newOrder:&#xa;        child=root['children'][k]&#xa;        newChildren.append(child)&#xa;        descend(child,depth+1)&#xa;&#xa;      for k in filter(lambda k:k not in newOrder,&#xa;      range(root['sticks'].shape[0])):&#xa;        root['children'][k]['node'].kill()&#xa;        del root['children'][k]['node']&#xa;&#xa;      root['children']=newChildren&#xa;      root['sticks']=zeros((len(root['children']),1))&#xa;&#xa;    descend(self.root)&#xa;    self.resample_sticks()&#xa;&#xa;  def resample_hypers(self,dpAlpha=True,alphaDecay=True,dpGamma=True):&#xa;    def dp_alpha_llh(dpAlpha,alphaDecay):&#xa;      def descend(dpAlpha,root,depth=0):&#xa;        llh=betapdfln(root['main'],1.0,(alphaDecay**depth)*&#xa;        dpAlpha)if self.minDepth&lt;=depth else 0.0 for child in root['children']:&#xa;          llh+=descend(dpAlpha,child,depth+1)&#xa;&#xa;        return llh&#xa;&#xa;      return descend(dpAlpha,self.root)&#xa;&#xa;    if dpAlpha:&#xa;      upper=self.maxDpAlpha&#xa;      lower=self.minDpAlpha&#xa;      llhS=log(rand())+dp_alpha_llh(self.dpAlpha,self.alphaDecay)&#xa;      while True:&#xa;        newDpAlpha=(upper-lower)*rand()+lower&#xa;        newLlh=dp_alpha_llh(newDpAlpha,self.alphaDecay)&#xa;        if newLlh>llhS:&#xa;          break&#xa;&#xa;        elif newDpAlpha&lt;self.dpAlpha:&#xa;          lower=newDpAlpha&#xa;&#xa;        elif newDpAlpha>self.dpAlpha:&#xa;          upper=newDpAlpha&#xa;&#xa;        else:&#xa;          raise Exception(&quot;Slice sampler shrank to zero!&quot;)&#xa;&#xa;&#xa;      self.dpAlpha=newDpAlpha&#xa;&#xa;    if alphaDecay:&#xa;      upper=self.maxAlphaDecay&#xa;      lower=self.minAlphaDecay&#xa;      llhS=log(rand())+dp_alpha_llh(self.dpAlpha,self.alphaDecay)&#xa;      while True:&#xa;        newAlphaDecay=(upper-lower)*rand()+lower&#xa;        newLlh=dp_alpha_llh(self.dpAlpha,newAlphaDecay)&#xa;        if newLlh>llhS:&#xa;          break&#xa;&#xa;        elif newAlphaDecay&lt;self.alphaDecay:&#xa;          lower=newAlphaDecay&#xa;&#xa;        elif newAlphaDecay>self.alphaDecay:&#xa;          upper=newAlphaDecay&#xa;&#xa;        else:&#xa;          raise Exception(&quot;Slice sampler shrank to zero!&quot;)&#xa;&#xa;&#xa;      self.alphaDecay=newAlphaDecay&#xa;&#xa;    def dp_gamma_llh(dpGamma):&#xa;      def descend(dpGamma,root):&#xa;        llh=0&#xa;        for i,child in enumerate(root['children']):&#xa;          llh+=betapdfln(root['sticks'][i],1.0,dpGamma)&#xa;          llh+=descend(dpGamma,child)&#xa;&#xa;        return llh&#xa;&#xa;      return descend(dpGamma,self.root)&#xa;&#xa;    if dpGamma:&#xa;      upper=self.maxDpGamma&#xa;      lower=self.minDpGamma&#xa;      llhS=log(rand())+dp_gamma_llh(self.dpGamma)&#xa;      while True:&#xa;        newDpGamma=(upper-lower)*rand()+lower&#xa;        newLlh=dp_gamma_llh(newDpGamma)&#xa;        if newLlh>llhS:&#xa;          break&#xa;&#xa;        elif newDpGamma&lt;self.dpGamma:&#xa;          lower=newDpGamma&#xa;&#xa;        elif newDpGamma>self.dpGamma:&#xa;          upper=newDpGamma&#xa;&#xa;        else:&#xa;          raise Exception(&quot;Slice sampler shrank to zero!&quot;)&#xa;&#xa;&#xa;      self.dpGamma=newDpGamma&#xa;&#xa;&#xa;  def draw_data(self,dataNum=1,**args):&#xa;    self.data=[]&#xa;    self.assignments=[]&#xa;    for n in range(dataNum):&#xa;      u=rand()&#xa;      (node,path)=self.find_node(u)&#xa;      self.data.append(node.sample(args))&#xa;      self.assignments.append(node)&#xa;      node.add_datum(n)&#xa;      self.dataNum+=1&#xa;&#xa;    self.data=concatenate(self.data)&#xa;    return self.data&#xa;&#xa;  def resample_data(self,**args):&#xa;    for n in range(self.dataNum):&#xa;      u=rand()&#xa;      (node,path)=self.find_node(u)&#xa;      self.assignments[n].remove_datum(n)&#xa;      node.add_datum(n)&#xa;      self.assignments[n]=node&#xa;      self.data[n]=node.sample(args)[0]&#xa;&#xa;&#xa;  def find_node(self,u):&#xa;    def descend(root,u,depth=0):&#xa;      if depth>=self.maxDepth:&#xa;        return(root['node'],[])&#xa;&#xa;      elif u&lt;root['main']:&#xa;        return(root['node'],[])&#xa;&#xa;      else:&#xa;        u=(u-root['main'])/(1.0-root['main'])&#xa;        if depth>0:&#xa;          while not root['children']or(&#xa;          1.0-prod(1.0-root['sticks']))&lt;u:&#xa;            root['sticks']=vstack([&#xa;            root['sticks'],boundbeta(1,self.dpGamma)if depth!=0 else.999])&#xa;            root['children'].append(:&#xa;&#xa;              'node':&#xa;                root['node'].spawn(),&#xa;                'main':&#xa;                  boundbeta(1.0,(self.alphaDecay**&#xa;                  (depth+1))*self.dpAlpha)if self.minDepth&lt;=(depth+1)else 0.0,&#xa;                  'sticks':&#xa;                    empty((0,1)),&#xa;                    'children':[]&#xa;&#xa;&#xa;                )&#xa;&#xa;              edges=1.0-cumprod(1.0-root['sticks'])&#xa;              index=sum(u>edges)&#xa;              edges=hstack([0.0,edges])&#xa;              u=(u-edges[index])/(edges[index+1]-edges[index])&#xa;              (node,path)=descend(root['children'][index],u,&#xa;              depth+1)&#xa;            else:&#xa;              index=0&#xa;              (node,path)=descend(root['children'][index],u,&#xa;              depth+1)&#xa;            path.insert(0,index)&#xa;            return(node,path)&#xa;&#xa;&#xa;        return descend(self.root,u)&#xa;&#xa;      def get_nodes(self):&#xa;        def descend(root):&#xa;          node=[root['node']]&#xa;          for child in root['children']:&#xa;            child_nodes=descend(child)&#xa;            node.extend(child_nodes)&#xa;&#xa;          return node&#xa;&#xa;        return descend(self.root)&#xa;&#xa;      def get_mixture(self):&#xa;        def descend(root,mass):&#xa;          weight=[mass*root['main']]&#xa;          node=[root['node']]&#xa;          edges=sticks_to_edges(root['sticks'])&#xa;          weights=diff(hstack([0.0,edges]))&#xa;          for i,child in enumerate(root['children']):&#xa;            (child_weights,child_nodes)=descend(&#xa;            child,mass*(1.0-root['main'])*weights[i])weight.extend(child_weights)&#xa;            node.extend(child_nodes)&#xa;&#xa;          return(weight,node)&#xa;&#xa;        return descend(self.root,1.0)&#xa;&#xa;      def complete_data_log_likelihood(self):&#xa;        weights,nodes=self.get_mixture()&#xa;        llhs=[]&#xa;        for i,node in enumerate(nodes):&#xa;          if node.num_local_data():&#xa;            llhs.append(node.num_local_data()*log(weights[i])+&#xa;            node.data_log_likelihood())&#xa;&#xa;        return sum(array(llhs))&#xa;&#xa;      def complete_log_likelihood(self):&#xa;        weights,nodes=self.get_mixture()&#xa;        llhs=[&#xa;        self.dp_alpha_llh(self.dpAlpha,self.alphaDecay),self.dp_gamma_llh(self.dpGamma)]&#xa;        for i,node in enumerate(nodes):&#xa;          if node.num_local_data():&#xa;            llhs.append(node.data_log_likelihood())&#xa;&#xa;&#xa;        return sum(array(llhs))&#xa;&#xa;      def dp_alpha_llh(self,dpAlpha,alphaDecay):&#xa;        def descend(dpAlpha,root,depth=0):&#xa;          llh=betapdfln(root['main'],1.0,(alphaDecay**depth)*&#xa;          dpAlpha)if self.minDepth&lt;=depth else 0.0 for child in root['children']:&#xa;            llh+=descend(dpAlpha,child,depth+1)&#xa;&#xa;          return llh&#xa;&#xa;        return descend(dpAlpha,self.root)&#xa;&#xa;      def dp_gamma_llh(self,dpGamma):&#xa;        def descend(dpGamma,root):&#xa;          llh=0&#xa;          for i,child in enumerate(root['children']):&#xa;            llh+=betapdfln(root['sticks'][i],1.0,dpGamma)&#xa;            llh+=descend(dpGamma,child)&#xa;&#xa;          return llh&#xa;&#xa;        return descend(dpGamma,self.root)&#xa;&#xa;      def print_graph(self,fh,base_width=5000,min_width=5):&#xa;        print>>fh,&#xa;        print>>fh,&quot; % (;self.root['main'],&quot;X&quot;,max(int(self.root['main']*base_width),min_width))def descend(root,name,mass):&#xa;          total=0.0&#xa;          edges=sticks_to_edges(root['sticks'])&#xa;          weights=diff(hstack([0.0,edges]))&#xa;          for i,child in enumerate(root['children']):&#xa;            childName=&quot;%s-%d&quot;%(name,i)&#xa;            childMass=mass*weights[i]*child['main']&#xa;            print>>fh,&quot; % (;childMass,childName,max(int(childMass*base_width),min_width))print>>fh,&quot; % (;name,childName)total+=childMass+descend(child,childName,&#xa;            mass*weights[i]*(1.0-child['main']))&#xa;          return total&#xa;&#xa;        print>>fh," id="DX1jHls2pEXP"/>
    <sourcecode value="super(alleles,self).__init__(parent=parent,tssb=tssb)&#xa;if tssb is not None:&#xa;  ntps=len(tssb.data[0].a)&#xa;&#xa;self.pi=0.0&#xa;self.param=0.0&#xa;self.param1=0.0&#xa;self.pi1=0.0&#xa;self.path=None&#xa;self.ht=0.0&#xa;if parent is None:&#xa;  self._conc=conc&#xa;  self.pi=1.0&#xa;  self.param=1.0&#xa;&#xa;else:&#xa;  self.pi=rand(1)*parent.pi&#xa;  parent.pi=parent.pi-self.pi&#xa;  self.param=self.pi&#xa;&#xa;" id="nKiEjQfB21Gh"/>
    <sourcecode value="if self.parent()is None:&#xa;  return self._conc&#xa;&#xa;else:&#xa;  return self.parent().conc()&#xa;&#xa;" id="RAqT949Uin0h"/>
    <sourcecode value="if self._parent is not None:&#xa;  self._parent._children.remove(self)&#xa;&#xa;self._parent.pi=self._parent.pi+self.pi&#xa;self._parent=None&#xa;self._children=None&#xa;" id="JW1HYVuzfkRm"/>
    <sourcecode value="return x[0]._log_likelihood(self.param)&#xa;" id="PiOgMXPf2Qua"/>
    <sourcecode value="if self.__is_good_tags():&#xa;  if self.__is_good_pedigree():&#xa;    if self.__is_good_gaps(x):&#xa;      return self.logprob(x)&#xa;&#xa;&#xa;&#xa;return-float('Inf')&#xa;" id="xe4z4wXxk3WE"/>
    <sourcecode value="ancestors=self.get_ancestors()&#xa;timeTag=[int(n.get_data()[0].tag)for n in ancestors if 0>len(n.data)]&#xa;if timeTag[-1]&lt;max(timeTag[0:-1]):&#xa;  return False&#xa;&#xa;offsprings=self.get_offsprings()&#xa;timeTag=[int(n.get_data()[0].tag)for n in offsprings if 0>len(n.data)]&#xa;if timeTag[0]>min(timeTag[1:]):&#xa;  return False&#xa;&#xa;return True&#xa;" id="EIdwL8AJwenG"/>
    <sourcecode value="datums=self.get_data()&#xa;return 1==len(set([int(datum.tag),for datum in datums]))&#xa;" id="yNhcfSIriwn2"/>
    <sourcecode value="lowerNode,upperNode=self.__find_neighbor_datum_n(x)&#xa;lFlag=True&#xa;uFlag=True&#xa;if lowerNode is not None:&#xa;  lFlag=self.__is_good_gap(lowerNode,x,&quot;lower&quot;)&#xa;&#xa;else:&#xa;  lFlag=True&#xa;&#xa;if upperNode is not None:&#xa;  uFlag=self.__is_good_gap(lowerNode,x,&quot;upper&quot;)&#xa;&#xa;else:&#xa;  uFlag=True&#xa;&#xa;return lFlag and uFlag&#xa;" id="FRwKM3EKQtx5"/>
    <sourcecode value="return sum([self.logprob([data])for data in self.get_data()])&#xa;" id="Hjugcpjv3ewC"/>
    <sourcecode value="datums=self.get_data()&#xa;if x not in datums:&#xa;  datums.append(x)&#xa;&#xa;datumsSortedL=sorted(datums,&#xa;key=lambda item:1.0*item.tReadNum/item.nReadNum)idx=datumsSortedL.index(x)&#xa;if 0==idx:&#xa;  return(None,datumsSortedL[1])&#xa;&#xa;elif len(datumsSortedL)-1==idx:&#xa;  return(datumsSortedL[idx-1],None)&#xa;&#xa;else:&#xa;  return(datumsSortedL[idx-1],datumsSortedL[idx+1])&#xa;&#xa;" id="Ql3exYCDF5tp"/>
    <sourcecode value="varpi=constants.VARPI&#xa;rdrLower=1.0*lowerNode.tReadNum/lowerNode.nReadNum&#xa;rdrUpper=1.0*upperNode.tReadNum/upperNode.nReadNum&#xa;L=np.exp(rdrUpper-rdrLower)&#xa;if&quot;lower&quot;==position:&#xa;  cn=lowerNode.copyNumber&#xa;&#xa;elif&quot;upper&quot;==position:&#xa;  cn=upperNode.copyNumber-1&#xa;&#xa;if cn&lt;0:&#xa;  return False&#xa;&#xa;else:&#xa;  return L>=varpi*(1.0+(self.param/&#xa;  (cn*self.param+2*(1-self.param)))" id="MVIZaBPSo7O2"/>
    <sourcecode value="reader=util2.TreeReader(tree_file)&#xa;first_tree=next(reader.load_trees())&#xa;try:&#xa;  params=json.loads(reader.read_extra_file('params.json'))&#xa;&#xa;except KeyError:&#xa;  params=:&#xa;&#xa;&#xa;&#xa;reader.close()&#xa;mutlist=self._list_mutations(first_tree,include_stripe_names,&#xa;include_segment_list)summaries=:&#xa;&#xa;&#xa;all_mutass=:&#xa;&#xa;&#xa;for idx,llh,pops,mutass,structure in self._summarize_all_pops(&#xa;tree_file):&#xa;  summaries[idx]=:&#xa;&#xa;    'llh':llh,'structure':structure,'populations':pops,&#xa;&#xa;  all_mutass[idx]=mutass&#xa;&#xa;return summaries,mutlist,all_mutass,params&#xa;" id="OvhE9f9CUXkA"/>
    <sourcecode value="reader=util2.TreeReader(tree_file)&#xa;for idx,llh,tree in reader.load_trees_and_metadata(&#xa;remove_empty_vertices=True):&#xa;  yield(idx,llh)+self._summarize_pops(tree)&#xa;&#xa;reader.close()&#xa;" id="0m7UKqc239lq"/>
    <sourcecode value="pops=:&#xa;&#xa;&#xa;structure=defaultdict(list)&#xa;mut_assignments=defaultdict(lambda:[])&#xa;idx=[0]&#xa;def _traverse_r(vertex,parent):&#xa;  mutations=vertex.get_data()&#xa;  cell_prev=vertex.params&#xa;  current_idx=idx[0]&#xa;  num_stripes=0&#xa;  for mut in mutations:&#xa;    mut_assignments[current_idx].append(mut.id)&#xa;    num_stripes+=1&#xa;&#xa;  pops[current_idx]=:&#xa;&#xa;    'cellular_prevalence':cell_prev,'num_stripes':num_stripes,&#xa;&#xa;  children=sorted(&#xa;  vertex.children(),key=lambda v:v.param,reverse=True)for child in children:&#xa;    idx[0]+=1&#xa;    structure[current_idx].append(idx[0])&#xa;    _traverse_r(child,current_idx)&#xa;&#xa;&#xa;_traverse_r(tree.root['node'],None)&#xa;return(pops,mut_assignments,structure)&#xa;" id="6z2A9n0Hw33X"/>
    <sourcecode value="stripes=:&#xa;&#xa;&#xa;def _traverse(node):&#xa;  for mut in node['node'].get_data():&#xa;    stripes[mut.stripe_id]=:&#xa;&#xa;      'tumor_reads_num':mut.tumor_reads_num,'normal_reads_num':mut.normal_reads_num,'baseline_label':mut.baseline_label,&#xa;&#xa;    if include_stripe_names:&#xa;      stripes[mut.stripe_id]['name']=mut.stripe_name&#xa;&#xa;    if include_segment_list:&#xa;      stripes[mut.stripe_id]['seg_idx']=mut.segs_idx.split(&quot;,&quot;)&#xa;&#xa;&#xa;  for child in node['children']:&#xa;    _traverse(child)&#xa;&#xa;&#xa;_traverse(tree.root)&#xa;return:&#xa;  'stripes':stripes&#xa;" id="4TGyUHW3gbRj"/>
    <sourcecode value="self._tree_summary_fn=tree_summary_fn&#xa;self._mutation_list_fn=mutation_list_fn&#xa;self._mutation_assignment_fn=mutation_assignment_fn&#xa;self.mutlist=None&#xa;self.tree_summary=None&#xa;self.dataset_name=None&#xa;self._load_tree_data()&#xa;" id="iZDW8g4yIQPX"/>
    <sourcecode value="keys=dic.keys()&#xa;for key in dic.keys():&#xa;  dic[int(key)]=dic[key]&#xa;  del dic[key]&#xa;&#xa;" id="7jnQwgppYEzt"/>
    <sourcecode value="with gzip.GzipFile(self._tree_summary_fn)as treesummf:&#xa;  tree_json=json.load(treesummf)&#xa;  self.dataset_name=tree_json['dataset_name']&#xa;  self.tree_summary=tree_json['trees']&#xa;  self.params=tree_json['params']&#xa;  if'tree_densities'in tree_json:&#xa;    self.tree_densities=tree_json['tree_densities']&#xa;    self._convert_keys_to_ints(self.tree_densities)&#xa;&#xa;  else:&#xa;    self.tree_densities=:&#xa;&#xa;&#xa;&#xa;&#xa;self._convert_keys_to_ints(self.tree_summary)&#xa;for tree_idx,tree_features in self.tree_summary.items():&#xa;  self._convert_keys_to_ints(tree_features['populations'])&#xa;  self._convert_keys_to_ints(tree_features['structure'])&#xa;&#xa;with gzip.GzipFile(self._mutation_list_fn)as mutlistf:&#xa;  self.mutlist=json.load(mutlistf)&#xa;&#xa;self.num_ssms=len(self.mutlist['ssms'])&#xa;" id="z9uYLrPJYH9A"/>
    <sourcecode value="mutass=json.loads(mutf.read('%s.json'%tree_idx))&#xa;mutass=mutass['mut_assignments']&#xa;self._convert_keys_to_ints(mutass)&#xa;return mutass&#xa;" id="4GeEczHZ6B7S"/>
    <sourcecode value="with zipfile.ZipFile(self._mutation_assignment_fn)as mutf:&#xa;  return self._load_assignments(mutf,tree_idx)&#xa;&#xa;" id="5fOQyZ9fiREV"/>
    <sourcecode value="with zipfile.ZipFile(self._mutation_assignment_fn)as mutf:&#xa;  tree_indices=[&#xa;  int(i.filename.split('.')[0])for i in mutf.infolist()]&#xa;  tree_indices.sort()&#xa;  for tree_idx in tree_indices:&#xa;    yield(tree_idx,self._load_assignments(mutf,tree_idx))&#xa;&#xa;&#xa;" id="Jmy1BAVeiqMC"/>
    <sourcecode value="mutass=:&#xa;  I:M for(I,M)in self.load_all_mut_assignments()&#xa;&#xa;return mutass" id="XQJuAwDSg9Rq"/>
    <sourcecode value="self._tree_summaries=tree_summaries&#xa;self._mutlist=mutlist&#xa;self._mutass=mutass&#xa;" id="evMCxLTkVmJT"/>
    <sourcecode value="keys=dic.keys()&#xa;for key in dic.keys():&#xa;  dic[int(key)]=dic[key]&#xa;  del dic[key]&#xa;&#xa;" id="eKKQHR7Z2YLO"/>
    <sourcecode value="for tree_idx,tree_features in self._tree_summaries.items():&#xa;  small_nodes=self._find_small_nodes(&#xa;  tree_idx,tree_features['populations'],min_stripes)self._remove_nodes(small_nodes,tree_idx,mut_destination='best')&#xa;&#xa;return(self._tree_summaries,self._mutass)&#xa;" id="r1nrX7FnexFe"/>
    <sourcecode value="for tree_idx in self._tree_summaries.keys():&#xa;  pops=self._tree_summaries[tree_idx]['populations']&#xa;  structure=self._tree_summaries[tree_idx]['structure']&#xa;  root_idx=0&#xa;  assert len(structure[root_idx])>0&#xa;  if len(structure[root_idx])!=1:&#xa;    continue&#xa;&#xa;  clonal_idx=structure[root_idx][0]&#xa;  assert clonal_idx==1&#xa;  if clonal_idx not in structure or len(structure[clonal_idx])!=1:&#xa;    continue&#xa;&#xa;  child_idx=structure[clonal_idx][0]&#xa;  assert child_idx==2&#xa;  clone,child=pops[clonal_idx],pops[child_idx]&#xa;  if child['num_stripes']==0:&#xa;    continue&#xa;    continue&#xa;&#xa;  if not(np.mean(&#xa;  np.abs(np.array(clone['cellular_prevalence'])-np.array(child['cellular_prevalence'])))&lt;=0.1):&#xa;    continue&#xa;&#xa;  print(tree_idx,'Superclone:',clone,'actual clone:',child)&#xa;  clonal_stripes,clonal_cp=clone['num_stripes'],np.array(&#xa;  clone['cellular_prevalence'])child_stripes,child_cp=child['num_stripes'],np.array(&#xa;  child['cellular_prevalence'])total_stripes=clonal_stripes+child_stripes&#xa;  clone['cellular_prevalence']=list(&#xa;  ((clonal_cp*clonal_stripes)+(child_cp*child_stripes))/total_stripes)self._remove_nodes([child_idx],tree_idx,mut_destination='clonal')&#xa;  print(tree_idx,'New clonal node:',clone)&#xa;&#xa;" id="bHSDEhrdRmo2"/>
    <sourcecode value="polyidxs=set()&#xa;for tidx in self._tree_summaries.keys():&#xa;  structure=self._tree_summaries[tidx]['structure']&#xa;  assert len(structure[0])>0&#xa;  if len(structure[0])==1:&#xa;    continue&#xa;&#xa;  polyidxs.add(tidx)&#xa;&#xa;polyclonal_frac=len(polyidxs)/float(len(self._tree_summaries))&#xa;if polyclonal_frac>=0.8:&#xa;  raise Exception(&#xa;  '%d%% of trees are polyclonal (%s of %s), so not enough to report good posterior.'%(100*polyclonal_frac,len(polyidxs),len(self._tree_summaries)))&#xa;for pidx in sorted(polyidxs):&#xa;  print(pidx,'polyclonal tree at idx=%s'%pidx)&#xa;  del self._tree_summaries[pidx]&#xa;  del self._mutass[pidx]&#xa;&#xa;assert set(self._tree_summaries.keys())==set(self._mutass.keys())&#xa;num_preceding_poly=0&#xa;for tidx in sorted(self._tree_summaries.keys()):&#xa;  if tidx in polyidxs:&#xa;    num_preceding_poly+=1&#xa;&#xa;  else:&#xa;    if num_preceding_poly==0:&#xa;      continue&#xa;&#xa;    newtidx=tidx-num_preceding_poly&#xa;    assert newtidx&lt;tidx&#xa;    assert newtidx not in self._tree_summaries.keys(&#xa;    )and newtidx not in self._mutass.keys()&#xa;    self._tree_summaries[newtidx]=self._tree_summaries[tidx]&#xa;    self._mutass[newtidx]=self._mutass[tidx]&#xa;    del self._tree_summaries[tidx]&#xa;    del self._mutass[tidx]&#xa;&#xa;&#xa;" id="C2fLXg06vQKA"/>
    <sourcecode value="subclone_idxs=sorted(&#xa;self._tree_summaries[tree_idx]['populations'].keys())num_removed=0&#xa;for subclone_idx in range(1,max(subclone_idxs)+1):&#xa;  if subclone_idx not in self._tree_summaries[tree_idx][&#xa;  'populations']:&#xa;    num_removed+=1&#xa;&#xa;  elif num_removed>0:&#xa;    subclone_idx_map[subclone_idx]=subclone_idx-num_removed&#xa;&#xa;&#xa;for subclone_idx in subclone_idxs:&#xa;  if subclone_idx not in subclone_idx_map:&#xa;    continue&#xa;&#xa;  new_idx=subclone_idx_map[subclone_idx]&#xa;  self._tree_summaries[tree_idx]['populations'][&#xa;  new_idx]=self._tree_summaries[tree_idx]['populations'][subclone_idx]del self._tree_summaries[tree_idx]['populations'][subclone_idx]&#xa;  if subclone_idx in self._tree_summaries[tree_idx]['structure']:&#xa;    self._tree_summaries[tree_idx]['structure'][&#xa;    new_idx]=self._tree_summaries[tree_idx]['structure'][subclone_idx]del self._tree_summaries[tree_idx]['structure'][subclone_idx]&#xa;&#xa;&#xa;for subclone_idx,children in self._tree_summaries[tree_idx][&#xa;'structure'].items():&#xa;  self._tree_summaries[tree_idx]['structure'][subclone_idx]=[&#xa;  subclone_idx_map[c]if c in subclone_idx_map else c for c in children]&#xa;&#xa;" id="wNM3SfUei9yD"/>
    <sourcecode value="for sidx,subclone in populations.items():&#xa;  if sidx==0:&#xa;    continue&#xa;&#xa;  subclone[&quot;num_stripes&quot;]=len(self._mutass[tree_idx][sidx])&#xa;&#xa;" id="REYAoZlt7h8S"/>
    <sourcecode value="subclone_idx_map=:&#xa;&#xa;&#xa;tree_features=self._tree_summaries[tree_idx]&#xa;for node_idx in nodes:&#xa;  del tree_features['populations'][node_idx]&#xa;  subclone_idx_map[node_idx]=None&#xa;&#xa;self._remove_nodes_from_tree_structure(subclone_idx_map,&#xa;tree_features['structure'])self._renumber_nodes(tree_idx,subclone_idx_map)&#xa;self._reassign_muts(tree_idx,subclone_idx_map,mut_destination)&#xa;self._correct_mut_counts(tree_features['populations'],tree_idx)&#xa;" id="va6iV9SHmqjI"/>
    <sourcecode value="small_nodes=set()&#xa;subclone_idxs=sorted(populations.keys())&#xa;last_phi=None&#xa;last_idx=None&#xa;if min_stripes>=1:&#xa;  min_stripes=int(min_stripes)&#xa;&#xa;else:&#xa;  num_ssms=len(self._mutlist['ssms'])&#xa;  min_stripes=int(round(float(min_stripes)*num_ssms))&#xa;&#xa;for subclone_idx in subclone_idxs:&#xa;  for p,children in self._tree_summaries[tree_idx][&#xa;  'structure'].items():&#xa;    if subclone_idx in children:&#xa;      parent=p&#xa;      break&#xa;&#xa;&#xa;  subclone=populations[subclone_idx]&#xa;  if subclone_idx>0 and last_idx in self._tree_summaries[tree_idx]['structure'][parent]:&#xa;    assert np.mean(subclone['cellular_prevalence'])&lt;=last_phi&#xa;&#xa;  last_phi=np.mean(subclone['cellular_prevalence'])&#xa;  last_idx=subclone_idx&#xa;  if subclone_idx==0 or subclone['num_ssms']>=min_stripes:&#xa;    continue&#xa;&#xa;  small_nodes.add(subclone_idx)&#xa;&#xa;return small_nodes&#xa;" id="CY6SLQDI9Fzj"/>
    <sourcecode value="def _find_parent(struct,idx):&#xa;  for parent,children in struct.items():&#xa;    if idx in children:&#xa;      return parent&#xa;&#xa;&#xa;  raise Exception('Could not find parent of %s in %s'%(idx,&#xa;  struct))&#xa;removed=set([&#xa;N for N in subclonal_idx_map.keys()if subclonal_idx_map[N]is None])&#xa;for rem in removed:&#xa;  parent=_find_parent(tree_structure,rem)&#xa;  tree_structure[parent]=[&#xa;  c for c in tree_structure[parent]if c!=rem]&#xa;  if rem in tree_structure:&#xa;    tree_structure[parent]+=tree_structure[rem]&#xa;    del tree_structure[rem]&#xa;&#xa;  tree_structure[parent].sort()&#xa;  if len(tree_structure[parent])==0:&#xa;    del tree_structure[parent]&#xa;&#xa;&#xa;" id="cfFzeki0VhXS"/>
    <sourcecode value="for mut_type in('ssms','cnvs'):&#xa;  for mut_id in muts[mut_type]:&#xa;    mut_stats=self._mutlist[mut_type][mut_id]&#xa;    ref_reads=np.mean(mut_stats['ref_reads'])&#xa;    total_reads=np.mean(mut_stats['total_reads'])&#xa;    implied_phi=2*(total_reads-ref_reads)/total_reads&#xa;    implied_phi=min(implied_phi,1.0)&#xa;    lowest_phi_delta=1&#xa;    best_node=None&#xa;    for pidx,pop in populations.items():&#xa;      phi_delta=abs(&#xa;      np.mean(pop['cellular_prevalence'])-implied_phi)if phi_delta&lt;lowest_phi_delta and pidx!=0:&#xa;        lowest_phi_delta=phi_delta&#xa;        best_node=pidx&#xa;&#xa;&#xa;    mutass[best_node][mut_type].append(mut_id)&#xa;&#xa;&#xa;" id="myKC67P1d1Av"/>
    <sourcecode value="root_idx=0&#xa;clonal_idx=1&#xa;assert clonal_idx in structure[root_idx]&#xa;for mut_type in('ssms','cnvs'):&#xa;  mutass[clonal_idx][mut_type]+=muts[mut_type]&#xa;&#xa;" id="4mRthkrgRoJ8"/>
    <sourcecode value="deleted_muts=[]&#xa;mutass=self._mutass[tree_idx]&#xa;for sidx in sorted(subclone_idx_map.keys()):&#xa;  new_idx=subclone_idx_map[sidx]&#xa;  assert new_idx&lt;sidx&#xa;  if new_idx is None:&#xa;    deleted_muts.append(mutass[sidx])&#xa;&#xa;  else:&#xa;    mutass[new_idx]=mutass[sidx]&#xa;&#xa;  del mutass[sidx]&#xa;&#xa;for dm in deleted_muts:&#xa;  if destination=='best':&#xa;    self._move_muts_to_best_node(&#xa;    dm,mutass,self._tree_summaries[tree_idx]['populations'])&#xa;  elif destination=='clonal':&#xa;    self._move_muts_to_clonal_node(&#xa;    dm,mutass,self._tree_summaries[tree_idx]['populations'],self._tree_summaries[tree_idx]['structure'])&#xa;  else:&#xa;    raise Exception('Unknown destination: %s'%destination)" id="nKT9OXb8DBAn"/>
    <sourcecode value="self._dataset_name=dataset_name&#xa;" id="m1Y2kMXSK6M8"/>
    <sourcecode value="with gzip.GzipFile(mutlist_outfn,'w')as mutf:&#xa;  mutlist['dataset_name']=self._dataset_name&#xa;  json.dump(mutlist,mutf)&#xa;&#xa;" id="wkIHodNbSiAm"/>
    <sourcecode value="for summary in summaries.values():&#xa;  calculator=IndexCalculator(summary)&#xa;  summary['linearity_index']=calculator.calc_linearity_index()&#xa;  summary['branching_index']=calculator.calc_branching_index()&#xa;  summary['clustering_index']=calculator.calc_clustering_index()&#xa;&#xa;to_dump=:&#xa;&#xa;  'dataset_name':self._dataset_name,'params':params,'trees':summaries,'tree_densities':calc_tree_densities(summaries),&#xa;&#xa;with gzip.GzipFile(summaries_outfn,'w')as summf:&#xa;  json.dump(to_dump,summf)&#xa;&#xa;" id="jM9kY5Ap2mCb"/>
    <sourcecode value="with zipfile.ZipFile(&#xa;mutass_outfn,'w',compression=zipfile.ZIP_DEFLATED)as muts_file:&#xa;  for tree_idx,tree_mutass in mutass.items():&#xa;    to_dump=:&#xa;&#xa;      'mut_assignments':tree_mutass,'dataset_name':self._dataset_name&#xa;&#xa;    muts_file.writestr('%s.json'%tree_idx,json.dumps(to_dump))" id="4YL4edZm5uvH"/>
    <sourcecode value="self._tree_summ=tree_summ&#xa;self._poprel=self._determine_pop_relations(tree_summ['structure'])&#xa;" id="0vb36pUNVPBy"/>
    <sourcecode value="relations=:&#xa;&#xa;&#xa;all_verts=set()&#xa;def _traverse_r(vertex,ancestors):&#xa;  all_verts.add(vertex)&#xa;  for anc in ancestors:&#xa;    relations[(anc,vertex)]='anc_desc'&#xa;    relations[(vertex,anc)]='desc_anc'&#xa;&#xa;  if vertex in tree_struct:&#xa;    for child in tree_struct[vertex]:&#xa;      _traverse_r(child,ancestors+[vertex])&#xa;&#xa;&#xa;&#xa;root=0&#xa;_traverse_r(root,[])&#xa;for vert1,vert2 in itertools.combinations(all_verts,2):&#xa;  if(vert1,vert2)in relations:&#xa;    continue&#xa;&#xa;  relations[(vert1,vert2)]='cousin'&#xa;  relations[(vert2,vert1)]='cousin'&#xa;&#xa;return relations&#xa;" id="VDHyaSuOT8rF"/>
    <sourcecode value="tree_pops=self._tree_summ['populations']&#xa;totalstripes=sum([P['num_stripes']for P in tree_pops.values()])&#xa;index=0&#xa;for(popidx1,popidx2),relation in self._poprel.items():&#xa;  if relation!=reltype:&#xa;    continue&#xa;&#xa;  nstripes1,nstripes2=tree_pops[popidx1]['num_stripes'],tree_pops[&#xa;  popidx2]['num_stripes']index+=nstripes1*nstripes2&#xa;&#xa;normidx=float(index)/(totalstripes*(totalstripes-1))&#xa;assert 0.&lt;=normidx&lt;=1.&#xa;return normidx&#xa;" id="xxzR5qekQA3T"/>
    <sourcecode value="lowertrisum=self._calc_index('anc_desc')&#xa;linidx=2*lowertrisum&#xa;assert 0.&lt;=linidx&lt;=1.&#xa;return linidx&#xa;" id="bKB1TETMGL1u"/>
    <sourcecode value="return self._calc_index('cousin')&#xa;" id="iOt48XVhsehJ"/>
    <sourcecode value="ccidx=0&#xa;totalstripes=0&#xa;for pop in self._tree_summ['populations'].values():&#xa;  nstripes=pop['num_stripes']&#xa;  ccidx+=nstripes*(nstripes-1)&#xa;  totalstripes+=nstripes&#xa;&#xa;normccidx=float(ccidx)/(totalstripes*(totalstripes-1))&#xa;assert 0.&lt;=normccidx&lt;=1.&#xa;assert np.isclose(&#xa;normccidx,1-self.calc_linearity_index()-self.calc_branching_index())return normccidx" id="c5bzLCe4YV8h"/>
   </codegenerator>
  </codegeneration>
 </XMI.extensions>
</XMI>
